diff --git a/.eslintrc.json b/.eslintrc.json
index 346aa0c75f86a3d47901ea282152e7fc47c4538b..a565d5b720fdb26a083dd8c3da0e838ddddba9f0 100644
--- a/.eslintrc.json
+++ b/.eslintrc.json
@@ -24,7 +24,10 @@
     ],
     "import/no-unused-modules": ["warn", {
       "unusedExports": true,
-      "ignoreExports": ["**/api/**/*"]
+      "ignoreExports": [
+        "**/api/**/*",
+        "**/store/types.ts"
+      ]
     }],
     "@typescript-eslint/adjacent-overload-signatures": "warn",
     "@typescript-eslint/ban-ts-comment": "warn",
@@ -47,7 +50,7 @@
     "prefer-const": "warn",
     "no-var": "warn",
     "no-unused-expressions": "warn",
-    "no-undef": "warn"
+    "no-undef": "warn",
   },
   "settings": {
     "import/resolver": {
diff --git a/README_Docs/tasks/TechDebt.md b/README_Docs/tasks/TechDebt.md
deleted file mode 100644
index b9752ee26a6e14e89d7c3721ad8c25426561589c..0000000000000000000000000000000000000000
--- a/README_Docs/tasks/TechDebt.md
+++ /dev/null
@@ -1 +0,0 @@
-<!-- fill this in  -->
\ No newline at end of file
diff --git a/README_Docs/tasks/team/tech-debt/Home Page Optimization Tech Debt.md b/README_Docs/tasks/team/tech-debt/Home Page Optimization Tech Debt.md
new file mode 100644
index 0000000000000000000000000000000000000000..86a1aabab4c123c46f757771471881511ca89fde
--- /dev/null
+++ b/README_Docs/tasks/team/tech-debt/Home Page Optimization Tech Debt.md	
@@ -0,0 +1,596 @@
+# HomePage & ChatContainer Optimization Checklist
+
+## Implementation Order Recommendation
+For minimal risk during implementation, follow this order:
+1. Create Zustand store for activities (#5)
+2. Optimize Local Storage (#8)
+3. Implement error boundaries (#6)
+4. Simplify welcome message flow (#3) 
+5. Centralize loading states (#2)
+6. Eliminate duplicate API calls (#1)
+7. Reduce unnecessary re-renders (#4)
+8. Lazy load components (#9)
+9. Implement Suspense loading states (#7)
+
+## 1. Eliminate Duplicate API Calls
+
+- [ ] **Consolidate Calendar Activity Fetching**
+  - Current issue: Both `useExamActivities` hook and HomePage component fetch similar calendar data
+  - File: `app/(dashboard)/(routes)/home/page.tsx` (lines ~209-217) and `components/chatgpt/ChatContainer.tsx`
+  - Solution: Lift the data fetching to HomePage only and pass activities down to ChatContainer as props
+
+```typescript
+// Step 1: Update the ChatContainer props interface in components/chatgpt/ChatContainer.tsx
+interface ChatContainerProps {
+  className?: string;
+  chatbotRef?: React.MutableRefObject<{
+    sendMessage: (message: string, messageContext?: string) => void;
+  }>;
+  // Add new props
+  examActivities?: CalendarActivity[];
+  studyActivities?: CalendarActivity[];
+  examLoading?: boolean;
+  studyLoading?: boolean;
+}
+
+// Step 2: In page.tsx, pass data down
+const { activities: examActivities, loading: examLoading } = useExamActivities();
+const { activities: studyActivities, loading: studyLoading } = useAllCalendarActivities();
+
+// Then in render:
+{activePage === 'KalypsoAI' && (
+  <ChatContainer 
+    chatbotRef={chatbotRef} 
+    examActivities={examActivities}
+    studyActivities={studyActivities}
+    examLoading={examLoading}
+    studyLoading={studyLoading}
+  />
+)}
+
+// Step 3: In ChatContainer.tsx, use props instead of hooks when available
+// Replace the existing hook calls with:
+const {
+  examActivities: propExamActivities,
+  studyActivities: propStudyActivities,
+  examLoading: propExamLoading,
+  studyLoading: propStudyLoading,
+} = props;
+
+// Use passed props when available, fall back to hooks when not
+const examActivities = propExamActivities || useExamActivities().activities;
+const studyActivities = propStudyActivities || useAllCalendarActivities().activities;
+const examLoading = propExamLoading !== undefined ? propExamLoading : useExamActivities().loading;
+const studyLoading = propStudyLoading !== undefined ? propStudyLoading : useAllCalendarActivities().loading;
+```
+
+**Note**: This approach maintains backward compatibility so ChatContainer can work both standalone and as a child component.
+
+## 2. Streamline Loading State Management
+
+- [ ] **Centralize Loading States**
+  - Current issue: ChatContainer implements its own loading logic separate from HomePage
+  - File: `components/chatgpt/ChatContainer.tsx` (lines ~147-176)
+  - Solution: Use a single source of truth for loading states while maintaining component-specific loading visualization
+
+```typescript
+// In ChatContainer.tsx, modify prefetchWelcomeMessage:
+const prefetchWelcomeMessage = async () => {
+  // Check loading state from props first (if provided), then fall back to internal state
+  const isLoading = (props.examLoading !== undefined && props.studyLoading !== undefined) 
+    ? (props.examLoading || props.studyLoading) 
+    : (examLoading || studyLoading);
+    
+  if (isLoading) {
+    console.log('[ChatContainer] Waiting for activities to load before generating welcome message');
+    // Set a fallback message if we need to show something immediately
+    const loadingMessage = `Hello ${userInfo?.firstName || 'there'}! I'm loading your recent activities...`;
+    setWelcomeMessage(loadingMessage);
+    setIsWelcomeMessageTemporary(true);
+    return;
+  }
+  
+  // Rest of the function...
+}
+```
+
+**Note**: This approach allows ChatContainer to work with both parent-provided loading states or self-managed loading states, preventing any UI regressions.
+
+## 3. Optimize Welcome Message Generation
+
+- [ ] **Simplify Welcome Message Flow**
+  - Current issue: Two-step message update (temporary → final) with complex cache logic
+  - File: `components/chatgpt/ChatContainer.tsx` (lines ~147-277)
+  - Solution: Generate message once when all data is available
+
+```typescript
+// Simplified approach with safeguards
+useEffect(() => {
+  // Skip if we already have a welcome message and it's not temporary
+  if (welcomeMessage && !isWelcomeMessageTemporary) {
+    return;
+  }
+
+  // Define keys once to ensure consistency
+  const localStorageKey = `welcome-message-${userInfo?.userId || 'anonymous'}`;
+  
+  // Only generate when we have all required data
+  if (!examLoading && !studyLoading && userInfo) {
+    // Check cache first
+    try {
+      const cachedData = localStorage.getItem(localStorageKey);
+      if (cachedData) {
+        const { message, timestamp } = JSON.parse(cachedData);
+        const now = Date.now();
+        // Use cache if it's less than 6 hours old
+        if (now - timestamp < 6 * 60 * 60 * 1000) {
+          setWelcomeMessage(message);
+          setIsWelcomeMessageTemporary(false);
+          return;
+        }
+      }
+    } catch (e) {
+      console.error('[ChatContainer] Error parsing cached welcome message:', e);
+    }
+    
+    // Generate new message
+    const gameState = {
+      streakDays,
+      testScore,
+      userLevel,
+      totalPatients
+    };
+    
+    const templateMessage = generateWelcomeMessage({
+      userInfo,
+      examActivities,
+      studyActivities,
+      gameState
+    });
+    
+    console.log('[ChatContainer] Generated template welcome message');
+    
+    // Update state
+    setWelcomeMessage(templateMessage);
+    setIsWelcomeMessageTemporary(false);
+    
+    // Cache for future sessions
+    localStorage.setItem(localStorageKey, JSON.stringify({
+      message: templateMessage,
+      timestamp: Date.now()
+    }));
+  }
+}, [
+  examLoading, studyLoading, userInfo, 
+  examActivities, studyActivities, 
+  welcomeMessage, isWelcomeMessageTemporary, 
+  streakDays, testScore, userLevel, totalPatients
+]);
+```
+
+**Note**: This approach simplifies the flow while keeping cache functionality and preserving the existing behavior.
+
+## 4. Reduce Unnecessary Re-renders
+
+- [ ] **Optimize Dependency Arrays**
+  - Current issue: Too many dependencies in useMemo/useCallback functions
+  - File: `app/(dashboard)/(routes)/home/page.tsx` (lines ~700-755)
+  - Solution: Split up the large content useMemo into smaller, focused memoized components
+
+```typescript
+// In page.tsx:
+
+// Step 1: Properly memoize callbacks that will be passed to child components
+const handleIntroVideoComplete = useCallback(async () => {
+  try {
+    await setHasSeenIntroVideo(true);
+    toast.success("Introduction video completed!");
+  } catch (error) {
+    console.error("[HomePage] Failed to update intro video status:", error);
+    toast.error("Failed to update your profile. Please try again.");
+  }
+}, [setHasSeenIntroVideo]);
+
+// Step 2: Create memoized child components
+const KalypsoTab = memo(({ 
+  hasSeenIntroVideo, 
+  onIntroComplete, 
+  chatbotRef,
+  examActivities,
+  studyActivities,
+  examLoading,
+  studyLoading
+}) => (
+  <div className="h-full overflow-hidden">
+    {!hasSeenIntroVideo ? (
+      <IntroVideoPlayer onComplete={onIntroComplete} />
+    ) : (
+      <ChatContainer 
+        chatbotRef={chatbotRef} 
+        examActivities={examActivities}
+        studyActivities={studyActivities}
+        examLoading={examLoading}
+        studyLoading={studyLoading}
+      />
+    )}
+  </div>
+));
+
+// Step 3: In the render function
+{(activePage === 'KalypsoAI' || !activePage) && (
+  <KalypsoTab 
+    hasSeenIntroVideo={hasSeenIntroVideo}
+    onIntroComplete={handleIntroVideoComplete}
+    chatbotRef={chatbotRef}
+    examActivities={examActivities}
+    studyActivities={studyActivities}
+    examLoading={examLoading}
+    studyLoading={studyLoading}
+  />
+)}
+```
+
+- [ ] **Use useCallback for Event Handlers in ChatContainer**
+  - Current issue: Some functions in ChatContainer are recreated on every render
+  - File: `components/chatgpt/ChatContainer.tsx`
+  - Solution: Wrap all event handlers with useCallback with proper dependency arrays
+
+```typescript
+// In ChatContainer.tsx
+// Example for toggleAudio handler:
+const toggleAudio = useCallback(() => {
+  // Prevent rapid toggling by enforcing a minimum time between toggles
+  const now = Date.now();
+  const timeSinceLastToggle = now - lastToggleTime;
+  
+  console.log('[ChatContainer] toggleAudio called, time since last toggle:', timeSinceLastToggle, 'ms');
+  
+  // Only allow toggle if it's been at least 500ms since the last toggle
+  if (timeSinceLastToggle < 500) {
+    console.log('[ChatContainer] Ignoring toggle, too soon after last toggle');
+    return;
+  }
+  
+  setLastToggleTime(now);
+  
+  if (!audioEnabled) {
+    console.log('[ChatContainer] Enabling audio and playing sound');
+    audio.playSound('chatbot-open');
+  } else {
+    console.log('[ChatContainer] Disabling audio');
+  }
+  setAudioEnabled(!audioEnabled);
+}, [audioEnabled, lastToggleTime, audio]);
+
+// Do the same for other event handlers:
+// - handleSendMessage
+// - handleTabClick
+// - handleCalendarNavigate
+// - handleSelectEvent
+// - handleEventUpdate
+// - playAudio
+// - stopAudio
+```
+
+## 5. Implement Proper Data Sharing with Zustand
+
+- [ ] **Create a Dedicated Store Slice for Activities**
+  - Current issue: Activity data exists in component state instead of global store
+  - File: Create new file `store/slices/activitiesSlice.ts`
+  - Solution: Implement a new slice for shared calendar activity data with graceful migration path
+
+```typescript
+// In new file store/slices/activitiesSlice.ts
+import { create } from 'zustand';
+import type { CalendarActivity } from '@/types/calendar';
+
+interface ActivitiesState {
+  examActivities: CalendarActivity[];
+  studyActivities: CalendarActivity[];
+  examLoading: boolean;
+  studyLoading: boolean;
+  fetchActivities: () => Promise<void>;
+  // Add methods to update activities
+  setExamActivities: (activities: CalendarActivity[]) => void;
+  setStudyActivities: (activities: CalendarActivity[]) => void;
+}
+
+export const useActivitiesStore = create<ActivitiesState>((set) => ({
+  examActivities: [],
+  studyActivities: [],
+  examLoading: true,
+  studyLoading: true,
+  setExamActivities: (activities) => set({ examActivities: activities }),
+  setStudyActivities: (activities) => set({ studyActivities: activities }),
+  fetchActivities: async () => {
+    set({ examLoading: true, studyLoading: true });
+    try {
+      const [examData, studyData] = await Promise.all([
+        fetch('/api/exam-activities').then(res => res.json()),
+        fetch('/api/study-activities').then(res => res.json())
+      ]);
+      
+      set({ 
+        examActivities: examData, 
+        studyActivities: studyData,
+        examLoading: false,
+        studyLoading: false
+      });
+    } catch (error) {
+      console.error('Error fetching activities:', error);
+      set({ examLoading: false, studyLoading: false });
+    }
+  }
+}));
+
+// Then in selectors.ts:
+export const useActivities = () => useActivitiesStore(state => ({
+  examActivities: state.examActivities,
+  studyActivities: state.studyActivities,
+  examLoading: state.examLoading,
+  studyLoading: state.studyLoading,
+  fetchActivities: state.fetchActivities,
+  setExamActivities: state.setExamActivities,
+  setStudyActivities: state.setStudyActivities
+}));
+
+// Migration plan - Phase 1: In existing components that use the old hooks,
+// update the central store when new data is fetched, but keep using the old hooks
+// Example in custom hooks:
+
+// In useExamActivities.ts:
+export function useExamActivities() {
+  // Original logic
+  const [activities, setActivities] = useState<CalendarActivity[]>([]);
+  const [loading, setLoading] = useState(true);
+  
+  // Add store update
+  const { setExamActivities } = useActivitiesStore();
+  
+  // In the fetch function:
+  const fetchActivities = useCallback(async () => {
+    // ... existing fetch logic
+    setActivities(data);
+    // Update central store
+    setExamActivities(data);
+    // ... rest of function
+  }, [setExamActivities]);
+  
+  // Rest of hook
+}
+
+// Phase 2: After confirming Phase 1 works, refactor components to use the store directly
+```
+
+**Note**: This two-phase migration approach allows gradual adoption of the central store without breaking existing functionality.
+
+## 6. Improve Error Handling
+
+- [ ] **Implement Consistent Error Boundaries**
+  - Current issue: Errors in data fetching might not be properly caught and displayed
+  - File: Both `app/(dashboard)/(routes)/home/page.tsx` and `components/chatgpt/ChatContainer.tsx`
+  - Solution: Add dedicated error boundary components and consistent error UI
+
+```typescript
+// Create a new file: components/common/ErrorBoundary.tsx
+import React, { Component, ErrorInfo, ReactNode } from 'react';
+
+interface Props {
+  children: ReactNode;
+  fallback?: ReactNode | ((error: Error) => ReactNode);
+  onError?: (error: Error, errorInfo: ErrorInfo) => void;
+}
+
+interface State {
+  hasError: boolean;
+  error: Error | null;
+}
+
+class ErrorBoundary extends Component<Props, State> {
+  constructor(props: Props) {
+    super(props);
+    this.state = { hasError: false, error: null };
+  }
+
+  static getDerivedStateFromError(error: Error): State {
+    return { hasError: true, error };
+  }
+
+  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {
+    console.error('ErrorBoundary caught an error:', error, errorInfo);
+    this.props.onError?.(error, errorInfo);
+  }
+
+  render(): ReactNode {
+    if (this.state.hasError) {
+      if (typeof this.props.fallback === 'function') {
+        return this.props.fallback(this.state.error!);
+      }
+      return this.props.fallback || (
+        <div className="p-4 bg-red-500 bg-opacity-10 border border-red-500 text-red-500 rounded-lg">
+          <h2>Something went wrong</h2>
+          <details>
+            <summary>Error details</summary>
+            <pre>{this.state.error?.toString()}</pre>
+          </details>
+        </div>
+      );
+    }
+
+    return this.props.children;
+  }
+}
+
+export default ErrorBoundary;
+
+// Usage in HomePage:
+<ErrorBoundary 
+  fallback={(error) => (
+    <div className="gradientbg p-4 rounded-lg">
+      <h2 className="text-xl text-white mb-2">Error Loading Content</h2>
+      <p className="text-white opacity-80">Please refresh the page or try again later.</p>
+      {process.env.NODE_ENV === 'development' && (
+        <pre className="mt-4 p-2 bg-black bg-opacity-50 rounded text-xs text-red-300 overflow-auto">
+          {error.toString()}
+        </pre>
+      )}
+    </div>
+  )}
+>
+  {/* Main content */}
+</ErrorBoundary>
+```
+
+**Note**: Error boundaries only catch rendering errors, so we still need try/catch blocks for data fetching and event handlers.
+
+## 7. Implement Better Loading States with Suspense
+
+- [ ] **Use React Suspense for Loading States**
+  - Current issue: Manual loading state management with multiple flags
+  - Files: Both HomePage and ChatContainer
+  - Solution: Add Suspense boundaries with appropriate fallbacks around async components
+
+```typescript
+// IMPLEMENTATION NOTE: This is a more advanced change and should be done last after
+// all other optimizations are working. Start with applying Suspense to non-critical components.
+
+// Step 1: Create custom wrappers for data fetching that work with Suspense
+// utilities/suspense.ts
+export function createResource<T>(promise: Promise<T>): { read: () => T } {
+  let status: 'pending' | 'success' | 'error' = 'pending';
+  let result: T;
+  let error: any;
+  
+  const suspender = promise.then(
+    (data) => {
+      status = 'success';
+      result = data;
+    },
+    (e) => {
+      status = 'error';
+      error = e;
+    }
+  );
+  
+  return {
+    read() {
+      if (status === 'pending') {
+        throw suspender;
+      } else if (status === 'error') {
+        throw error;
+      } else {
+        return result;
+      }
+    }
+  };
+}
+
+// Step 2: Update a component to use Suspense-compatible data fetching
+// Example for a profile component:
+const ProfileWithSuspense = () => {
+  const userResource = useMemo(() => {
+    return createResource(fetchUserProfile());
+  }, []);
+  
+  const user = userResource.read(); // This will suspend if data is not ready
+  
+  return (
+    <div>
+      <h2>{user.name}</h2>
+      <p>{user.bio}</p>
+    </div>
+  );
+};
+
+// Step 3: Use Suspense in the parent component
+<Suspense fallback={<ProfileSkeleton />}>
+  <ProfileWithSuspense />
+</Suspense>
+```
+
+**Note**: Implementing Suspense requires a significant refactoring of how data is fetched and should be done incrementally, starting with leaf components.
+
+## 8. Optimize Local Storage Usage
+
+- [ ] **Implement Storage Expiration Cleanup**
+  - Current issue: Potential localStorage bloat from welcome messages
+  - File: `components/chatgpt/ChatContainer.tsx` (line ~173)
+  - Solution: Add cache cleanup for old entries
+
+```typescript
+// Add to ChatContainer mount effect:
+// Clean up old cached messages
+const cleanupLocalStorage = () => {
+  console.log('[ChatContainer] Running localStorage cleanup');
+  const keys = Object.keys(localStorage);
+  const now = Date.now();
+  let cleanedItems = 0;
+  
+  keys.forEach(key => {
+    if (key.startsWith('welcome-message-')) {
+      try {
+        const data = JSON.parse(localStorage.getItem(key) || '{}');
+        if (data.timestamp && (now - data.timestamp > 7 * 24 * 60 * 60 * 1000)) {
+          // Remove items older than 7 days
+          localStorage.removeItem(key);
+          cleanedItems++;
+        }
+      } catch (e) {
+        // Invalid JSON, remove the item
+        localStorage.removeItem(key);
+        cleanedItems++;
+      }
+    }
+  });
+  
+  if (cleanedItems > 0) {
+    console.log(`[ChatContainer] Cleaned up ${cleanedItems} stale items from localStorage`);
+  }
+};
+
+// Add to component mount effect
+useEffect(() => {
+  console.log('[ChatContainer] Component mounted, prefetching welcome message');
+  
+  // Run cleanup first
+  cleanupLocalStorage();
+  
+  // Rest of the effect...
+}, []);
+```
+
+**Note**: This is a safe, non-breaking change that can be implemented immediately.
+
+## 9. Lazy Load Components
+
+- [ ] **Implement Lazy Loading for Heavy Components**
+  - Current issue: All components loaded upfront regardless of active tab
+  - File: `app/(dashboard)/(routes)/home/page.tsx`
+  - Solution: Use dynamic imports for tab components with proper loading states
+
+```typescript
+// At the top of the file:
+// For components NOT visible in the initial render or above the fold:
+import dynamic from 'next/dynamic';
+import { Suspense } from 'react';
+
+// Replace direct imports with lazy imports for appropriate components
+const AdaptiveTutoring = dynamic(() => import('./AdaptiveTutoring'), {
+  loading: () => <LoadingSpinner message="Loading tutoring suite..." />
+});
+
+const PracticeTests = dynamic(() => import('./PracticeTests'), {
+  loading: () => <LoadingSpinner message="Loading practice tests..." />
+});
+
+const FlashcardDeck = dynamic(() => import('./FlashcardDeck'), {
+  loading: () => <LoadingSpinner message="Loading flashcards..." />
+});
+
+// IMPORTANT: Do NOT lazy load components that are likely to be shown immediately
+// Keep direct imports for:
+// - ChatContainer (if KalypsoAI is the default tab)
+// - Any components visible above the fold
+```
+
+**Note**: Only apply lazy loading to components used in non-default tabs to prevent layout shifting in the initial render.
\ No newline at end of file
diff --git a/README_Docs/tasks/team/tech-debt/State Management Architecture Tech Debt.md b/README_Docs/tasks/team/tech-debt/State Management Architecture Tech Debt.md
new file mode 100644
index 0000000000000000000000000000000000000000..64a05b45934338be14e11a83ad092fb0285ffd2d
--- /dev/null
+++ b/README_Docs/tasks/team/tech-debt/State Management Architecture Tech Debt.md	
@@ -0,0 +1,172 @@
+# Technical Debt in State Management
+
+## Inconsistent State Access Patterns
+
+Our application currently has inconsistent patterns for accessing global state, which creates technical debt and potential for bugs:
+
+### Current Approach
+
+1. **Mixed State Management Sources**:
+   - We have `selectors.ts` which provides proper Zustand hooks (`useUI`, `useUser`, `useAudio`, etc.)
+   - But we also have a separate `hooks/useUserInfo.ts` that wraps `useUser` and adds additional functionality
+   - Component `page.tsx` accesses state through both systems:
+     ```typescript
+     // From selectors.ts (Zustand)
+     const { activePage, navigateHomeTab, updateSubSection } = useNavigation();
+     
+     // From hooks/useUserInfo.ts (wrapper over Zustand)
+     const { userInfo, isLoading: isLoadingUserInfo, isSubscribed, setHasSeenIntroVideo } = useUserInfo();
+     ```
+
+2. **Redundant State Management**:
+   - `useUserInfo` hook internally uses Zustand's `useUser` hook but adds caching, debouncing, and API interaction
+   - This creates two sources of truth for user state:
+     ```typescript
+     // In useUserInfo.ts
+     const { 
+       userInfo,
+       isSubscribed,
+       setIsSubscribed,
+       refreshUserInfo,
+       setHasSeenIntroVideo
+     } = useUser(); // Uses Zustand
+     ```
+
+3. **Legacy Context API Artifacts**:
+   - The pattern suggests that the app migrated from React Context to Zustand, but didn't fully refactor all components and hooks
+   - The `useUserInfo` hook appears to be a remnant from a Context-based approach
+
+### Optimization Path
+
+1. **Standardize State Access**:
+   - Choose one approach for accessing global state (preferably through the Zustand selectors)
+   - Move API interaction logic from `useUserInfo` to the Zustand store actions
+
+2. **Separate Data Fetching from State Management**:
+   - Data fetching logic (API calls) should be separate from state management
+   - Consider using React Query alongside Zustand for data fetching
+
+3. **Refactor Components to Use Direct Selectors**:
+   - Update `page.tsx` and other components to use the selectors directly
+   - Replace:
+     ```typescript
+     const { userInfo, isSubscribed } = useUserInfo();
+     ```
+     with:
+     ```typescript
+     const { userInfo, isSubscribed } = useUser();
+     ```
+
+## State Management Technical Debt Checklist
+
+### Implementation Priorities (Recommended Order)
+
+- [ ] **Phase 1: Audit & Documentation** (1-2 days)
+- [ ] **Phase 2: Store Enhancement** (2-3 days)
+- [ ] **Phase 3: Hook Migration** (3-5 days)
+- [ ] **Phase 4: Component Refactoring** (3-7 days)
+- [ ] **Phase 5: Legacy Code Removal** (1-2 days)
+
+### Phase 1: Audit & Documentation
+
+- [ ] **Audit Current State Management**
+  - [ ] Create inventory of all custom hooks that wrap Zustand stores
+    - [ ] `hooks/useUserInfo.ts`
+    - [ ] `hooks/useCalendarActivities.ts`
+    - [ ] `hooks/useExamActivities.ts`
+    - [ ] Other similar hooks
+  - [ ] Document dependencies between hooks and components
+  - [ ] Identify components using mixed state access patterns
+
+- [ ] **Document Preferred Pattern**
+  - [ ] Create `README_Docs/architecture/state-management.md` with guidelines
+  - [ ] Add examples of correct vs. incorrect state access
+  - [ ] Include patterns for data fetching vs. state management
+
+### Phase 2: Store Enhancement
+
+- [ ] **Enhance Zustand Stores with API Logic**
+  - [ ] Add API interaction methods to `userSlice.ts`
+    ```typescript
+    // Example enhancement to userSlice.ts
+    fetchUserProfile: async () => {
+      set({ isLoading: true });
+      try {
+        const response = await fetch('/api/user/profile');
+        const data = await response.json();
+        set({ userInfo: data, isLoading: false });
+      } catch (error) {
+        console.error('Error fetching user profile:', error);
+        set({ error, isLoading: false });
+      }
+    }
+    ```
+  - [ ] Create new `store/slices/activitiesSlice.ts` (as outlined in optimization plan)
+  - [ ] Add debouncing and caching mechanisms within the store actions
+
+- [ ] **Update Selectors File**
+  - [ ] Ensure all new store actions are exposed through selectors
+  - [ ] Add JSDoc comments to document proper usage
+
+### Phase 3: Hook Migration
+
+- [ ] **Create Migration Strategy for Each Custom Hook**
+  - [ ] Analyze `useUserInfo.ts` and extract unique functionality
+  - [ ] Move core data fetching to React Query or store actions
+  - [ ] Create deprecation warning in legacy hooks:
+    ```typescript
+    export const useUserInfo = () => {
+      console.warn(
+        'DEPRECATED: useUserInfo is deprecated. Use useUser() from @/store/selectors instead.'
+      );
+      // Legacy implementation...
+    }
+    ```
+
+- [ ] **Create Bridge Hooks (Temporary)**
+  - [ ] Implement hooks that use the new pattern but maintain old API
+  - [ ] This allows gradual component migration without breaking changes
+
+### Phase 4: Component Refactoring
+
+- [ ] **Prioritize Components for Refactoring**
+  - [ ] Start with core components like `app/(dashboard)/(routes)/home/page.tsx`
+  - [ ] Then `components/chatgpt/ChatContainer.tsx`
+  - [ ] Followed by other key components
+
+- [ ] **Use Direct Selectors in High-Priority Components**
+  - [ ] Replace `useUserInfo()` with `useUser()` from selectors
+  - [ ] Replace calendar activity hooks with store selectors
+  - [ ] Update component tests to reflect new data patterns
+
+- [ ] **Track Completion Percentage**
+  - [ ] Create list of all components that need updates
+  - [ ] Track progress on migration (e.g., "65% of components migrated")
+
+### Phase 5: Legacy Code Removal
+
+- [ ] **Remove Deprecated Hooks**
+  - [ ] Once all components are migrated, remove legacy hooks
+  - [ ] Remove any adapter/bridge code created during migration
+
+- [ ] **Cleanup and Finalization**
+  - [ ] Run full test suite to ensure no regressions
+  - [ ] Update documentation to reflect completed migration
+  - [ ] Remove deprecation warnings and transitional code
+
+## Next Steps
+
+1. Begin with Phase 1 (Audit & Documentation) to fully understand the scope
+2. Implement Phase 2 (Store Enhancement) to provide proper alternatives
+3. Execute Phases 3-5 methodically, with proper testing between stages
+4. Consider this work in parallel with the optimization checklist from `page-optimization.md`
+
+## Synergy with Page Optimization
+
+Many items in this technical debt cleanup align with the optimization plan already documented. Specifically:
+
+1. Creating a dedicated activities store (#5 in page-optimization.md)
+2. Centralizing data fetching (#1 in page-optimization.md)
+3. Improving error handling (#6 in page-optimization.md)
+
+When implementing these changes, reference both documents to ensure consistent approach.
\ No newline at end of file
diff --git a/README_Docs/tasks/user-dennis/1-tasks-all.md b/README_Docs/tasks/user-dennis/1-tasks-all.md
index dac85f4f19f6eeeffa541b8a39b2c6797f158668..b409964e7d3eab8b433a5412baee4765179305da 100644
--- a/README_Docs/tasks/user-dennis/1-tasks-all.md
+++ b/README_Docs/tasks/user-dennis/1-tasks-all.md
@@ -3,38 +3,35 @@
 1.**Track UI Globally** - Dennis 
 - current Schema in UI State: 
 ` "currentRoute": "/home"`  
-- navigation: {
+- ```navigation: {
     page:  //  ex: `/home` , `/test`, `/cars`, `/ats` // anki clinic done
-    subSection: // object that encapsulates all subsections - each page could have different looking subsections
-}
-
-    // ex: if user lands in `/ats`
-    UI State would look like 
-    navigation:{
-        page: `/ats`
-        subSection: {
-            concept: "Amino Acids" //this is the top 6 button
-            contentType:   Video, reading, quiz, etc
-    }
-}
- - make sure every route is accounted for,
- - CARS: `context:passage, questionsAsked , explanationNotes`
+    subSection: // object that encapsulates all subsections - each page could have different looking 
+}```
  
  2) **Prynce priority: in Home - we need to fetch the user's information**
- First time user signs in - ChatContainer is replaced by a new <Component> that holds space for a  3 minute video afterwards there a checkbox dialog you've watched it, (2nd time they login they dont see the video if the check was true)
+ [ ] First time user signs in track ChatContainer is replaced by a new <Component> that holds space for a  3 minute video afterwards there a checkbox dialog you've watched it, (2nd time they login they dont see the video if the check was true)
 ->
-ChatContainer (similar te refactor-final -branch) has transparent background -   interactive kalypso, waves and always talks right when u login.
+ChatContainer (similar te refactor-final -branch) has transparent background -   interactive kalypso, waves and always talks right when u login -use elevenlabs
 Kalypso has context and summarizes your week.
 
-- last time you were here its been this many days.
+- last time you were here its been this many day (date of latest user activity)
 - greet them happily -
-- next test  with motivational message! 
+- notify them of next test date with motivational message! 
+
+- api call with incoming user activity, day of next time, pass it into 4o mini
 
 - Example: 
 FIRST MESSAGE IS HARDCODED AFTER THEY ENTER! 
 
    "Hey, welcome back! It's been three days. You scored a 492 on your last test, which isn't the best, but you have another one in SEVEN days. Keep on rocking, kiddo!" 
 
+
+2.5. **Navigate to different parts of program implementations**
+A. unique links for every route / document
+B. Global Navigator component that plays back and navigates
+C. Homework component (Esther's idea)
+
+
  3. **In ATS - Kalypso knows the content you are looking at and will quiz you (depends on 2).**
  - given that #2 is done and we track user's ats context which might look like "timestamp, videoTranscript", we have kalypso pop in randomly it pauses the video kapyso asks a question based on the content the user has already seen (see our `refactor-home-final` branch ) .
 
diff --git a/README_Docs/tasks/user-dennis/1-tasks-fixbug.md b/README_Docs/tasks/user-dennis/1-tasks-fixbug.md
deleted file mode 100644
index a284433380a669598fedc253a325a2a23131c0b9..0000000000000000000000000000000000000000
--- a/README_Docs/tasks/user-dennis/1-tasks-fixbug.md
+++ /dev/null
@@ -1,169 +0,0 @@
-# Onboarding Navigation Requirements
-
-
-
-## Routing Requirement
-**Routing should ONLY happen when users explicitly press the login button at the root URL**. The application should never automatically redirect users who navigate to localhost:3000 without clicking the login button.
-When users explicitly press the login button at localhost:3000 (or mymcat.ai), the application should route them to the appropriate page based on their onboarding status:
-
-When clicking the login button:
-- If `onboardingComplete` is true (user has completed onboarding), they should go to `/home`
-- If `onboardingComplete` is false (user hasn't completed onboarding), they should go to `/onboarding`
-
-The solution must handle these specific edge cases:
-1. **New User Flow**: When a new user who hasn't completed onboarding goes to the root URL and presses the login button, they should be redirected to `/onboarding`.
-
-2. **Returning User Flow**: When a returning user who has completed onboarding goes to the root URL and presses the login button, they should be redirected to `/home`.
-
-3. **Post-Login Root Navigation**: When a user who is already logged in navigates directly to the root path, they should remain at the root URL with no redirect.
-
-4. **Post-Logout Flow**: When a user logs out and then returns to the site, they should remain at the root URL with no redirect until they press the login button again.
-
-
-
-## Current onboardingComplete Explanation 
-
-This section details how we currently implement onboarding...
-
-- When a new user first interacts with the system, an `onboardingInfo` object is created in the database during the `handleNameSubmit` function in `useOnboardingInfo.ts`. This happens AFTER the user authenticates with Clerk and begins the onboarding process. Specifically, the creation occurs when they submit their name in the first onboarding step, which triggers a POST request to `/api/user-info`. 
-
-- The `onboardingInfo` object is not created empty but is initialized with a complete set of default values in the POST endpoint:
-  ```javascript
-  onboardingInfo: {
-    currentStep: 1,
-    onboardingComplete: false,
-    firstName: firstName || null,  // Uses the user-provided name
-    college: null,
-    isNonTraditional: null,
-    isCanadian: null,
-    gpa: null,
-    currentMcatScore: null,
-    hasNotTakenMCAT: null,
-    mcatAttemptNumber: null,
-    targetMedSchool: null,
-    targetScore: null,
-    referralEmail: null
-  }
-  ```
-  This ensures all fields exist from the beginning, with `onboardingComplete` explicitly set to `false` and only the `firstName` and `currentStep` having non-null values initially.
-
-- As the user progresses through each step of onboarding (name, college, academics, goals, Kalypso dialogue, referral), the `onboardingInfo` object is updated in the database via the `updateOnboardingInfo` function calling the PUT endpoint at `/api/user-info/onboarding`. Each step triggers a separate API call to update the database with:
-  - The new data specific to that step
-  - An updated `currentStep` value pointing to the next step
-  - The same `onboardingComplete: false` flag (until the final step)
-
-
-- The `onboardingComplete` flag is only toggled to true at the very end of the onboarding process, specifically in the `handleReferralComplete` function when the user completes the final step. This happens when:
-  1. User has successfully completed all previous onboarding steps
-  2. User reaches the referral step and clicks "Complete" or "Skip"
-  3. The `handleReferralComplete` function is triggered
-  
-- Before setting `onboardingComplete` to true, the system performs several validation checks:
-  1. Verifies that the onboardingInfo record exists in the database
-  2. Validates that a non-zero target score has been set (critical check)
-  3. Confirms that required fields like firstName and college are present
-  4. If any of these checks fail, the system shows an error and does not proceed
-
-
-- The actual update process follows a specific sequence:
-  1. First, make a PUT request to update the database with `onboardingComplete: true`
-  2. Wait for the database update to complete and verify it was successful
-  3. Only if the database update was confirmed successful, update the local state with `setOnboardingComplete(true)`
-  4. Then redirect the user to the appropriate page (/home or /redirect for mobile)
-
-
-- This database-first approach ensures data integrity and prevents inconsistent states between the database and client.
-
-
-- The system checks for `onboardingComplete` status in several key places:
-
-  1. **In the `useOnboardingInfo` hook's `fetchOnboardingInfo` function**:
-     - Runs when the onboarding page is first loaded in `app/(auth)/(routes)/onboarding/page.tsx`
-     - Makes an API call to `/api/user-info/onboarding` to check current onboarding status
-     - If `data?.onboardingComplete` is true from the API response, it updates local state and redirects immediately
-     - Used to resume onboarding at the correct step if the user had partially completed it
-
-  2. **In the `RouteTracker.tsx` component**:
-     - The RouteTracker component is included in the root layout (`app/layout.tsx`) and runs on every page
-     - It calculates `effectiveOnboardingComplete` by checking both the direct flag and the targetScore as a fallback
-     - Uses this information to determine if redirects are needed when users log in or navigate between pages
-     - Triggers different behavior based on explicit login clicks vs. regular navigation
-
-  3. **In the `StoreInitializer` component**:
-     - Also included in the root layout and runs on every page load 
-     - Calls `refreshUserInfo()` to load all user data including onboarding status
-     - Performs a second refresh after 1 second to ensure consistency
-     - Ensures all components have access to the current onboarding state
-
-
-## Database Synchronization Flow
-
-This section details how data synchronization occurs between the database and local state:
-
-1. **App Initialization**:
-   - The `StoreInitializer` component is included in the root layout of the application (`app/layout.tsx`)
-   - It runs on every page load, regardless of route
-   - If a user is signed in, it calls `refreshUserInfo()` to sync all user data from the database
-   - It performs a second `refreshUserInfo()` call after a 1-second delay to handle potential race conditions
-
-2. **Login Flow**:
-   - When a user clicks login at the root URL, the `explicit_login_click` flag is set in localStorage
-   - After authentication, the `StoreInitializer` detects the user is signed in and fetches user data
-   - The `RouteTracker` checks the user's `onboardingComplete` status and redirects accordingly
-
-3. **Onboarding Process**:
-   - When entering their name, a new userInfo record is created in the database via POST to `/api/user-info`
-   - Each subsequent step updates the database via PUT to `/api/user-info/onboarding`
-   - At the final step (`handleReferralComplete`), after setting `onboardingComplete: true`:
-     - The database is updated first
-     - The success of this update is explicitly verified
-     - Only then is the local state updated with `setOnboardingComplete(true)`
-     - A full `refreshUserInfo()` call is performed to ensure complete data synchronization
-     - Finally, the user is redirected to the appropriate page (/home or /redirect for mobile)
-
-4. **Home Page Load After Completion**:
-   - When redirected to home, the `StoreInitializer` runs again on page load
-   - This triggers another `refreshUserInfo()` which ensures local state is fully in sync with the database
-
-
-## Recommended Improvements
-
-This section outlines potential improvements to our current implementation that would enhance reliability, performance, and code maintainability:
-
-
-### 2. Consistent State Synchronization
-
-The following improvements have been implemented:
-- Added a full `refreshUserInfo()` call immediately after setting `onboardingComplete: true` in `handleReferralComplete()`
-- Implemented atomic updates for related state changes with the new `batchUpdateProfile` function
-- Added error handling with rollback capabilities for failed API operations
-- Replaced individual property updates with batch updates for related changes
-
-### 3. Reduce API Calls
-- Batch onboarding step updates where possible instead of making separate calls for each step
-- Implement a debounce mechanism for frequent state changes
-- Consider using GraphQL to fetch exactly what's needed in fewer requests
-- Add proper caching strategies for user data
-
-### 4. Improve Error Handling
-- Add retry logic for failed API calls with exponential backoff
-- Implement offline support with synchronization when connection is restored
-- Provide clear recovery paths for users when operations fail
-- Add more comprehensive error logging and monitoring
-
-### 5. Streamline State Management
-- Consolidate state management to reduce the mix of local and global state
-- Implement proper state selectors to minimize rerenders (already partly done with the selector pattern)
-- Consider using React Context + useReducer for more predictable state transitions
-- Create a clear separation between UI state and data state
-
-### 6. Auth Flow Improvements
-- Implement a more robust auth state detection system than localStorage flags
-- Add auth session persistence options to improve the returning user experience
-- Consider a more streamlined onboarding flow with fewer steps and conditional form fields
-- Add progress saving with the ability to resume onboarding from where users left off
-
-These improvements would lead to a more reliable, responsive, and maintainable application while reducing the potential for data inconsistency issues.
-
-
-
diff --git a/README_Docs/tasks/user-dennis/2-single-task-steps.md b/README_Docs/tasks/user-dennis/2-single-task-steps.md
index 4d3b8045162544999bd90855b8b7d18c1005c3ce..18644def9c1c1814f8fc39a1da0599054922a169 100644
--- a/README_Docs/tasks/user-dennis/2-single-task-steps.md
+++ b/README_Docs/tasks/user-dennis/2-single-task-steps.md
@@ -1,351 +1,22 @@
-### Branch TODO:
+[ ✔️ ] default sidebar to tasks instead of friends
 
-### Branch Steps: Route and Navigation Tracking
 
-# Feature #2: Track UI Globally
+-----
 
-## Navigation State Management Strategy
 
-### Problem Analysis
-1. **Inconsistent route tracking**: 
-   - Not all section changes are reflected in the URL (e.g., entering ATS keeps `/home` in the URL)
-   - Subsection navigation doesn't update `currentRoute` in UI state
-   - Kalypso lacks contextual awareness of what the user is doing
+Good morning, Josh! It's 10:20 AM on Saturday - perfect for a longer study session.
 
-2. **Current approach limitations**:
-   - `useUIStore` has a `currentRoute` state, but it's not consistently updated
-   - URL changes happen in components without state synchronization
-   - No tracking of deeper navigation contexts (sections within sections)
-   - No persistence of navigation state
+Your next full-length practice exam is scheduled for April 8th (7 days away).
 
-### Architecture Decision: General Context vs Section-Specific Contexts
+You're consistent in CARS but could use improvement in Biochemistry. specifically in concept 1 and concept 2
 
-#### Approach 1: Section-Specific Context Objects (Original)
-- **Pros**:
-  - Clear organization by section
-  - Strong typing for each section's unique data
-  - Follows domain-driven design principles
-  - Easy to understand what belongs where
+Your tasks for today are: X, Y, and Z. You've completed 0 so far. Check out your tasks for today!
 
-- **Cons**:
-  - More complex nested structure
-  - Requires more code to update specific sections
-  - May lead to duplication of similar structures
+Your clinic currently treats 20 patients a day and you've treated a total of 215. Make sure to visit today so that you can earn enough points!
 
-#### Approach 2: General Context Object (RECOMMENDED)
-- **Pros**:
-  - Simpler flat structure
-  - More flexible for changing requirements
-  - Easier to update single properties
-  - Cleaner for components that need a subset of properties
-  - Can still be type-safe with discriminated unions
+What can I help you with?
 
-- **Cons**:
-  - May need careful property naming to avoid collisions
-  - Less obvious organization at a glance
-  - Potentially less strong typing
 
-### Decision: EXTEND UISLICE with a general context object
-
-The navigation and context state should live in UISlice, using a general context object that adapts based on the current route:
-
-```typescript
-// In uiSlice.ts
-interface UIState {
-  // General UI state
-  theme: ThemeType;
-  window: WindowSize;
-  
-  // Navigation state
-  currentRoute: string;
-  navigationHistory: string[];
-  
-  // General context - dynamic based on current route
-  context: {
-    // Common properties across all routes
-    pageTitle?: string;
-    lastUpdated?: string;
-    
-    // ATS route properties
-    subject?: string;
-    contentType?: 'video' | 'reading' | 'quiz' | 'highlight' | 'askKalypso';
-    timestamp?: number;
-    transcription?: string;
-    
-    // CARS route properties
-    passageContent?: string;
-    questionsAsked?: string[];
-    explanationNotes?: string;
-    
-    // Other route-specific properties as needed
-    [key: string]: any;
-  }
-}
-```
-
-This approach:
-1. Keeps all state in one place (UISlice)
-2. Uses a flexible structure that can adapt to any route
-3. Makes it easy to update individual properties
-4. Simplifies state subscription for components
-5. Makes it easy to share context with Kalypso
-
-## Implementation Steps
-
-### 1. Extend UISlice with Enhanced Navigation and Context State
-
-```typescript
-// Add these to uiSlice.ts
-interface UIState {
-  // Existing state
-  window: WindowSize;
-  currentRoute: string;
-  theme: ThemeType;
-  
-  // New navigation state
-  navigationHistory: string[];
-  
-  // New general context state
-  context: Record<string, any>;
-}
-
-// Add new actions
-const setCurrentRoute = (route: string) => {
-  set((state) => ({
-    currentRoute: route,
-    navigationHistory: [...state.navigationHistory, route].slice(-10) // Keep last 10
-  }));
-}
-
-const setContext = (updates: Record<string, any>) => {
-  set((state) => ({
-    context: {
-      ...state.context,
-      ...updates
-    }
-  }));
-}
-
-const clearContext = () => {
-  set(() => ({ context: {} }));
-}
-```
-
-### 2. Create Navigation Hooks for Consistent Usage
-
-```typescript
-// In a new hooks/useNavigation.ts file
-import { useRouter } from 'next/navigation';
-import { useUIStore } from '@/store/slices/uiSlice';
-
-export function useNavigation() {
-  const router = useRouter();
-  const setCurrentRoute = useUIStore(state => state.setCurrentRoute);
-  const setContext = useUIStore(state => state.setContext);
-  const clearContext = useUIStore(state => state.clearContext);
-  
-  // Navigate to a main route with URL change
-  const navigateTo = (route: string) => {
-    router.push(route);
-    setCurrentRoute(route);
-    clearContext(); // Clear context when changing routes
-  };
-  
-  // Update context without changing URL
-  const updateContext = (context: Record<string, any>) => {
-    setContext(context);
-  };
-  
-  // Navigate within ATS (common case)
-  const navigateATS = (subject: string, contentType: string) => {
-    // Only change URL to /ATS if not already there
-    if (window.location.pathname !== '/ATS') {
-      router.push('/ATS');
-    }
-    
-    setCurrentRoute('/ATS');
-    setContext({
-      subject,
-      contentType,
-      lastUpdated: new Date().toISOString()
-    });
-  };
-  
-  return {
-    navigateTo,
-    updateContext,
-    navigateATS
-  };
-}
-```
-
-### 3. Usage in Components with Selective Subscriptions
-
-```typescript
-// In any component needing navigation
-import { useNavigation } from '@/hooks/useNavigation';
-import { useUIStore } from '@/store/slices/uiSlice';
-
-const MyComponent = () => {
-  const { navigateTo, updateContext } = useNavigation();
-  
-  // Subscribe only to specific context properties to optimize re-renders
-  const subject = useUIStore(state => state.context.subject);
-  const contentType = useUIStore(state => state.context.contentType);
-  
-  const goToHome = () => navigateTo('/home');
-  
-  const openBiologyVideos = () => {
-    navigateTo('/ATS');
-    updateContext({
-      subject: 'biology',
-      contentType: 'video'
-    });
-  };
-  
-  // ...
-};
-```
-
-### 4. Integration with Kalypso
-
-```typescript
-// In Kalypso context provider
-import { useUIStore } from '@/store/slices/uiSlice';
-
-const KalypsoContextProvider = ({ children }) => {
-  // Get both route and context information
-  const currentRoute = useUIStore(state => state.currentRoute);
-  const context = useUIStore(state => state.context);
-  
-  // Build context object for Kalypso that includes navigation and content context
-  const buildContextForKalypso = () => {
-    return {
-      currentRoute,
-      ...context,
-      // Additional useful information for Kalypso can be added here
-    };
-  };
-  
-  // ... rest of provider
-};
-```
-
-### 5. Debug Panel Integration
-
-```typescript
-// In DebugPanel.tsx
-const uiState = useUIStore();
-
-// Format navigation and context for display
-const displayState = {
-  currentRoute: uiState.currentRoute,
-  recentHistory: uiState.navigationHistory.slice(-3), // Show last 3
-  context: uiState.context
-};
-
-// Then in the render:
-<div>
-  <h4 className="font-bold">Navigation & Context State</h4>
-  <pre>{JSON.stringify(displayState, null, 2)}</pre>
-</div>
-```
-
-## Benefits of General Context Approach
-
-1. **Simpler State Structure**: Flat object is easier to understand and update
-2. **Selective Subscriptions**: Components can subscribe to exactly what they need:
-   ```typescript
-   // Only re-render when specific properties change
-   const transcript = useUIStore(state => state.context.transcript);
-   const timestamp = useUIStore(state => state.context.timestamp);
-   ```
-3. **Optimized Re-renders**: When one part of context changes, only components that subscribe to that specific property will re-render
-4. **Easier Updates**: Simpler API for updating context:
-   ```typescript
-   updateContext({ timestamp: currentTime, transcript: currentTranscript });
-   ```
-5. **More Flexible**: Easier to add new properties without changing the structure
-6. **Fewer Nested Updates**: No need to worry about deeply nested state updates
-7. **Cleaner Implementation**: Less code overall for the same functionality
-
-## Next Steps
-
-1. Implement the UISlice extensions with general context
-2. Create the navigation hooks
-3. Update all navigation calls in the app to use the new system
-4. Add context updates in various components
-5. Connect Kalypso to the context state
-6. Update DebugPanel to show navigation and context state
-
-## Future Considerations
-
-1. Analytics integration to track user navigation patterns
-2. Property validation for context to ensure type safety
-3. Automatic context clearing when changing routes
-4. Session replay capabilities using navigation history
-
-## Comprehensive Navigation Tracking Checklist
-
-Based on the entire codebase, here's a complete checklist of all sections/areas that should be tracked in the UI state for complete user navigation awareness:
-
-### Main Sections to Track (Primary Routes)
-- [ ] Landing Page (`/`)
-- [ ] Home Dashboard (`/home`)
-- [ ] ATS - Adaptive Tutoring Suite (`/ATS`)
-- [ ] CARS - Critical Analysis and Reasoning (`/CARS`)
-- [ ] Profile (`/profile`)
-- [ ] Settings (`/settings`)
-- [ ] Flashcards (`/flashcards`)
-- [ ] Resources (`/resources`)
-- [ ] Help (`/help`)
-- [ ] Onboarding (`/onboarding`)
-
-### Context Information to Track Per Route
-
-#### ATS Route Context
-- [ ] Current subject
-- [ ] Content type (video, reading, quiz, etc.)
-- [ ] Content ID/title
-- [ ] Timestamp (for videos)
-- [ ] Transcription excerpts
-- [ ] Progress percentage
-
-#### CARS Route Context
-- [ ] Passage content/ID
-- [ ] Current question
-- [ ] Questions asked
-- [ ] User answers
-- [ ] Explanation notes
-- [ ] Test vs. review mode
-
-#### Flashcards Route Context
-- [ ] Current deck ID
-- [ ] Current card
-- [ ] Study statistics
-- [ ] Session duration
-
-#### Implementation Priority Order
-1. [ ] Extend UISlice with navigation and context structure
-   - [ ] Add `navigationHistory` array
-   - [ ] Add `context` object
-   - [ ] Add action creators
-
-2. [ ] Create common `useNavigation` hook
-   - [ ] Implement general navigation methods
-   - [ ] Add context update helpers
-
-3. [ ] Update main section navigation (Primary Routes)
-   - [ ] Modify all route changes to update state
-   - [ ] Add context tracking for each major section
-
-4. [ ] Integrate with Kalypso
-   - [ ] Provide context to AI
-   - [ ] Enable context-aware responses
-
-### Technical Requirements
-- [ ] Persist navigation state in localStorage
-- [ ] Handle back/forward browser navigation
-- [ ] Maintain URL synchronization where appropriate
-- [ ] Add analytics tracking for navigation events
-- [ ] Implement selective subscriptions for performance optimization
\ No newline at end of file
+------
+Can we embed react components in message bubbles? Basically we want to have visual feedback from kalypso at some point in the future
+How hard would it be to implement text streaming from the AI
\ No newline at end of file
diff --git a/README_Docs/tasks/user-dennis/3----------- Debug ------------------ b/README_Docs/tasks/user-dennis/3----------- Debug ------------------
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt b/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt
index 0e433616ee026508c5ea3cf7bd53b44fc5a773a0..f9631b86259c0ded281f611945d4f4e8a9b67bb6 100644
--- a/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt
+++ b/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt
@@ -11,529 +11,235 @@ macbookair@M2-MacbookAir my-mcat % npm run dev
 
  ✓ Starting...
    automatically enabled Fast Refresh for 1 custom loader
- ✓ Ready in 1845ms
- ○ Compiling /_not-found ...
+ ✓ Ready in 1426ms
+ ✓ Compiled /middleware in 137ms (182 modules)
+ ○ Compiling /home ...
 Browserslist: caniuse-lite is outdated. Please run:
   npx update-browserslist-db@latest
   Why you should do it regularly: https://github.com/browserslist/update-db#readme
- ✓ Compiled /_not-found in 6.2s (976 modules)
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /home
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /home
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /home?debug=true 404 in 6413ms
- ○ Compiling /favicon.ico ...
- ✓ Compiled /favicon.ico in 643ms (772 modules)
- GET /favicon.ico 200 in 907ms
+ ✓ Compiled /api/notifications in 8.6s (6267 modules)
+[Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: false
+[HomePage] Rendering content, hasSeenIntroVideo: false
+ GET /api/notifications 200 in 9674ms
+ GET /home 200 in 10407ms
+ ✓ Compiled in 2.1s (3008 modules)
+ ○ Compiling /_not-found ...
+ ✓ Compiled /_not-found in 1372ms (6256 modules)
+ GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 1667ms
+ GET /api/notifications 200 in 142ms
  ○ Compiling /api/user-info ...
- ✓ Compiled /api/user-info in 595ms (698 modules)
- ✓ Compiled (702 modules)
- GET /api/user-info/profile 200 in 1883ms
- GET /api/user-info/profile 200 in 229ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 2502ms
- ✓ Compiled /api/study-plan in 135ms (704 modules)
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 373ms
- GET /api/study-plan 200 in 373ms
- GET /api/study-plan 200 in 106ms
- ○ Compiling /home ...
- ✓ Compiled /home in 5.9s (6349 modules)
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /home
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /home
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /home?debug=true 200 in 8279ms
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params {
-  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-  searchParams: ''
+ ✓ Compiled /api/user-info in 723ms (3341 modules)
+ ✓ Compiled (3345 modules)
+ GET /api/user-info/profile 200 in 1825ms
+ GET /api/user-info/profile 200 in 202ms
+ GET /api/notifications 200 in 1747ms
+ GET /api/notifications 200 in 101ms
+ GET /api/user-info/profile 200 in 201ms
+ GET /api/notifications 200 in 101ms
+ GET /api/user-info/profile 200 in 200ms
+ GET /api/user-info 200 in 2511ms
+ GET /api/user-info/profile 200 in 389ms
+ GET /api/user-info 200 in 539ms
+ GET /api/user-info/profile 200 in 196ms
+ GET /api/user-info 200 in 556ms
+ GET /api/user-info 200 in 339ms
+ GET /api/user-info 200 in 338ms
+ ✓ Compiled /api/global-leaderboard in 322ms (3347 modules)
+ ✓ Compiled /api/user-activity in 0ms (3478 modules)
+ ✓ Compiled in 0ms (3480 modules)
+ ✓ Compiled in 1ms (3480 modules)
+ GET /api/user-info/profile 200 in 2530ms
+ GET /api/calendar/exam-activities 200 in 2774ms
+ ✓ Compiled in 2ms (3480 modules)
+[KALYPSO_WELCOME] API call started at 2025-03-27T19:38:31.420Z
+[KALYPSO_WELCOME] Request from IP: ::1
+[KALYPSO_WELCOME] Auth check completed in 1ms
+[KALYPSO_WELCOME] Skipping rate limiting in development mode
+[KALYPSO_WELCOME] Rate limit check passed in 0ms
+[KALYPSO_WELCOME] Cache miss for user user_2rFXhmeHNzY3irm9HShrGMGMY3M, generating new message (0ms)
+ GET /api/calendar-activity 200 in 3122ms
+[KALYPSO_WELCOME] User first name: Dennis Cao
+ ✓ Compiled in 0ms (3480 modules)
+ GET /api/global-leaderboard 200 in 3306ms
+[KALYPSO_WELCOME] Last activity query completed in 416ms
+[KALYPSO_WELCOME] Last activity: {
+  id: 'cm8rra0ik0006dgt5fg4fwsd7',
+  type: 'studying',
+  startTime: 2025-03-27T19:37:52.412Z,
+  location: 'KalypsoAI'
 }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 371ms
- ○ Compiling /api/notifications ...
- ✓ Compiled /api/notifications in 1699ms (3365 modules)
- GET /api/notifications 200 in 3169ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 3347ms
- GET /api/notifications 200 in 200ms
- GET /api/notifications 200 in 99ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
- GET /api/notifications 200 in 97ms
- GET /api/user-info/profile 200 in 3646ms
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 370ms
- GET /api/user-info/profile 200 in 217ms
- GET /api/study-plan 200 in 226ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
- GET /api/user-info/profile 200 in 199ms
- GET /api/study-plan 200 in 100ms
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 398ms
- GET /api/user-info/profile 200 in 223ms
- GET /api/study-plan 200 in 107ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
- GET /api/user-info/profile 200 in 191ms
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 381ms
- GET /api/user-info/profile 200 in 191ms
- GET /api/study-plan 200 in 220ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 436ms
- ○ Compiling /api/user-activity ...
- ✓ Compiled /api/user-activity in 798ms (3367 modules)
- ✓ Compiled (3374 modules)
- GET /api/calendar-activity 200 in 2195ms
- GET /api/calendar/exam-activities 200 in 2381ms
- GET /api/subscription 200 in 2358ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
- GET /api/study-plan 200 in 143ms
-objc[10892]: Class GNotificationCenterDelegate is implemented in both /opt/homebrew/Cellar/glib/2.82.4/lib/libgio-2.0.0.dylib (0x140300648) and /Users/macbookair/Desktop/my-mcat/node_modules/@img/sharp-libvips-darwin-arm64/lib/libvips-cpp.42.dylib (0xd17c09a28). One of the two will be used. Which one is undefined.
- ⚠ The "images.domains" configuration is deprecated. Please use "images.remotePatterns" configuration instead.
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 542ms
- GET /api/user-info/profile 200 in 2414ms
-cleaning up last activity
-cleaning up last activity
+[KALYPSO_WELCOME] Days since last activity: 1
 cleaning up last activity
- GET /api/calendar-activity 200 in 257ms
- GET /api/calendar/exam-activities 200 in 470ms
- GET /api/study-plan 200 in 209ms
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 625ms
- GET /api/user-info/profile 200 in 223ms
-cleaning up last activity
- GET /api/calendar-activity 200 in 275ms
- POST /api/user-activity 200 in 3490ms
+[KALYPSO_WELCOME] Latest exam query completed in 317ms
+[KALYPSO_WELCOME] Latest full length exam: No full length exam found
+ ✓ Compiled in 0ms (3480 modules)
+ ✓ Compiled in 0ms (3480 modules)
+[KALYPSO_WELCOME] Latest user test: {
+  id: 'cm8holmmm000tdgyuio5nmqxd',
+  score: 40,
+  testTitle: 'Sporus - Part 1',
+  finishedAt: 2025-03-20T18:26:10.703Z
+}
+[KALYPSO_WELCOME] Latest user test score: 40 on "Sporus - Part 1"
+[KALYPSO_WELCOME] Next exam: {
+  id: 'cm8qdwdp4000zdg6kbioalg0y',
+  title: 'Unscored Sample',
+  scheduledDate: 2025-03-29T07:00:00.000Z
+}
+[KALYPSO_WELCOME] Days until next test: 2
+[KALYPSO_WELCOME] Prompt preparation completed in 0ms
+[KALYPSO_WELCOME] Prompt for GPT-4o: 
+      Create a personalized welcome message for the user named Dennis Cao with the following context:
+      
+      - Last active: 1 day ago
+      - Latest test score: 40 on "Sporus - Part 1"
+      - Next scheduled test: "Unscored Sample" in 2 days
+      
+      The message should start with "Hey Dennis Cao!" and feel personal and contextual to their activity. If this is their first login or they have no activity yet, welcome them as a new user and encourage them to start their MCAT journey.
+    
+[KALYPSO_WELCOME] Calling GPT-4o-mini for welcome message generation
+[AI-COMPLETION] Attempt 1/3 to generate completion
+ ✓ Compiled in 1ms (3480 modules)
 cleaning up last activity
-[DEBUG][API] User info from database, keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord'
-]
- GET /api/study-plan 200 in 200ms
-[DEBUG][API] Response object keys: [
-  'id',               'userId',
-  'devUserId',        'bio',
-  'updatedAt',        'apiCount',
-  'createdAt',        'score',
-  'clinicRooms',      'hasPaid',
-  'subscriptionType', 'diagnosticScores',
-  'firstName',        'profilePhoto',
-  'streak',           'notificationPreference',
-  'unlocks',          'onboardingInfo',
-  'patientRecord',    'email'
-]
- GET /api/user-info 200 in 391ms
+ POST /api/user-activity 200 in 4175ms
+ GET /api/user-info 200 in 1728ms
 cleaning up last activity
- POST /api/user-activity 200 in 2157ms
- ○ Compiling /api/user-activity/[activityId] ...
- POST /api/user-activity 200 in 1332ms
- ✓ Compiled /api/user-activity/[activityId] in 762ms (3376 modules)
- POST /api/user-activity 200 in 4857ms
- POST /api/user-activity 200 in 1634ms
- POST /api/user-activity 200 in 2539ms
- GET /api/study-plan 200 in 1328ms
- PATCH /api/user-activity/cm8nwawcy0000dgek748d0iyh 200 in 3100ms
- GET /api/notifications 200 in 326ms
- GET /api/notifications 200 in 111ms
- GET /api/notifications 200 in 206ms
- GET /api/notifications 200 in 103ms
- GET /api/notifications 200 in 218ms
- GET /api/notifications 200 in 103ms
- GET /api/notifications 200 in 202ms
- GET /api/notifications 200 in 103ms
- GET /api/notifications 200 in 211ms
- GET /api/notifications 200 in 105ms
- GET /api/notifications 200 in 216ms
- GET /api/notifications 200 in 103ms
- ✓ Compiled in 3.5s (6247 modules)
- GET /home?debug=true&_rsc=1yv1g 200 in 272ms
- ○ Compiling /api/user-activity/[activityId] ...
- ✓ Compiled /api/user-activity/[activityId] in 1085ms (6238 modules)
- ✓ Compiled in 0ms (3252 modules)
- ✓ Compiled in 2s (6238 modules)
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params {
-  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-  searchParams: ''
+ GET /api/user-info/profile 200 in 1425ms
+ GET /api/global-leaderboard 200 in 193ms
+ GET /api/calendar/exam-activities 200 in 410ms
+ POST /api/user-activity 200 in 2721ms
+ GET /api/calendar-activity 200 in 716ms
+ ✓ Compiled /api/user-activity/[activityId] in 338ms (3482 modules)
+ GET /api/user-info 200 in 592ms
+ POST /api/user-activity 200 in 2561ms
+ GET /api/user-info 200 in 573ms
+ PATCH /api/user-activity/cm8rravn60000dg6wy4qiviyd 200 in 1459ms
+ GET /api/kalypso/welcome 200 in 7975ms
+[KALYPSO_WELCOME] API call started at 2025-03-27T19:38:36.628Z
+[KALYPSO_WELCOME] Request from IP: ::1
+[KALYPSO_WELCOME] Auth check completed in 1ms
+[KALYPSO_WELCOME] Skipping rate limiting in development mode
+[KALYPSO_WELCOME] Rate limit check passed in 0ms
+[KALYPSO_WELCOME] Cache miss for user user_2rFXhmeHNzY3irm9HShrGMGMY3M, generating new message (0ms)
+[KALYPSO_WELCOME] User first name: Dennis Cao
+ GET /api/kalypso/welcome 200 in 251ms
+[KALYPSO_WELCOME] API call started at 2025-03-27T19:38:36.864Z
+[KALYPSO_WELCOME] Request from IP: ::1
+[KALYPSO_WELCOME] Auth check completed in 0ms
+[KALYPSO_WELCOME] Skipping rate limiting in development mode
+[KALYPSO_WELCOME] Rate limit check passed in 0ms
+[KALYPSO_WELCOME] Cache miss for user user_2rFXhmeHNzY3irm9HShrGMGMY3M, generating new message (0ms)
+[KALYPSO_WELCOME] Last activity query completed in 400ms
+[KALYPSO_WELCOME] Last activity: {
+  id: 'cm8rrawkk0002dg6w5n5uthu1',
+  type: 'studying',
+  startTime: 2025-03-27T19:38:33.957Z,
+  location: 'KalypsoAI'
 }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 4075ms
- PATCH /api/user-activity/cm8nwaxuv0005dgek9e79nnew 200 in 5244ms
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /home
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /home
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /home?debug=true 200 in 4114ms
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params {
-  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-  searchParams: ''
+[KALYPSO_WELCOME] Days since last activity: 1
+[KALYPSO_WELCOME] User first name: Dennis Cao
+[KALYPSO_WELCOME] Latest exam query completed in 191ms
+[KALYPSO_WELCOME] Latest full length exam: No full length exam found
+[KALYPSO_WELCOME] Last activity query completed in 389ms
+[KALYPSO_WELCOME] Last activity: {
+  id: 'cm8rrawkk0002dg6w5n5uthu1',
+  type: 'studying',
+  startTime: 2025-03-27T19:38:33.957Z,
+  location: 'KalypsoAI'
 }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 143ms
- ○ Compiling /favicon.ico ...
- ✓ Compiled /api/user-info/profile in 1372ms (3280 modules)
- ✓ Compiled (3365 modules)
- GET /favicon.ico 200 in 3322ms
- GET /home?debug=true&_rsc=1yv1g 200 in 70ms
- GET /api/notifications 200 in 2833ms
- GET /api/user-info/profile 200 in 2857ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-[RouteTracker DEBUG] === STATE DUMP ===
-[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] isSignedIn: undefined
-[RouteTracker DEBUG] isLoaded: true
-[RouteTracker DEBUG] profileLoading: true
-[RouteTracker DEBUG] Zustand onboardingComplete: false
-[RouteTracker DEBUG] userInfo exists: false
-[RouteTracker DEBUG] ====================
-[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-[RouteTracker DEBUG] User is signed in: undefined
-[RouteTracker DEBUG] Path exempt (standard): false
-[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-👋 DebugPanel: Component initialized
-👋 DebugPanel: Current path and search params {
-  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-  searchParams: ''
+[KALYPSO_WELCOME] Days since last activity: 1
+[KALYPSO_WELCOME] GPT-4o-mini generation completed in 4653ms
+[KALYPSO_WELCOME] Generated welcome message: Hey Dennis Cao! 😸
+
+Wow, just a day since you last logged in—you're on a roll! 🎉 Congrats on scoring a fantastic 40 on "Sporus - Part 1"! That's some serious brainpower! 
+
+I see you have an "Unscored Sample" test coming up in 2 days. Remember, it’s a great opportunity to practice and refine your test-taking strategies. You’ve got this! Just approach it with confidence and curiosity. Keep up the great work, and let’s keep those paws moving toward your MCAT success! 🐾
+
+Let me know if you need any help with your prep. Happy studying! 📚✨
+[KALYPSO_WELCOME] Cached message for user user_2rFXhmeHNzY3irm9HShrGMGMY3M in 0ms
+[KALYPSO_WELCOME] Total API execution time: 5987ms
+[KALYPSO_WELCOME] Latest exam query completed in 198ms
+[KALYPSO_WELCOME] Latest full length exam: No full length exam found
+[KALYPSO_WELCOME] Latest user test: {
+  id: 'cm8holmmm000tdgyuio5nmqxd',
+  score: 40,
+  testTitle: 'Sporus - Part 1',
+  finishedAt: 2025-03-20T18:26:10.703Z
 }
-👋 DebugPanel: Not rendering panel (isDebug is false)
- GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 313ms
- GET /api/notifications 200 in 174ms
- GET /api/user-info/profile 200 in 212ms
- GET /api/user-info 200 in 3452ms
- GET /api/notifications 200 in 104ms
- GET /api/notifications 200 in 159ms
- GET /api/user-info/profile 200 in 262ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- ✓ Compiled /api/study-plan in 480ms (3367 modules)
- GET /api/user-info 200 in 690ms
- GET /api/study-plan 200 in 1096ms
- GET /api/user-info/profile 200 in 1014ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- GET /api/user-info 200 in 512ms
- GET /api/study-plan 200 in 228ms
- GET /api/user-info/profile 200 in 229ms
- GET /api/study-plan 200 in 123ms
- GET /api/user-info/profile 200 in 201ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- GET /api/user-info 200 in 591ms
- GET /api/study-plan 200 in 246ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- GET /api/user-info 200 in 491ms
- ○ Compiling /api/calendar-activity ...
- ✓ Compiled /api/user-activity in 798ms (3369 modules)
- ✓ Compiled (3376 modules)
- GET /api/calendar-activity 200 in 1356ms
-cleaning up last activity
- GET /api/user-info/profile 200 in 1625ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- GET /api/calendar/exam-activities 200 in 1643ms
-cleaning up last activity
- GET /api/subscription 200 in 1666ms
- GET /api/user-info 200 in 385ms
- GET /api/study-plan 200 in 152ms
- GET /api/calendar-activity 200 in 157ms
-cleaning up last activity
- GET /api/user-info/profile 200 in 218ms
- POST /api/user-activity 200 in 1622ms
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-cleaning up last activity
- GET /api/calendar/exam-activities 200 in 415ms
- GET /api/study-plan 200 in 127ms
- GET /api/user-info 200 in 436ms
- GET /api/calendar-activity 200 in 227ms
-cleaning up last activity
-[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
- POST /api/user-activity 200 in 2169ms
- GET /api/user-info 200 in 362ms
- POST /api/user-activity 200 in 789ms
- GET /api/study-plan 200 in 106ms
- GET /api/study-plan 200 in 109ms
- POST /api/user-activity 200 in 1423ms
- POST /api/user-activity 200 in 890ms
- PATCH /api/user-activity/cm8nwf4t80006dgek2qc3i3nw 200 in 863ms
- GET /api/notifications 200 in 217ms
- GET /api/notifications 200 in 112ms
- GET /api/notifications 200 in 206ms
- GET /api/notifications 200 in 100ms
+[KALYPSO_WELCOME] Latest user test score: 40 on "Sporus - Part 1"
+[KALYPSO_WELCOME] Next exam: {
+  id: 'cm8qdwdp4000zdg6kbioalg0y',
+  title: 'Unscored Sample',
+  scheduledDate: 2025-03-29T07:00:00.000Z
+}
+[KALYPSO_WELCOME] Days until next test: 2
+[KALYPSO_WELCOME] Prompt preparation completed in 0ms
+[KALYPSO_WELCOME] Prompt for GPT-4o: 
+      Create a personalized welcome message for the user named Dennis Cao with the following context:
+      
+      - Last active: 1 day ago
+      - Latest test score: 40 on "Sporus - Part 1"
+      - Next scheduled test: "Unscored Sample" in 2 days
+      
+      The message should start with "Hey Dennis Cao!" and feel personal and contextual to their activity. If this is their first login or they have no activity yet, welcome them as a new user and encourage them to start their MCAT journey.
+    
+[KALYPSO_WELCOME] Calling GPT-4o-mini for welcome message generation
+[AI-COMPLETION] Attempt 1/3 to generate completion
+[KALYPSO_WELCOME] Latest user test: {
+  id: 'cm8holmmm000tdgyuio5nmqxd',
+  score: 40,
+  testTitle: 'Sporus - Part 1',
+  finishedAt: 2025-03-20T18:26:10.703Z
+}
+[KALYPSO_WELCOME] Latest user test score: 40 on "Sporus - Part 1"
+[KALYPSO_WELCOME] Next exam: {
+  id: 'cm8qdwdp4000zdg6kbioalg0y',
+  title: 'Unscored Sample',
+  scheduledDate: 2025-03-29T07:00:00.000Z
+}
+[KALYPSO_WELCOME] Days until next test: 2
+[KALYPSO_WELCOME] Prompt preparation completed in 0ms
+[KALYPSO_WELCOME] Prompt for GPT-4o: 
+      Create a personalized welcome message for the user named Dennis Cao with the following context:
+      
+      - Last active: 1 day ago
+      - Latest test score: 40 on "Sporus - Part 1"
+      - Next scheduled test: "Unscored Sample" in 2 days
+      
+      The message should start with "Hey Dennis Cao!" and feel personal and contextual to their activity. If this is their first login or they have no activity yet, welcome them as a new user and encourage them to start their MCAT journey.
+    
+[KALYPSO_WELCOME] Calling GPT-4o-mini for welcome message generation
+[AI-COMPLETION] Attempt 1/3 to generate completion
+[KALYPSO_WELCOME] GPT-4o-mini generation completed in 2155ms
+[KALYPSO_WELCOME] Generated welcome message: Hey Dennis Cao! 🐾 It's great to see you back after just a day! Congrats on scoring a fantastic 40 on "Sporus - Part 1" – that's an awesome achievement! 🎉 
+
+You've got the "Unscored Sample" test coming up in just 2 days. Use it as a chance to practice and fine-tune your skills; every bit counts! Remember, every step you take gets you closer to your goals. Keep up the great work, and I'm here to help you shine! 🌟 
+
+Let’s keep the momentum going!
+[KALYPSO_WELCOME] Cached message for user user_2rFXhmeHNzY3irm9HShrGMGMY3M in 0ms
+[KALYPSO_WELCOME] Total API execution time: 3329ms
+[KALYPSO_WELCOME] GPT-4o-mini generation completed in 1907ms
+[KALYPSO_WELCOME] Generated welcome message: Hey Dennis Cao! 🐾 
+
+Wow, you were just here yesterday! I see you scored an impressive 40 on "Sporus - Part 1"! 🎉 That's fantastic—keep that momentum going! 
+
+You've got an "Unscored Sample" test coming up in just 2 days. Use this time to review and fine-tune your strategies. Remember, every practice test is a step closer to your goals! 
+
+Stay curious, keep pushing, and don’t hesitate to reach out if you need help. You've got this! 💪✨
+[KALYPSO_WELCOME] Cached message for user user_2rFXhmeHNzY3irm9HShrGMGMY3M in 0ms
+[KALYPSO_WELCOME] Total API execution time: 3095ms
+ GET /api/kalypso/welcome 200 in 3109ms
+[KALYPSO_WELCOME] API call started at 2025-03-27T19:38:39.997Z
+[KALYPSO_WELCOME] Request from IP: ::1
+[KALYPSO_WELCOME] Auth check completed in 1ms
+[KALYPSO_WELCOME] Skipping rate limiting in development mode
+[KALYPSO_WELCOME] Rate limit check passed in 0ms
+[KALYPSO_WELCOME] Cache hit for user user_2rFXhmeHNzY3irm9HShrGMGMY3M (0ms)
+ GET /api/kalypso/welcome 200 in 10ms
+[KALYPSO_WELCOME] API call started at 2025-03-27T19:38:40.039Z
+[KALYPSO_WELCOME] Request from IP: ::1
+[KALYPSO_WELCOME] Auth check completed in 0ms
+[KALYPSO_WELCOME] Skipping rate limiting in development mode
+[KALYPSO_WELCOME] Rate limit check passed in 0ms
+[KALYPSO_WELCOME] Cache hit for user user_2rFXhmeHNzY3irm9HShrGMGMY3M (0ms)
+ GET /api/kalypso/welcome 200 in 33ms
diff --git a/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt b/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt
index 20370d39baf3a533a6351aeb83efb58e1021b38c..381ab9fbc21ad7213e4f3abe6f913b01cff72743 100644
--- a/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt
+++ b/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt
@@ -6,553 +6,666 @@ fireWith @ jquery.js:2
 ready @ jquery.js:2
 I @ jquery.js:2
 contentScript.js:2 Chrome storage API available, initializing emoji style sync
- [RouteTracker DEBUG] === STATE DUMP ===
- [RouteTracker DEBUG] Path: /home
- [RouteTracker DEBUG] isSignedIn: undefined
- [RouteTracker DEBUG] isLoaded: true
- [RouteTracker DEBUG] profileLoading: true
- [RouteTracker DEBUG] Zustand onboardingComplete: false
- [RouteTracker DEBUG] userInfo exists: false
- [RouteTracker DEBUG] ====================
- [RouteTracker DEBUG] Checking exemption for path: /home
- [RouteTracker DEBUG] User is signed in: undefined
- [RouteTracker DEBUG] Path exempt (standard): false
- [RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
- 👋 DebugPanel: Component initialized
- 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
- 👋 DebugPanel: Not rendering panel (isDebug is false)
- [DEBUG][StoreInitializer] Starting initialization...
- [DEBUG][StoreInitializer] Checking raw Zustand state:
- [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
- [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
- [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
- [RouteTracker DEBUG] isExemptPath changed to: false
- [RouteTracker DEBUG] Current path: /home
- [RouteTracker DEBUG] isSignedIn state: undefined
- [RouteTracker DEBUG] Effect 1 - isSignedIn: undefined has userInfo: false
- [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
- [RouteTracker DEBUG] Effect 2 - path: /home
- [RouteTracker DEBUG] Effect 2 - isSignedIn: undefined onboarding complete: false
- [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
- [DEBUG][StoreInitializer] Starting initialization...
- [DEBUG][StoreInitializer] Checking raw Zustand state:
- [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
- [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
- [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
- [MusicPlayer] Initializing audio context
- [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
- [MusicPlayer] Queue status: {initialized: false, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
- [MusicPlayer] Updating song queue for theme: cyberSpace
- [AudioSlice] Theme changed to cyberSpace wasPlaying: false
- 🎫 Subscription Status: FREE
- 👋 DebugPanel: URL debug parameter = true
- 👋 DebugPanel: Direct URL check = true http://localhost:3000/home?debug=true
- 👋 DebugPanel: Debug mode ENABLED
- 👋 DebugPanel: isDebug state = false
- [DEBUG][StoreInitializer] Starting initialization...
- [DEBUG][StoreInitializer] Checking raw Zustand state:
- [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
- [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
- [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
- [RouteTracker DEBUG] isExemptPath changed to: false
- [RouteTracker DEBUG] Current path: /home
- [RouteTracker DEBUG] isSignedIn state: undefined
- [RouteTracker DEBUG] Effect 1 - isSignedIn: undefined has userInfo: false
- [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
- [RouteTracker DEBUG] Effect 2 - path: /home
- [RouteTracker DEBUG] Effect 2 - isSignedIn: undefined onboarding complete: false
- [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
- [DEBUG][StoreInitializer] Starting initialization...
- [DEBUG][StoreInitializer] Checking raw Zustand state:
- [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
- [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
- [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
- [MusicPlayer] Initializing audio context
- [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
- [MusicPlayer] Queue status: {initialized: true, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
- [MusicPlayer] Updating song queue for theme: cyberSpace
- [AudioSlice] Theme changed to cyberSpace wasPlaying: false
- 🎫 Subscription Status: FREE
- 👋 DebugPanel: URL debug parameter = true
- 👋 DebugPanel: Direct URL check = true http://localhost:3000/home?debug=true
-DebugPanel.tsx:39 👋 DebugPanel: Debug mode ENABLED
-DebugPanel.tsx:52 👋 DebugPanel: isDebug state = false
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: undefined
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: false
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: null, isInitialized: false, hasUserInfo: false, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: false, isLoaded: true, isSignedIn: undefined, pathname: '/home', userInfoExists: false, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
 musicplayer.tsx:104 [MusicPlayer] Initializing audio context
-musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
-musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: false, shouldUpdateQueue: true}
-musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: mykonosBlue
-audioSlice.ts:200 [AudioSlice] Theme changed to mykonosBlue wasPlaying: false
-DebugPanel.tsx:52 👋 DebugPanel: isDebug state = true
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: undefined
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: false, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
+musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: cyberSpace
+audioSlice.ts:200 [AudioSlice] Theme changed to cyberSpace wasPlaying: false
+ProfileButton.tsx:68 [Debug] Profile loading state changed: true
+ProfileButton.tsx:70 [Debug] Profile is currently loading
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: false}
+page.tsx:106 [HomePage] Setting up safety timer
+page.tsx:176 [HomePage] Loading state check: {isLoadingUserInfo: false, loadingState: {…}}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: false, isLoadingUserInfo: false}
+selectors.ts:74 [useNavigation] navigateHomeTab called with: KalypsoAI, current page: KalypsoAI
+uiSlice.ts:80 [uiSlice] setPage called with: KalypsoAI
+uiSlice.ts:84 [uiSlice] setPage - no change needed, page already: KalypsoAI
+selectors.ts:79 [useNavigation] navigateHomeTab completed, page should now be: KalypsoAI
+page.tsx:494 [HomePage] Component lifecycle effect
+layout.tsx:46 🎫 Subscription Status: FREE
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: false, isLoaded: true, isSignedIn: undefined, pathname: '/home', userInfoExists: false, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
+musicplayer.tsx:104 [MusicPlayer] Initializing audio context
+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
+musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: cyberSpace
+audioSlice.ts:200 [AudioSlice] Theme changed to cyberSpace wasPlaying: false
+ProfileButton.tsx:68 [Debug] Profile loading state changed: true
+ProfileButton.tsx:70 [Debug] Profile is currently loading
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: false}
+page.tsx:106 [HomePage] Setting up safety timer
+page.tsx:176 [HomePage] Loading state check: {isLoadingUserInfo: false, loadingState: {…}}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: false, isLoadingUserInfo: false}
+page.tsx:494 [HomePage] Component lifecycle effect
+layout.tsx:46 🎫 Subscription Status: FREE
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+musicplayer.tsx:104 [MusicPlayer] Initializing audio context
+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
 musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
-index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: false}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: false, isLoadingUserInfo: false}
 musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
-index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
 musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
 musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
-StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
 script.debug.js:1 [Vercel Web Analytics] Debug mode is enabled by default in development. No requests will be sent to the server.
-script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home?debug=true {o: 'http://localhost:3000/home?debug=true', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742871036249, …}
+script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home {o: 'http://localhost:3000/home', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1743191716954, …}
 audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-RouteTracker.tsx:59 [RouteTracker DEBUG] Checking exemption for path: /home
-RouteTracker.tsx:60 [RouteTracker DEBUG] User is signed in: true
-RouteTracker.tsx:71 [RouteTracker DEBUG] Path exempt (standard): false
 audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-StoreInitializer.tsx:96 [DEBUG][StoreInitializer] User signed in, refreshing user info...
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
 
                 
           
           
           
          Chrome is moving towards a new experience that allows users to choose to browse without third-party cookies.
-RouteTracker.tsx:174 [RouteTracker DEBUG] isExemptPath changed to: false
-RouteTracker.tsx:175 [RouteTracker DEBUG] Current path: /home
-RouteTracker.tsx:176 [RouteTracker DEBUG] isSignedIn state: true
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: false
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: false
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
-RouteTracker.tsx:367 [AUTH DEBUG] Auth state changed but NOT from login button - no redirect
-StoreInitializer.tsx:96 [DEBUG][StoreInitializer] User signed in, refreshing user info...
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-StoreInitializer.tsx:117 [DEBUG][StoreInitializer] Running secondary refresh...
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:117 [DEBUG][StoreInitializer] Running secondary refresh...
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (14) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version', 'coins', 'isSubscribed', 'profile', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'isProfileComplete']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-RouteTracker.tsx:79 [RouteTracker DEBUG] effectiveOnboardingComplete: true (direct onboardingComplete flag)
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: false
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: false, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: false, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+useUserInfo.ts:137 [useUserInfo] Initializing with user ID: user_2rFXhmeHNzY3irm9HShrGMGMY3M
+useUserInfo.ts:120 [useUserInfo] Starting initial fetch
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: false}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: false, isLoadingUserInfo: false}
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+ProfileButton.tsx:78 [Debug] Profile loading timeout - forcing display of default profile
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: null forceShowProfile: true
+ProfileButton.tsx:10 [Debug] ProfileImage rendering with photo: undefined
+ProfileButton.tsx:68 [Debug] Profile loading state changed: true
+ProfileButton.tsx:70 [Debug] Profile is currently loading
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: false}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: false, isLoadingUserInfo: false}
+ProfileButton.tsx:21 [Debug] Profile image loaded: undefined
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+ [UserStore DEBUG] Profile data changed, updating
+ [UserStore DEBUG] Applying updates to store: (12) ['error', 'version', 'userInfo', 'coins', 'isSubscribed', 'profile', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'isProfileComplete']
+ [UserStore DEBUG] Store updates applied
+ [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: true
+ [Debug] ProfileImage rendering with photo: 
+ [HomePage] Component rendering
+ [HomePage] hasSeenIntroVideo calculated: true
+ [HomePage] shouldInitialize check: {shouldInit: true, isInitialized: false, hasUserInfo: true, isLoadingUserInfo: false}
+ [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+ [HomePage] Showing page initialization loading spinner
+ [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: false, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
+ProfileButton.tsx:68 [Debug] Profile loading state changed: false
+ProfileButton.tsx:87 [Debug] Profile loaded with data: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …}
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
 layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
-StoreInitializer.tsx:101 [DEBUG][StoreInitializer] After initial refresh:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-StoreInitializer.tsx:101 [DEBUG][StoreInitializer] After initial refresh:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-StoreInitializer.tsx:119 [DEBUG][StoreInitializer] After secondary refresh:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-StoreInitializer.tsx:119 [DEBUG][StoreInitializer] After secondary refresh:
-StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:215 [ROUTE_TRACKER] No valid cache found, fetching from API...
+ProfileButton.tsx:68 [Debug] Profile loading state changed: false
+ProfileButton.tsx:87 [Debug] Profile loaded with data: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …}
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
+ProfileButton.tsx:68 [Debug] Profile loading state changed: true
+ProfileButton.tsx:70 [Debug] Profile is currently loading
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+ProfileButton.tsx:10 [Debug] ProfileImage rendering with photo: 
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: true, isInitialized: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:431 [ROUTE_TRACKER] Skipping subscription/study plan checks due to conditions not met
+ProfileButton.tsx:68 [Debug] Profile loading state changed: false
+ProfileButton.tsx:87 [Debug] Profile loaded with data: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …}
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: true profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+ProfileButton.tsx:68 [Debug] Profile loading state changed: true
+ProfileButton.tsx:70 [Debug] Profile is currently loading
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: true, showingContent: false}
+page.tsx:659 [HomePage] Showing page initialization loading spinner
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: true, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: false, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:217 [HomePage] Starting initializeData
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+useUserInfo.ts:137 [useUserInfo] Initializing with user ID: user_2rFXhmeHNzY3irm9HShrGMGMY3M
+useUserInfo.ts:120 [useUserInfo] Starting initial fetch
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+useUserInfo.ts:137 [useUserInfo] Initializing with user ID: user_2rFXhmeHNzY3irm9HShrGMGMY3M
+useUserInfo.ts:120 [useUserInfo] Starting initial fetch
+userSlice.ts:365 [UserStore DEBUG] Starting refreshUserInfo
+userSlice.ts:372 [UserStore DEBUG] Making API requests for user info
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:176 [HomePage] Loading state check: {isLoadingUserInfo: false, loadingState: {…}}
+page.tsx:179 [HomePage] Fully loaded and ready to display content
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+RouteTracker.tsx:223 [ROUTE_TRACKER] Study plan API response received, caching result
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 0 seconds
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+ProfileButton.tsx:10 [Debug] ProfileImage rendering with photo: 
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 0 seconds
+ProfileButton.tsx:68 [Debug] Profile loading state changed: false
+ProfileButton.tsx:87 [Debug] Profile loaded with data: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …}
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+useUserInfo.ts:125 [useUserInfo] Initial fetch completed in 8736ms
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+useUserInfo.ts:142 [useUserInfo] Initialization completed in 8737ms
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ProfileButton.tsx:21 [Debug] Profile image loaded: 
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+ [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+ [UserStore DEBUG] Processing profile response
+ [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+ [UserStore DEBUG] Profile data unchanged
+ [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+ [UserStore DEBUG] Store updates applied
+ [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+ [HomePage] Component rendering
+ [HomePage] hasSeenIntroVideo calculated: true
+ [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+ [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+ [HomePage] Rendering main content
+ [ChatContainer] Component unmounted
+ [ROUTE_TRACKER] Subscription/study plan effect triggered
+ [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+ [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+ [ROUTE_TRACKER] Checking subscription and study plan...
+ [ROUTE_TRACKER] Current path: /home
+ [ROUTE_TRACKER] isSubscribed: true
+ [ROUTE_TRACKER] Should check study plan: true
+ [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+ [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+ [ROUTE_TRACKER] Starting study plan check...
+ [ROUTE_TRACKER] Current pathname: /home
+ [ROUTE_TRACKER] Using cached study plan from localStorage, age: 2 seconds
+ [ChatContainer] Component mounted, prefetching welcome message
+ [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ [ChatContainer] Waiting for activities to load before generating welcome message
+ [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+ [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ [ROUTE_TRACKER] Study plan check result: true
+ [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+ [HomePage] Setting loading state to false
+ [HomePage] Loading state should now be false
+ [HomePage] Component rendering
+ [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+ [HomePage] Rendering main content
+ [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+ [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ [HomePage] Component rendering
+ [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+ [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 2 seconds
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 3 seconds
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:150 [ChatContainer] Waiting for activities to load before generating welcome message
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:136 [ChatContainer] TEST: Cleared cache flags to force template regeneration
+ChatContainer.tsx:160 [ChatContainer] Activities loaded, updating temporary welcome message
+ChatContainer.tsx:178 [ChatContainer] Generated template welcome message: Good afternoon, Dennis Cao! It's 12:55 PM on Friday - great time for a focused study block.
+
+Your next full-length practice exam is scheduled for March 29th (0 days away).
+
+You don't have any specific tasks scheduled for today. Consider adding some study activities!
+
+What can I help you with?
+ChatContainer.tsx:224 [ChatContainer] Component unmounted
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:129 [ChatContainer] Skipping duplicate prefetch, already have welcome message in state
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:129 [ChatContainer] Skipping duplicate prefetch, already have welcome message in state
+DraggableKalypso.tsx:231 Debug image loaded
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+ChatContainer.tsx:540 [ChatContainer] Using prefetched welcome message
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 3 seconds
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:129 [ChatContainer] Skipping duplicate prefetch, already have welcome message in state
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+useUserInfo.ts:125 [useUserInfo] Initial fetch completed in 3626ms
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+useUserInfo.ts:142 [useUserInfo] Initialization completed in 3626ms
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Enter repeat: false cmdPressedRef: false
+userSlice.ts:378 [UserStore DEBUG] API responses received: {userInfoStatus: 200, profileStatus: 200}
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+userSlice.ts:389 [UserStore DEBUG] Received userInfo: {hasOnboardingInfo: true, hasSeenIntroVideo: true, userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', subscriptionType: 'gold'}
+userSlice.ts:425 [UserStore DEBUG] Processing profile response
+userSlice.ts:427 [UserStore DEBUG] Profile data: {hasProfilePhoto: false, firstName: 'Dennis Cao', completedStepsLength: undefined}
+userSlice.ts:456 [UserStore DEBUG] Profile data unchanged
+userSlice.ts:462 [UserStore DEBUG] Applying updates to store: (3) ['error', 'version', 'userInfo']
+userSlice.ts:469 [UserStore DEBUG] Store updates applied
+ProfileButton.tsx:46 [Debug] ProfileButton render - profileLoading: false profile: {userId: 'user_2rFXhmeHNzY3irm9HShrGMGMY3M', firstName: 'Dennis Cao', bio: 'MAIN ACCOUNT', coins: 24, profilePhoto: '', …} forceShowProfile: false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:186 [HomePage] hasSeenIntroVideo calculated: true
+page.tsx:202 [HomePage] shouldInitialize check: {shouldInit: false, isInitialized: true, hasUserInfo: true, isLoadingUserInfo: false}
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+RouteTracker.tsx:402 [ROUTE_TRACKER] Subscription/study plan effect triggered
+RouteTracker.tsx:403 [ROUTE_TRACKER] State values: {initialLoadComplete: true, isLoaded: true, isSignedIn: true, pathname: '/home', userInfoExists: true, …}
+RouteTracker.tsx:435 [ROUTE_TRACKER] All conditions met, proceeding with subscription/study plan checks
+RouteTracker.tsx:439 [ROUTE_TRACKER] Checking subscription and study plan...
+RouteTracker.tsx:440 [ROUTE_TRACKER] Current path: /home
+RouteTracker.tsx:441 [ROUTE_TRACKER] isSubscribed: true
+RouteTracker.tsx:454 [ROUTE_TRACKER] Should check study plan: true
+RouteTracker.tsx:455 [ROUTE_TRACKER] Exempt paths check: (6) [{…}, {…}, {…}, {…}, {…}, {…}]
+RouteTracker.tsx:461 [ROUTE_TRACKER] Initiating study plan check via checkStudyPlan()
+RouteTracker.tsx:190 [ROUTE_TRACKER] Starting study plan check...
+RouteTracker.tsx:191 [ROUTE_TRACKER] Current pathname: /home
+RouteTracker.tsx:202 [ROUTE_TRACKER] Using cached study plan from localStorage, age: 5 seconds
+ChatContainer.tsx:120 [ChatContainer] Component mounted, prefetching welcome message
+ChatContainer.tsx:129 [ChatContainer] Skipping duplicate prefetch, already have welcome message in state
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+useUserInfo.ts:125 [useUserInfo] Initial fetch completed in 5505ms
+RouteTracker.tsx:467 [ROUTE_TRACKER] Study plan check result: true
+useUserInfo.ts:142 [useUserInfo] Initialization completed in 5505ms
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Enter repeat: false cmdPressedRef: false
+page.tsx:238 [HomePage] Data loaded successfully {activitiesCount: 6, proStatus: false}
+page.tsx:249 [HomePage] Setting loading state to false
+page.tsx:251 [HomePage] Loading state should now be false
+page.tsx:41 [HomePage] Component rendering
+page.tsx:647 [HomePage] Rendering content with states: {isLoadingUserInfo: false, loading: false, showingContent: true}
+page.tsx:663 [HomePage] Rendering main content
+page.tsx:56 [HomePage] Render {isLoadingUserInfo: false, loadingState: false, userInfoExists: true}
+page.tsx:208 [HomePage] Prefetch effect triggered {initializationRef: true, hasUserInfo: true, isLoadingUserInfo: false}
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Enter repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Meta repeat: false cmdPressedRef: false
+ChatContainer.tsx:280 [ChatContainer] Setting cmdPressedRef to true
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Meta cmdPressedRef: true cmdPressedTime: 1743191748836
+ChatContainer.tsx:298 [ChatContainer] Command press duration: 1394 ms
+ChatContainer.tsx:276 [ChatContainer] KeyDown: w repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: h repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: w cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: a repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: h cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: t repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: a cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: i repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: t cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: s repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: i cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: s cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: m repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: m cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Backspace repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Backspace cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: m repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: y repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: m cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: y cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: s repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: t repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: s cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: t cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: a repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: t repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: a cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: u repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: t cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: s repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: u cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: s cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: o repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: n repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: o cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: n cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Backspace repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Backspace cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Backspace repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Backspace cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Backspace repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Backspace cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: i repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: n repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: i cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: t repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: n cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: t cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: h repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: e repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: h cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: e cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: a repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: n repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: a cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: k repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: n cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: k cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: i repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: i cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: c repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: l repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: c cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: l cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: i repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: n repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: i cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: i repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: n cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: c repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: i cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: c cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Shift repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown: ? repeat: false cmdPressedRef: false
+ChatContainer.tsx:276 [ChatContainer] KeyDown:   repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: ? cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp:   cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Shift cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Enter repeat: false cmdPressedRef: false
+ChatContainer.tsx:293 [ChatContainer] KeyUp: Enter cmdPressedRef: false cmdPressedTime: null
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Meta repeat: false cmdPressedRef: false
+ChatContainer.tsx:280 [ChatContainer] Setting cmdPressedRef to true
+ChatContainer.tsx:276 [ChatContainer] KeyDown: Shift repeat: false cmdPressedRef: true
+ChatContainer.tsx:287 [ChatContainer] Combo detected, clearing cmdPressedTime
diff --git a/README_Docs/tasks/user-dennis/3.5-Current.html b/README_Docs/tasks/user-dennis/3.5-Current.html
new file mode 100644
index 0000000000000000000000000000000000000000..26dcd741135bf02cf1165ce758b34ff0e7f46e70
--- /dev/null
+++ b/README_Docs/tasks/user-dennis/3.5-Current.html
@@ -0,0 +1,15 @@
+<div class="p-3 pb-6 gradientbg h-[calc(100vh-5.5rem)] rounded-lg mb-4"><div class="h-full overflow-hidden"><div class="flex flex-col h-full rounded-lg overflow-hidden relative theme-cyberSpace-chat" style="background-color: transparent; padding: 0px; margin: 0px; border: 1px solid var(--theme-border-color); box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 20px; width: 100%; height: 100%; display: flex; flex-direction: column;"><div class="flex-1 relative w-full h-full" style="padding: 0px; margin: 0px;"><div style="font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"><style>#rcb-b8232b52-763d-4a1e-8bb1-4b1a83f66ff3 .rcb-close-chat-icon {
+    height: 18px;
+    width: 18px;
+  }
+  #rcb-b8232b52-763d-4a1e-8bb1-4b1a83f66ff3 .rcb-chat-header {
+    display: flex;
+    align-items: center;
+  }
+  </style><div id="rcb-b8232b52-763d-4a1e-8bb1-4b1a83f66ff3"><div class="rcb-chatbot-global rcb-window-embedded"><div class="rcb-chat-window" style="background-color: transparent; display: flex; flex-direction: column; height: 100%; width: 100%; position: relative; z-index: 1; padding: 0px; margin: 0px;"><div class="rcb-chat-header-container" style="background: rgba(0, 18, 38, 0.3); color: rgb(255, 255, 255); text-shadow: none; backdrop-filter: blur(5px); border-bottom: 1px solid var(--theme-border-color); padding: 0.75rem 1rem; margin: 0px; width: 100%;"><div class="rcb-chat-header"><div class="flex items-center justify-between w-full"><div class="flex text-[--theme-text-color] items-center gap-3"><div class="flex items-center"><button type="button" class="px-2 py-1 text-xs rounded-full transition-colors text-[--theme-text-color] hover:text-[--theme-hover-color]">🔇</button><span class="text-[9px] ml-1 text-[--theme-text-color]">toggle voice with 'cmd' key</span></div><button type="button" class="px-3 py-1 rounded-full text-xs font-medium transition-colors duration-300 border border-[--theme-border-color] bg-[rgba(255,255,255,0.1)] text-[--theme-text-color] hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]">What's my schedule?</button><button type="button" class="px-3 py-1 rounded-full text-xs font-medium transition-colors duration-300 border border-[--theme-border-color] bg-[rgba(255,255,255,0.1)] text-[--theme-text-color] hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]">What was in my tutor's last report?</button></div></div></div><div class="rcb-chat-header"></div></div><div class="rcb-chat-body-container" style="flex-grow: 1; overflow-y: auto; background-color: transparent; padding: 0px; margin: 0px; width: 100%; scrollbar-width: none;"><div><div class="rcb-bot-message-container"><div class="rcb-bot-message rcb-bot-message-entry" style="background-color: rgba(0, 18, 38, 0.95); color: var(--theme-text-color); max-width: 70%; text-align: left; border-radius: 0.75rem 0.75rem 0.75rem 0.25rem; padding: 0.75rem 1rem; font-size: 1rem; font-weight: 500; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; backdrop-filter: blur(10px); box-shadow: rgba(0, 123, 255, 0.4) 0px 0px 10px 4px, rgba(0, 0, 0, 0.1) 0px 2px 5px; border: none; margin: 0.75rem 1rem; width: auto;">Meow there, I'm Kalypso! It's great to see you again. Look, you may not have done the best on your last test — with a 492 — but you're getting more consistent! That's a victory! Speaking of which, here's what you have to worry about:
+  
+  1) Your profile shows that you're not doing as well as you could be in physics so your ATS is mainly physics this week.
+  
+  2) And you've got a HUGE test on Friday — the next full length exam — so we're going to really focus on that.
+  
+  We're still on track for your 510 in three months. Want to hear a joke about physics?</div></div></div><div class="rcb-message-prompt-container hidden"><div class="rcb-message-prompt-text">New Messages ↓</div></div><div class="rcb-toast-prompt-container" style="bottom: 20px; width: 300px;"></div></div><div aria-label="input text area" role="textbox" class="rcb-chat-input" style="background-color: rgba(0, 0, 0, 0.3); position: sticky; bottom: 0px; backdrop-filter: blur(10px); border-top: 2px solid rgba(59, 130, 246, 0.5); padding: 1rem; margin: auto 0px 0px; width: 100%; z-index: 2; box-shadow: rgba(0, 123, 255, 0.2) 0px -5px 15px -5px;"><textarea rows="1" class="rcb-chat-input-textarea" placeholder="Chat with Kalypso" style="box-sizing: content-box; min-height: 0px; border: 1px solid rgba(59, 130, 246, 0.7); padding: 8px 15px; background-color: rgba(255, 255, 255, 0.1); color: var(--theme-text-color); font-size: 14px; border-radius: 12px; width: 100%; backdrop-filter: blur(5px); box-shadow: rgba(0, 123, 255, 0.15) 0px 0px 10px 2px;"></textarea><div class="rcb-chat-input-button-container"><div aria-label="send message" role="button" class="rcb-send-button" style="background-color: rgb(91, 198, 230); display: none;"><span class="rcb-send-icon" data-testid="rcb-send-icon"><svg viewBox="0 -960 960 960" style="fill: rgb(255, 255, 255);"><path d="M94-136v-255l351-93-351-92v-253l816 346L94-136Z"></path></svg></span></div></div></div></div></div></div></div></div></div></div></div> 
\ No newline at end of file
diff --git a/README_Docs/tasks/user-dennis/3.5-Target.html b/README_Docs/tasks/user-dennis/3.5-Target.html
new file mode 100644
index 0000000000000000000000000000000000000000..71d8e2d7f4b5b0a06f83c87a0fd1dc02db655ef2
--- /dev/null
+++ b/README_Docs/tasks/user-dennis/3.5-Target.html
@@ -0,0 +1,15 @@
+<div class="p-3 gradientbg h-[calc(100vh-5.5rem)] rounded-lg mb-4"><div class="h-full w-full overflow-visible relative"><div class="w-full h-full p-4"><div class="flex flex-col h-full rounded-lg overflow-hidden border theme-cyberSpace-chat shadow-lg" style="border-color: var(--theme-border-color); border-width: 1px; box-shadow: rgba(0, 0, 0, 0.1) 0px 4px 20px;"><div class="flex-1 relative"><div style="font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif;"><style>#rcb-6e6765e6-fe0d-4d61-a1d5-45460135a91a .rcb-close-chat-icon {
+    height: 18px;
+    width: 18px;
+  }
+  #rcb-6e6765e6-fe0d-4d61-a1d5-45460135a91a .rcb-chat-header {
+    display: flex;
+    align-items: center;
+  }
+  </style><div id="rcb-6e6765e6-fe0d-4d61-a1d5-45460135a91a"><div class="rcb-chatbot-global rcb-window-embedded"><div class="rcb-chat-window" style="background-color: transparent; display: flex; flex-direction: column; height: calc(-9rem + 100vh); width: 100%; position: relative; z-index: 1;"><div class="rcb-chat-header-container" style="background: rgba(0, 18, 38, 0.3); color: rgb(255, 255, 255); text-shadow: none; backdrop-filter: blur(5px); border-bottom: 1px solid var(--theme-border-color); padding: 0.75rem 1rem;"><div class="rcb-chat-header"><div class="flex items-center justify-between w-full"><div class="flex text-[--theme-text-color] items-center gap-3"><div class="flex items-center"><button class="px-2 py-1 text-xs rounded-full transition-colors text-[--theme-text-color] hover:text-[--theme-hover-color]">🔇</button><span class="text-[9px] ml-1 text-[--theme-text-color]">toggle voice with 'cmd' key</span></div><button class="px-3 py-1 rounded-full text-xs font-medium transition-colors duration-300 border border-[--theme-border-color] bg-[rgba(255,255,255,0.1)] text-[--theme-text-color] hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]">What's my schedule?</button><button class="px-3 py-1 rounded-full text-xs font-medium transition-colors duration-300 border border-[--theme-border-color] bg-[rgba(255,255,255,0.1)] text-[--theme-text-color] hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]">What was in my tutor's last report?</button></div></div></div><div class="rcb-chat-header"></div></div><div class="rcb-chat-body-container" style="flex-grow: 1; overflow-y: auto; background-color: transparent; scrollbar-width: none;"><div><div class="rcb-bot-message-container"><div class="rcb-bot-message rcb-bot-message-entry" style="background-color: rgba(0, 18, 38, 0.95); color: var(--theme-text-color); max-width: 70%; text-align: left; border-radius: 0.75rem 0.75rem 0.75rem 0.25rem; font-size: 1rem; font-weight: 500; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, Oxygen, Ubuntu, Cantarell, &quot;Fira Sans&quot;, &quot;Droid Sans&quot;, &quot;Helvetica Neue&quot;, sans-serif; backdrop-filter: blur(10px); box-shadow: rgba(0, 123, 255, 0.4) 0px 0px 10px 4px, rgba(0, 0, 0, 0.1) 0px 2px 5px; border-left: 3px solid rgb(59, 130, 246);">Meow there, I'm Kalypso! It's great to see you again. Look, you may not have done the best on your last test — with a 492 — but you're getting more consistent! That's a victory! Speaking of which, here's what you have to worry about:
+  
+  1) Your profile shows that you're not doing as well as you could be in physics so your ATS is mainly physics this week.
+  
+  2) And you've got a HUGE test on Friday — the next full length exam — so we're going to really focus on that.
+  
+  We're still on track for your 510 in three months. Want to hear a joke about physics?</div></div></div><div class="rcb-message-prompt-container hidden"><div class="rcb-message-prompt-text">New Messages ↓</div></div><div class="rcb-toast-prompt-container" style="bottom: 20px; width: 300px;"></div></div><div aria-label="input text area" role="textbox" class="rcb-chat-input" style="background-color: rgba(0, 0, 0, 0.3); position: sticky; bottom: 0px; backdrop-filter: blur(10px); border-top: 2px solid rgba(59, 130, 246, 0.5); padding: 1rem; width: 100%; z-index: 2; box-shadow: rgba(0, 123, 255, 0.2) 0px -5px 15px -5px;"><textarea rows="1" class="rcb-chat-input-textarea" placeholder="Chat with Kalypso" style="box-sizing: content-box; min-height: 0px; border: 1px solid rgba(59, 130, 246, 0.7); padding: 8px 15px; background-color: rgba(255, 255, 255, 0.1); color: var(--theme-text-color); font-size: 14px; border-radius: 12px; width: 100%; box-shadow: rgba(0, 123, 255, 0.15) 0px 0px 10px 2px; backdrop-filter: blur(5px);"></textarea><div class="rcb-chat-input-button-container"><div aria-label="send message" role="button" class="rcb-send-button" style="background-color: rgb(91, 198, 230); display: none;"><span class="rcb-send-icon" data-testid="rcb-send-icon"><svg viewBox="0 -960 960 960" style="fill: rgb(255, 255, 255);"><path d="M94-136v-255l351-93-351-92v-253l816 346L94-136Z"></path></svg></span></div></div></div></div></div></div></div></div></div></div></div></div>
\ No newline at end of file
diff --git a/README_Docs/tasks/user-dennis/4---------- Notes ------------------- b/README_Docs/tasks/user-dennis/4---------- Notes -------------------
new file mode 100644
index 0000000000000000000000000000000000000000..e69de29bb2d1d6434b8b29ae775ad8c2e48c5391
diff --git a/README_Docs/tasks/user-dennis/4-PR-Diff.txt b/README_Docs/tasks/user-dennis/4-PR-Diff.txt
index 9de5d52c4d00c704563f6a2a22c7f201455e63ca..a020098c6e94b0d2d20684e9e6e613af0a1340fa 100644
--- a/README_Docs/tasks/user-dennis/4-PR-Diff.txt
+++ b/README_Docs/tasks/user-dennis/4-PR-Diff.txt
@@ -1,7558 +0,0 @@
-diff --git a/README_Docs/tasks/Bugs.md b/README_Docs/tasks/Bugs.md
-index 27ebe7bb440f2b5cd8d1ecd477cea7cc3999aac6..9f9d0f1c65bd643ec46a2afcffb8295a69b1891c 100644
---- a/README_Docs/tasks/Bugs.md
-+++ b/README_Docs/tasks/Bugs.md
-@@ -8,6 +8,3 @@ Engineer Assigned
- 
- ---
- 
--
--[ ] new user signs up, lands on `/onboarding`, before they finish they go to localhost:3000 (mymcat.ai), then it instantly redirects them to `onboarding` - we shouldn't reroute based on the home page (localhost:3000) - always should always see landing page with login button **Dennis**
--
-diff --git a/README_Docs/tasks/user-dennis/1-tasks-fixbug.md b/README_Docs/tasks/user-dennis/1-tasks-fixbug.md
-new file mode 100644
-index 0000000000000000000000000000000000000000..a284433380a669598fedc253a325a2a23131c0b9
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/1-tasks-fixbug.md
-@@ -0,0 +1,169 @@
-+# Onboarding Navigation Requirements
-+
-+
-+
-+## Routing Requirement
-+**Routing should ONLY happen when users explicitly press the login button at the root URL**. The application should never automatically redirect users who navigate to localhost:3000 without clicking the login button.
-+When users explicitly press the login button at localhost:3000 (or mymcat.ai), the application should route them to the appropriate page based on their onboarding status:
-+
-+When clicking the login button:
-+- If `onboardingComplete` is true (user has completed onboarding), they should go to `/home`
-+- If `onboardingComplete` is false (user hasn't completed onboarding), they should go to `/onboarding`
-+
-+The solution must handle these specific edge cases:
-+1. **New User Flow**: When a new user who hasn't completed onboarding goes to the root URL and presses the login button, they should be redirected to `/onboarding`.
-+
-+2. **Returning User Flow**: When a returning user who has completed onboarding goes to the root URL and presses the login button, they should be redirected to `/home`.
-+
-+3. **Post-Login Root Navigation**: When a user who is already logged in navigates directly to the root path, they should remain at the root URL with no redirect.
-+
-+4. **Post-Logout Flow**: When a user logs out and then returns to the site, they should remain at the root URL with no redirect until they press the login button again.
-+
-+
-+
-+## Current onboardingComplete Explanation 
-+
-+This section details how we currently implement onboarding...
-+
-+- When a new user first interacts with the system, an `onboardingInfo` object is created in the database during the `handleNameSubmit` function in `useOnboardingInfo.ts`. This happens AFTER the user authenticates with Clerk and begins the onboarding process. Specifically, the creation occurs when they submit their name in the first onboarding step, which triggers a POST request to `/api/user-info`. 
-+
-+- The `onboardingInfo` object is not created empty but is initialized with a complete set of default values in the POST endpoint:
-+  ```javascript
-+  onboardingInfo: {
-+    currentStep: 1,
-+    onboardingComplete: false,
-+    firstName: firstName || null,  // Uses the user-provided name
-+    college: null,
-+    isNonTraditional: null,
-+    isCanadian: null,
-+    gpa: null,
-+    currentMcatScore: null,
-+    hasNotTakenMCAT: null,
-+    mcatAttemptNumber: null,
-+    targetMedSchool: null,
-+    targetScore: null,
-+    referralEmail: null
-+  }
-+  ```
-+  This ensures all fields exist from the beginning, with `onboardingComplete` explicitly set to `false` and only the `firstName` and `currentStep` having non-null values initially.
-+
-+- As the user progresses through each step of onboarding (name, college, academics, goals, Kalypso dialogue, referral), the `onboardingInfo` object is updated in the database via the `updateOnboardingInfo` function calling the PUT endpoint at `/api/user-info/onboarding`. Each step triggers a separate API call to update the database with:
-+  - The new data specific to that step
-+  - An updated `currentStep` value pointing to the next step
-+  - The same `onboardingComplete: false` flag (until the final step)
-+
-+
-+- The `onboardingComplete` flag is only toggled to true at the very end of the onboarding process, specifically in the `handleReferralComplete` function when the user completes the final step. This happens when:
-+  1. User has successfully completed all previous onboarding steps
-+  2. User reaches the referral step and clicks "Complete" or "Skip"
-+  3. The `handleReferralComplete` function is triggered
-+  
-+- Before setting `onboardingComplete` to true, the system performs several validation checks:
-+  1. Verifies that the onboardingInfo record exists in the database
-+  2. Validates that a non-zero target score has been set (critical check)
-+  3. Confirms that required fields like firstName and college are present
-+  4. If any of these checks fail, the system shows an error and does not proceed
-+
-+
-+- The actual update process follows a specific sequence:
-+  1. First, make a PUT request to update the database with `onboardingComplete: true`
-+  2. Wait for the database update to complete and verify it was successful
-+  3. Only if the database update was confirmed successful, update the local state with `setOnboardingComplete(true)`
-+  4. Then redirect the user to the appropriate page (/home or /redirect for mobile)
-+
-+
-+- This database-first approach ensures data integrity and prevents inconsistent states between the database and client.
-+
-+
-+- The system checks for `onboardingComplete` status in several key places:
-+
-+  1. **In the `useOnboardingInfo` hook's `fetchOnboardingInfo` function**:
-+     - Runs when the onboarding page is first loaded in `app/(auth)/(routes)/onboarding/page.tsx`
-+     - Makes an API call to `/api/user-info/onboarding` to check current onboarding status
-+     - If `data?.onboardingComplete` is true from the API response, it updates local state and redirects immediately
-+     - Used to resume onboarding at the correct step if the user had partially completed it
-+
-+  2. **In the `RouteTracker.tsx` component**:
-+     - The RouteTracker component is included in the root layout (`app/layout.tsx`) and runs on every page
-+     - It calculates `effectiveOnboardingComplete` by checking both the direct flag and the targetScore as a fallback
-+     - Uses this information to determine if redirects are needed when users log in or navigate between pages
-+     - Triggers different behavior based on explicit login clicks vs. regular navigation
-+
-+  3. **In the `StoreInitializer` component**:
-+     - Also included in the root layout and runs on every page load 
-+     - Calls `refreshUserInfo()` to load all user data including onboarding status
-+     - Performs a second refresh after 1 second to ensure consistency
-+     - Ensures all components have access to the current onboarding state
-+
-+
-+## Database Synchronization Flow
-+
-+This section details how data synchronization occurs between the database and local state:
-+
-+1. **App Initialization**:
-+   - The `StoreInitializer` component is included in the root layout of the application (`app/layout.tsx`)
-+   - It runs on every page load, regardless of route
-+   - If a user is signed in, it calls `refreshUserInfo()` to sync all user data from the database
-+   - It performs a second `refreshUserInfo()` call after a 1-second delay to handle potential race conditions
-+
-+2. **Login Flow**:
-+   - When a user clicks login at the root URL, the `explicit_login_click` flag is set in localStorage
-+   - After authentication, the `StoreInitializer` detects the user is signed in and fetches user data
-+   - The `RouteTracker` checks the user's `onboardingComplete` status and redirects accordingly
-+
-+3. **Onboarding Process**:
-+   - When entering their name, a new userInfo record is created in the database via POST to `/api/user-info`
-+   - Each subsequent step updates the database via PUT to `/api/user-info/onboarding`
-+   - At the final step (`handleReferralComplete`), after setting `onboardingComplete: true`:
-+     - The database is updated first
-+     - The success of this update is explicitly verified
-+     - Only then is the local state updated with `setOnboardingComplete(true)`
-+     - A full `refreshUserInfo()` call is performed to ensure complete data synchronization
-+     - Finally, the user is redirected to the appropriate page (/home or /redirect for mobile)
-+
-+4. **Home Page Load After Completion**:
-+   - When redirected to home, the `StoreInitializer` runs again on page load
-+   - This triggers another `refreshUserInfo()` which ensures local state is fully in sync with the database
-+
-+
-+## Recommended Improvements
-+
-+This section outlines potential improvements to our current implementation that would enhance reliability, performance, and code maintainability:
-+
-+
-+### 2. Consistent State Synchronization
-+
-+The following improvements have been implemented:
-+- Added a full `refreshUserInfo()` call immediately after setting `onboardingComplete: true` in `handleReferralComplete()`
-+- Implemented atomic updates for related state changes with the new `batchUpdateProfile` function
-+- Added error handling with rollback capabilities for failed API operations
-+- Replaced individual property updates with batch updates for related changes
-+
-+### 3. Reduce API Calls
-+- Batch onboarding step updates where possible instead of making separate calls for each step
-+- Implement a debounce mechanism for frequent state changes
-+- Consider using GraphQL to fetch exactly what's needed in fewer requests
-+- Add proper caching strategies for user data
-+
-+### 4. Improve Error Handling
-+- Add retry logic for failed API calls with exponential backoff
-+- Implement offline support with synchronization when connection is restored
-+- Provide clear recovery paths for users when operations fail
-+- Add more comprehensive error logging and monitoring
-+
-+### 5. Streamline State Management
-+- Consolidate state management to reduce the mix of local and global state
-+- Implement proper state selectors to minimize rerenders (already partly done with the selector pattern)
-+- Consider using React Context + useReducer for more predictable state transitions
-+- Create a clear separation between UI state and data state
-+
-+### 6. Auth Flow Improvements
-+- Implement a more robust auth state detection system than localStorage flags
-+- Add auth session persistence options to improve the returning user experience
-+- Consider a more streamlined onboarding flow with fewer steps and conditional form fields
-+- Add progress saving with the ability to resume onboarding from where users left off
-+
-+These improvements would lead to a more reliable, responsive, and maintainable application while reducing the potential for data inconsistency issues.
-+
-+
-+
-diff --git a/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt b/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt
-new file mode 100644
-index 0000000000000000000000000000000000000000..0e433616ee026508c5ea3cf7bd53b44fc5a773a0
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/3-BE-DebugConsole.txt
-@@ -0,0 +1,539 @@
-+macbookair@M2-MacbookAir my-mcat % npm run dev
-+
-+> ai-saas@0.1.0 dev
-+> next dev
-+
-+  ▲ Next.js 14.2.13
-+  - Local:        http://localhost:3000
-+  - Environments: .env
-+  - Experiments (use with caution):
-+    · turbo
-+
-+ ✓ Starting...
-+   automatically enabled Fast Refresh for 1 custom loader
-+ ✓ Ready in 1845ms
-+ ○ Compiling /_not-found ...
-+Browserslist: caniuse-lite is outdated. Please run:
-+  npx update-browserslist-db@latest
-+  Why you should do it regularly: https://github.com/browserslist/update-db#readme
-+ ✓ Compiled /_not-found in 6.2s (976 modules)
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /home
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /home
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /home?debug=true 404 in 6413ms
-+ ○ Compiling /favicon.ico ...
-+ ✓ Compiled /favicon.ico in 643ms (772 modules)
-+ GET /favicon.ico 200 in 907ms
-+ ○ Compiling /api/user-info ...
-+ ✓ Compiled /api/user-info in 595ms (698 modules)
-+ ✓ Compiled (702 modules)
-+ GET /api/user-info/profile 200 in 1883ms
-+ GET /api/user-info/profile 200 in 229ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 2502ms
-+ ✓ Compiled /api/study-plan in 135ms (704 modules)
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 373ms
-+ GET /api/study-plan 200 in 373ms
-+ GET /api/study-plan 200 in 106ms
-+ ○ Compiling /home ...
-+ ✓ Compiled /home in 5.9s (6349 modules)
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /home
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /home
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /home?debug=true 200 in 8279ms
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params {
-+  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-+  searchParams: ''
-+}
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 371ms
-+ ○ Compiling /api/notifications ...
-+ ✓ Compiled /api/notifications in 1699ms (3365 modules)
-+ GET /api/notifications 200 in 3169ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 3347ms
-+ GET /api/notifications 200 in 200ms
-+ GET /api/notifications 200 in 99ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+ GET /api/notifications 200 in 97ms
-+ GET /api/user-info/profile 200 in 3646ms
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 370ms
-+ GET /api/user-info/profile 200 in 217ms
-+ GET /api/study-plan 200 in 226ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+ GET /api/user-info/profile 200 in 199ms
-+ GET /api/study-plan 200 in 100ms
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 398ms
-+ GET /api/user-info/profile 200 in 223ms
-+ GET /api/study-plan 200 in 107ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+ GET /api/user-info/profile 200 in 191ms
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 381ms
-+ GET /api/user-info/profile 200 in 191ms
-+ GET /api/study-plan 200 in 220ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 436ms
-+ ○ Compiling /api/user-activity ...
-+ ✓ Compiled /api/user-activity in 798ms (3367 modules)
-+ ✓ Compiled (3374 modules)
-+ GET /api/calendar-activity 200 in 2195ms
-+ GET /api/calendar/exam-activities 200 in 2381ms
-+ GET /api/subscription 200 in 2358ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+ GET /api/study-plan 200 in 143ms
-+objc[10892]: Class GNotificationCenterDelegate is implemented in both /opt/homebrew/Cellar/glib/2.82.4/lib/libgio-2.0.0.dylib (0x140300648) and /Users/macbookair/Desktop/my-mcat/node_modules/@img/sharp-libvips-darwin-arm64/lib/libvips-cpp.42.dylib (0xd17c09a28). One of the two will be used. Which one is undefined.
-+ ⚠ The "images.domains" configuration is deprecated. Please use "images.remotePatterns" configuration instead.
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 542ms
-+ GET /api/user-info/profile 200 in 2414ms
-+cleaning up last activity
-+cleaning up last activity
-+cleaning up last activity
-+ GET /api/calendar-activity 200 in 257ms
-+ GET /api/calendar/exam-activities 200 in 470ms
-+ GET /api/study-plan 200 in 209ms
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 625ms
-+ GET /api/user-info/profile 200 in 223ms
-+cleaning up last activity
-+ GET /api/calendar-activity 200 in 275ms
-+ POST /api/user-activity 200 in 3490ms
-+cleaning up last activity
-+[DEBUG][API] User info from database, keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord'
-+]
-+ GET /api/study-plan 200 in 200ms
-+[DEBUG][API] Response object keys: [
-+  'id',               'userId',
-+  'devUserId',        'bio',
-+  'updatedAt',        'apiCount',
-+  'createdAt',        'score',
-+  'clinicRooms',      'hasPaid',
-+  'subscriptionType', 'diagnosticScores',
-+  'firstName',        'profilePhoto',
-+  'streak',           'notificationPreference',
-+  'unlocks',          'onboardingInfo',
-+  'patientRecord',    'email'
-+]
-+ GET /api/user-info 200 in 391ms
-+cleaning up last activity
-+ POST /api/user-activity 200 in 2157ms
-+ ○ Compiling /api/user-activity/[activityId] ...
-+ POST /api/user-activity 200 in 1332ms
-+ ✓ Compiled /api/user-activity/[activityId] in 762ms (3376 modules)
-+ POST /api/user-activity 200 in 4857ms
-+ POST /api/user-activity 200 in 1634ms
-+ POST /api/user-activity 200 in 2539ms
-+ GET /api/study-plan 200 in 1328ms
-+ PATCH /api/user-activity/cm8nwawcy0000dgek748d0iyh 200 in 3100ms
-+ GET /api/notifications 200 in 326ms
-+ GET /api/notifications 200 in 111ms
-+ GET /api/notifications 200 in 206ms
-+ GET /api/notifications 200 in 103ms
-+ GET /api/notifications 200 in 218ms
-+ GET /api/notifications 200 in 103ms
-+ GET /api/notifications 200 in 202ms
-+ GET /api/notifications 200 in 103ms
-+ GET /api/notifications 200 in 211ms
-+ GET /api/notifications 200 in 105ms
-+ GET /api/notifications 200 in 216ms
-+ GET /api/notifications 200 in 103ms
-+ ✓ Compiled in 3.5s (6247 modules)
-+ GET /home?debug=true&_rsc=1yv1g 200 in 272ms
-+ ○ Compiling /api/user-activity/[activityId] ...
-+ ✓ Compiled /api/user-activity/[activityId] in 1085ms (6238 modules)
-+ ✓ Compiled in 0ms (3252 modules)
-+ ✓ Compiled in 2s (6238 modules)
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params {
-+  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-+  searchParams: ''
-+}
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 4075ms
-+ PATCH /api/user-activity/cm8nwaxuv0005dgek9e79nnew 200 in 5244ms
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /home
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /home
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params { pathname: '/home', searchParams: 'debug=true' }
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /home?debug=true 200 in 4114ms
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params {
-+  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-+  searchParams: ''
-+}
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 143ms
-+ ○ Compiling /favicon.ico ...
-+ ✓ Compiled /api/user-info/profile in 1372ms (3280 modules)
-+ ✓ Compiled (3365 modules)
-+ GET /favicon.ico 200 in 3322ms
-+ GET /home?debug=true&_rsc=1yv1g 200 in 70ms
-+ GET /api/notifications 200 in 2833ms
-+ GET /api/user-info/profile 200 in 2857ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+[RouteTracker DEBUG] === STATE DUMP ===
-+[RouteTracker DEBUG] Path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] isSignedIn: undefined
-+[RouteTracker DEBUG] isLoaded: true
-+[RouteTracker DEBUG] profileLoading: true
-+[RouteTracker DEBUG] Zustand onboardingComplete: false
-+[RouteTracker DEBUG] userInfo exists: false
-+[RouteTracker DEBUG] ====================
-+[RouteTracker DEBUG] Checking exemption for path: /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map
-+[RouteTracker DEBUG] User is signed in: undefined
-+[RouteTracker DEBUG] Path exempt (standard): false
-+[RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+👋 DebugPanel: Component initialized
-+👋 DebugPanel: Current path and search params {
-+  pathname: '/_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map',
-+  searchParams: ''
-+}
-+👋 DebugPanel: Not rendering panel (isDebug is false)
-+ GET /_next/static/css/app/(dashboard)/(routes)/home/react-big-calendar.css.map 404 in 313ms
-+ GET /api/notifications 200 in 174ms
-+ GET /api/user-info/profile 200 in 212ms
-+ GET /api/user-info 200 in 3452ms
-+ GET /api/notifications 200 in 104ms
-+ GET /api/notifications 200 in 159ms
-+ GET /api/user-info/profile 200 in 262ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ ✓ Compiled /api/study-plan in 480ms (3367 modules)
-+ GET /api/user-info 200 in 690ms
-+ GET /api/study-plan 200 in 1096ms
-+ GET /api/user-info/profile 200 in 1014ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ GET /api/user-info 200 in 512ms
-+ GET /api/study-plan 200 in 228ms
-+ GET /api/user-info/profile 200 in 229ms
-+ GET /api/study-plan 200 in 123ms
-+ GET /api/user-info/profile 200 in 201ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ GET /api/user-info 200 in 591ms
-+ GET /api/study-plan 200 in 246ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ GET /api/user-info 200 in 491ms
-+ ○ Compiling /api/calendar-activity ...
-+ ✓ Compiled /api/user-activity in 798ms (3369 modules)
-+ ✓ Compiled (3376 modules)
-+ GET /api/calendar-activity 200 in 1356ms
-+cleaning up last activity
-+ GET /api/user-info/profile 200 in 1625ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ GET /api/calendar/exam-activities 200 in 1643ms
-+cleaning up last activity
-+ GET /api/subscription 200 in 1666ms
-+ GET /api/user-info 200 in 385ms
-+ GET /api/study-plan 200 in 152ms
-+ GET /api/calendar-activity 200 in 157ms
-+cleaning up last activity
-+ GET /api/user-info/profile 200 in 218ms
-+ POST /api/user-activity 200 in 1622ms
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+cleaning up last activity
-+ GET /api/calendar/exam-activities 200 in 415ms
-+ GET /api/study-plan 200 in 127ms
-+ GET /api/user-info 200 in 436ms
-+ GET /api/calendar-activity 200 in 227ms
-+cleaning up last activity
-+[DEBUG][API] RAW DATABASE RESPONSE: ["id","userId","devUserId","bio","updatedAt","apiCount","createdAt","score","clinicRooms","hasPaid","subscriptionType","diagnosticScores","firstName","profilePhoto","streak","notificationPreference","unlocks","onboardingInfo","patientRecord"]
-+ POST /api/user-activity 200 in 2169ms
-+ GET /api/user-info 200 in 362ms
-+ POST /api/user-activity 200 in 789ms
-+ GET /api/study-plan 200 in 106ms
-+ GET /api/study-plan 200 in 109ms
-+ POST /api/user-activity 200 in 1423ms
-+ POST /api/user-activity 200 in 890ms
-+ PATCH /api/user-activity/cm8nwf4t80006dgek2qc3i3nw 200 in 863ms
-+ GET /api/notifications 200 in 217ms
-+ GET /api/notifications 200 in 112ms
-+ GET /api/notifications 200 in 206ms
-+ GET /api/notifications 200 in 100ms
-diff --git a/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt b/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt
-new file mode 100644
-index 0000000000000000000000000000000000000000..20370d39baf3a533a6351aeb83efb58e1021b38c
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/3-FE-DebugConsole.txt
-@@ -0,0 +1,558 @@
-+initializationContentScript.js:1 Chrome storage API available, initializing emoji style sync
-+content.js:1 [Deprecation] Listener added for a 'DOMNodeInserted' mutation event. Support for this event type has been removed, and this event will no longer be fired. See https://chromestatus.com/feature/5083947249172480 for more information.
-+(anonymous) @ content.js:1
-+j @ jquery.js:2
-+fireWith @ jquery.js:2
-+ready @ jquery.js:2
-+I @ jquery.js:2
-+contentScript.js:2 Chrome storage API available, initializing emoji style sync
-+ [RouteTracker DEBUG] === STATE DUMP ===
-+ [RouteTracker DEBUG] Path: /home
-+ [RouteTracker DEBUG] isSignedIn: undefined
-+ [RouteTracker DEBUG] isLoaded: true
-+ [RouteTracker DEBUG] profileLoading: true
-+ [RouteTracker DEBUG] Zustand onboardingComplete: false
-+ [RouteTracker DEBUG] userInfo exists: false
-+ [RouteTracker DEBUG] ====================
-+ [RouteTracker DEBUG] Checking exemption for path: /home
-+ [RouteTracker DEBUG] User is signed in: undefined
-+ [RouteTracker DEBUG] Path exempt (standard): false
-+ [RouteTracker DEBUG] Calculated effectiveOnboardingComplete: false targetScore: undefined
-+ 👋 DebugPanel: Component initialized
-+ 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+ 👋 DebugPanel: Not rendering panel (isDebug is false)
-+ [DEBUG][StoreInitializer] Starting initialization...
-+ [DEBUG][StoreInitializer] Checking raw Zustand state:
-+ [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+ [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+ [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+ [RouteTracker DEBUG] isExemptPath changed to: false
-+ [RouteTracker DEBUG] Current path: /home
-+ [RouteTracker DEBUG] isSignedIn state: undefined
-+ [RouteTracker DEBUG] Effect 1 - isSignedIn: undefined has userInfo: false
-+ [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
-+ [RouteTracker DEBUG] Effect 2 - path: /home
-+ [RouteTracker DEBUG] Effect 2 - isSignedIn: undefined onboarding complete: false
-+ [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
-+ [DEBUG][StoreInitializer] Starting initialization...
-+ [DEBUG][StoreInitializer] Checking raw Zustand state:
-+ [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+ [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+ [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+ [MusicPlayer] Initializing audio context
-+ [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
-+ [MusicPlayer] Queue status: {initialized: false, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
-+ [MusicPlayer] Updating song queue for theme: cyberSpace
-+ [AudioSlice] Theme changed to cyberSpace wasPlaying: false
-+ 🎫 Subscription Status: FREE
-+ 👋 DebugPanel: URL debug parameter = true
-+ 👋 DebugPanel: Direct URL check = true http://localhost:3000/home?debug=true
-+ 👋 DebugPanel: Debug mode ENABLED
-+ 👋 DebugPanel: isDebug state = false
-+ [DEBUG][StoreInitializer] Starting initialization...
-+ [DEBUG][StoreInitializer] Checking raw Zustand state:
-+ [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+ [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+ [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+ [RouteTracker DEBUG] isExemptPath changed to: false
-+ [RouteTracker DEBUG] Current path: /home
-+ [RouteTracker DEBUG] isSignedIn state: undefined
-+ [RouteTracker DEBUG] Effect 1 - isSignedIn: undefined has userInfo: false
-+ [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
-+ [RouteTracker DEBUG] Effect 2 - path: /home
-+ [RouteTracker DEBUG] Effect 2 - isSignedIn: undefined onboarding complete: false
-+ [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
-+ [DEBUG][StoreInitializer] Starting initialization...
-+ [DEBUG][StoreInitializer] Checking raw Zustand state:
-+ [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+ [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+ [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+ [MusicPlayer] Initializing audio context
-+ [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
-+ [MusicPlayer] Queue status: {initialized: true, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
-+ [MusicPlayer] Updating song queue for theme: cyberSpace
-+ [AudioSlice] Theme changed to cyberSpace wasPlaying: false
-+ 🎫 Subscription Status: FREE
-+ 👋 DebugPanel: URL debug parameter = true
-+ 👋 DebugPanel: Direct URL check = true http://localhost:3000/home?debug=true
-+DebugPanel.tsx:39 👋 DebugPanel: Debug mode ENABLED
-+DebugPanel.tsx:52 👋 DebugPanel: isDebug state = false
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: undefined
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+musicplayer.tsx:104 [MusicPlayer] Initializing audio context
-+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
-+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: false, shouldUpdateQueue: true}
-+musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: mykonosBlue
-+audioSlice.ts:200 [AudioSlice] Theme changed to mykonosBlue wasPlaying: false
-+DebugPanel.tsx:52 👋 DebugPanel: isDebug state = true
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: undefined
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
-+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
-+index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-+index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-+musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
-+index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-+index.ts:122 COMBINED STATE KEYS: (116) ['masterVolume', 'isPlaying', 'currentMusic', 'currentLoop', 'audioContext', 'musicSource', 'loopSource', 'voiceSource', 'bufferCache', 'volume', 'currentSong', 'songQueue', 'currentSongIndex', 'masterGainNode', 'musicGainNode', 'sfxGainNode', 'loopGainNode', 'voiceGainNode', '_SOUND_MAPPINGS', '_isLoopLoading', '_pendingLoopName', '_isMusicLoading', '_pendingMusicTrack', '_lastPlayedSounds', '_soundDebounceTime', 'setSongQueue', 'getCurrentSongTitle', 'handleThemeChange', 'togglePlayPause', 'initializeAudioContext', 'setMasterVolume', 'setVolume', 'skipToNext', 'loadAudioBuffer', 'playMusic', 'stopMusic', 'playSound', 'playLoop', 'stopLoop', 'playVoice', 'stopVoice', 'window', 'currentRoute', 'theme', 'setWindowSize', 'setCurrentRoute', 'setTheme', 'patientsPerDay', 'streakDays', 'totalPatients', 'userLevel', 'userRooms', 'activeRooms', 'completeAllRoom', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'correctCount', 'testScore', 'userResponses', 'wrongCount', 'reportData', 'isClinicDataLoading', 'endGame', 'resetGameState', 'setActiveRooms', 'setCompleteAllRoom', 'setCorrectCount', 'setFlashcardRoomId', 'setIsFlashcardsOpen', 'setUserResponses', 'setTestScore', 'setTotalPatients', 'setWrongCount', 'setStreakDays', 'setUserRooms', 'startGame', 'unlockRoom', 'updateUserLevel', 'fetchClinicData', 'resetClinicData', 'performDailyCalculations', 'version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', …]
-+musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
-+musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
-+StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+StoreInitializer.tsx:83 [DEBUG][StoreInitializer] After initialization:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+script.debug.js:1 [Vercel Web Analytics] Debug mode is enabled by default in development. No requests will be sent to the server.
-+script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home?debug=true {o: 'http://localhost:3000/home?debug=true', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742871036249, …}
-+audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+RouteTracker.tsx:59 [RouteTracker DEBUG] Checking exemption for path: /home
-+RouteTracker.tsx:60 [RouteTracker DEBUG] User is signed in: true
-+RouteTracker.tsx:71 [RouteTracker DEBUG] Path exempt (standard): false
-+audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-+StoreInitializer.tsx:96 [DEBUG][StoreInitializer] User signed in, refreshing user info...
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+
-+                
-+          
-+          
-+          
-+         Chrome is moving towards a new experience that allows users to choose to browse without third-party cookies.
-+RouteTracker.tsx:174 [RouteTracker DEBUG] isExemptPath changed to: false
-+RouteTracker.tsx:175 [RouteTracker DEBUG] Current path: /home
-+RouteTracker.tsx:176 [RouteTracker DEBUG] isSignedIn state: true
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: false
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: false
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: false
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: false
-+RouteTracker.tsx:367 [AUTH DEBUG] Auth state changed but NOT from login button - no redirect
-+StoreInitializer.tsx:96 [DEBUG][StoreInitializer] User signed in, refreshing user info...
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:68 [DEBUG][StoreInitializer] No userInfo or onboardingInfo yet
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+audioSlice.ts:226 [AudioSlice] Not playing music after theme change
-+StoreInitializer.tsx:117 [DEBUG][StoreInitializer] Running secondary refresh...
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:117 [DEBUG][StoreInitializer] Running secondary refresh...
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: false
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: false
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for userState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingComplete', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (14) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version', 'coins', 'isSubscribed', 'profile', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'isProfileComplete']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+RouteTracker.tsx:79 [RouteTracker DEBUG] effectiveOnboardingComplete: true (direct onboardingComplete flag)
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
-+StoreInitializer.tsx:101 [DEBUG][StoreInitializer] After initial refresh:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+StoreInitializer.tsx:101 [DEBUG][StoreInitializer] After initial refresh:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+userSlice.ts:334 [DEBUG][UserStore] Starting refreshUserInfo
-+userSlice.ts:335 [DEBUG][UserStore] Current state keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: true
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+StoreInitializer.tsx:119 [DEBUG][StoreInitializer] After secondary refresh:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+StoreInitializer.tsx:119 [DEBUG][StoreInitializer] After secondary refresh:
-+StoreInitializer.tsx:28 [DEBUG][StoreInitializer] Checking raw Zustand state:
-+StoreInitializer.tsx:29 [DEBUG][StoreInitializer] Keys: (26) ['version', 'profile', 'profileLoading', 'isProfileComplete', 'completedSteps', 'studyPreferences', 'interfaceSettings', 'tutorialProgress', 'lastVisitedRoute', 'userInfo', 'isSubscribed', 'coins', 'statsLoading', 'error', 'updateProfile', 'setCompletedSteps', 'addCompletedStep', 'updateStudyPreferences', 'updateInterfaceSettings', 'updateTutorialProgress', 'setOnboardingComplete', 'setLastVisitedRoute', 'refreshUserInfo', 'setIsSubscribed', 'updateCoins', 'updateCoinsDisplay']
-+StoreInitializer.tsx:60 [DEBUG][StoreInitializer] ✅ No root-level onboardingComplete
-+StoreInitializer.tsx:65 [DEBUG][StoreInitializer] Nested onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-+userSlice.ts:372 [DEBUG][UserStore] Raw API response from /api/user-info: {id: 'cm8notvdl000pdg8ot2z1qfoz', userId: 'user_2umbBNpR47nyyHjhbMFvNBd8csC', devUserId: null, bio: 'Excited to ace the MCAT!', updatedAt: '2025-03-24T23:18:38.048Z', …}
-+userSlice.ts:373 [DEBUG][UserStore] API response keys: (20) ['id', 'userId', 'devUserId', 'bio', 'updatedAt', 'apiCount', 'createdAt', 'score', 'clinicRooms', 'hasPaid', 'subscriptionType', 'diagnosticScores', 'firstName', 'profilePhoto', 'streak', 'notificationPreference', 'unlocks', 'onboardingInfo', 'patientRecord', 'email']
-+userSlice.ts:393 [DEBUG][UserStore] Updating with these keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:418 [DEBUG][UserStore] Profile API response keys: (6) ['userId', 'firstName', 'bio', 'coins', 'profilePhoto', 'patientsCount']
-+userSlice.ts:446 [DEBUG][UserStore] Final updates object keys: (5) ['userInfo', 'statsLoading', 'profileLoading', 'error', 'version']
-+userSlice.ts:470 [DEBUG][UserStore] ✅ No root onboardingComplete after update
-+RouteTracker.tsx:37 [RouteTracker DEBUG] === STATE DUMP ===
-+RouteTracker.tsx:38 [RouteTracker DEBUG] Path: /home
-+RouteTracker.tsx:39 [RouteTracker DEBUG] isSignedIn: true
-+RouteTracker.tsx:40 [RouteTracker DEBUG] isLoaded: true
-+RouteTracker.tsx:41 [RouteTracker DEBUG] profileLoading: false
-+RouteTracker.tsx:42 [RouteTracker DEBUG] Zustand onboardingComplete: true
-+RouteTracker.tsx:43 [RouteTracker DEBUG] userInfo exists: true
-+RouteTracker.tsx:45 [RouteTracker DEBUG] userInfo.onboardingInfo: {gpa: 3.4, college: 'Non-Traditional', firstName: 'Dennis[FACEBOOK] ', isCanadian: false, currentStep: 4, …}
-+RouteTracker.tsx:47 [RouteTracker DEBUG] ====================
-+DebugPanel.tsx:12 👋 DebugPanel: Component initialized
-+DebugPanel.tsx:19 👋 DebugPanel: Current path and search params {pathname: '/home', searchParams: 'debug=true'}
-+DebugPanel.tsx:233 👋 DebugPanel: RENDERING PANEL!
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['currentRoute', 'theme', 'window']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for unknown state
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['coins', 'completedSteps', 'interfaceSettings', 'isProfileComplete', 'isSubscribed', 'lastVisitedRoute', 'onboardingInfo', 'profile', 'profileLoading', 'statsLoading', 'studyPreferences', 'tutorialProgress', 'userInfo']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for audioState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (13) ['audioContext', 'currentLoop', 'currentMusic', 'currentSong', 'currentSongIndex', 'currentSongTitle', 'gainNodes', 'isPlaying', 'masterVolume', 'queueLength', 'songQueue', 'sources', 'volume']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for gameState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (15) ['activeRooms', 'completeAllRoom', 'correctCount', 'currentUserTestId', 'flashcardRoomId', 'isFlashcardsOpen', 'isGameInProgress', 'patientsPerDay', 'streakDays', 'testScore', 'totalPatients', 'userLevel', 'userResponses', 'userRooms', 'wrongCount']
-+DebugPanel.tsx:91 👋 DebugPanel: stringifySorted called for vocabState
-+DebugPanel.tsx:175 👋 DebugPanel: Prepared object keys: (3) ['isCmdIEnabled', 'showVocabList', 'vocabList']
-+RouteTracker.tsx:221 [RouteTracker DEBUG] Effect 1 - isSignedIn: true has userInfo: true
-+RouteTracker.tsx:222 [RouteTracker DEBUG] Effect 1 - onboardingComplete: true
-+RouteTracker.tsx:244 [RouteTracker DEBUG] Effect 2 - path: /home
-+RouteTracker.tsx:245 [RouteTracker DEBUG] Effect 2 - isSignedIn: true onboarding complete: true
-+RouteTracker.tsx:246 [RouteTracker DEBUG] Effect 2 - Zustand onboardingComplete: true
-diff --git a/README_Docs/tasks/user-dennis/3-TestData-PrismaInstructions.md b/README_Docs/tasks/user-dennis/3-TestData-PrismaInstructions.md
-new file mode 100644
-index 0000000000000000000000000000000000000000..83b2917a2a01f4cdb7fc229d66d26a85f2ef404a
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/3-TestData-PrismaInstructions.md
-@@ -0,0 +1,20 @@
-+## UserInfo
-+
-+**userId**: user_2rFXhmeHNzY3irm9HShrGMGMY3M
-+
-+
-+---- Completed Onboarding (routes to /home) ----
-+*paste this into prisma*
-+
-+**onboardingInfo**: 
-+```json
-+{"gpa":3.8,"college":"University of California-Los Angeles","isCanadian":false,"currentStep":7,"targetScore":526,"hasNotTakenMCAT":false,"targetMedSchool":"UCLA","currentMcatScore":515,"isNonTraditional":false,"mcatAttemptNumber":"1","onboardingComplete":true}
-+```
-+
-+---- User Without Completed Onboarding (routes to /onboarding) ----
-+*paste this into prisma*
-+
-+**onboardingInfo**: 
-+```json
-+{"gpa":3.8,"college":"University of California-Los Angeles","isCanadian":false,"currentStep":4,"targetScore":null,"hasNotTakenMCAT":false,"targetMedSchool":"UCLA","currentMcatScore":515,"isNonTraditional":false,"mcatAttemptNumber":"1","onboardingComplete":false}
-+```
-\ No newline at end of file
-diff --git a/README_Docs/tasks/user-dennis/3-pr-diff.txt b/README_Docs/tasks/user-dennis/3-pr-diff.txt
-deleted file mode 100644
-index 76a30fd1cafb7736cfb8f250a1c258eca070aa96..0000000000000000000000000000000000000000
---- a/README_Docs/tasks/user-dennis/3-pr-diff.txt
-+++ /dev/null
-@@ -1,3774 +0,0 @@
--diff --git a/.cursor/rules/state-management.mdc b/.cursor/rules/state-management.mdc
--new file mode 100644
--index 0000000000000000000000000000000000000000..a2e6b96e76aff28ef1c07725b2b5d6653ae4e990
----- /dev/null
--+++ b/.cursor/rules/state-management.mdc
--@@ -0,0 +1,47 @@
--+---
--+description: 
--+globs: 
--+alwaysApply: true
--+---
--+---
--+name: State Management Patterns
--+description: Guidelines for accessing store state and actions in components
--+globs: ["**/*.tsx", "**/*.ts"]
--+alwaysApply: true
--+---
--+
--+### State Management Patterns
--+
--+#### Store Access
--+Always use the consolidated selector pattern from `@/store/selectors.ts` instead of directly importing from slice files.
--+
--+✅ Correct: Use consolidated selectors
--+```typescript
--+import { useUI, useUser, useAudio } from '@/store/selectors';
--+
--+const MyComponent = () => {
--+  const { theme } = useUI();
--+  const { isSubscribed } = useUser();
--+  const { playSound, stopLoop } = useAudio();
--+  
--+  // Component implementation
--+};
--+```
--+
--+❌ Incorrect: Direct imports from slice files
--+```typescript
--+import { useUIStore } from '@/store/slices/uiSlice';
--+import { useUserStore } from '@/store/slices/userSlice';
--+import { useAudioStore } from '@/store/slices/audioSlice';
--+
--+const MyComponent = () => {
--+  const theme = useUIStore(state => state.theme);
--+  const isSubscribed = useUserStore(state => state.isSubscribed);
--+  const playSound = useAudioStore(state => state.playSound);
--+  
--+  // Component implementation
--+};
--+```
--+
--+#### Exception: Store Initialization Components
--+The only exception to this pattern is in components specifically designed for store initialization (e.g., `StoreInitializer.tsx`), where direct access to store actions may be required.
--diff --git a/.cursorrules b/.cursorrules
--deleted file mode 100644
--index e5ce9fd85fcb3a53d58eebbc398b787b63b6c829..0000000000000000000000000000000000000000
----- a/.cursorrules
--+++ /dev/null
--@@ -1,207 +0,0 @@
---# =====================
---# CURSOR AI GUIDELINES
---# =====================
---
---# Load developer configuration
---LOAD_CONFIG: |
---  const devConfig = require('./README_Docs/config/developer.json');
---  const DEVELOPER_NAME = devConfig.DEVELOPER_NAME;
---  const technical = require('./README_Docs/architecture/technical.md');
---  const architecture = require('./README_Docs/architecture/architecture.md');
---
---SYSTEM_CONTEXT: |
---  You are a senior developer working on the MYMCAT TypeScript/Next.js project.
---  
---  # Documentation Hierarchy
---  1. Primary Documentation:
---     - technical.md: Source of truth for coding standards
---     - architecture.md: System design and patterns
---     - tasks/${DEVELOPER_NAME}/tasks.md: Current tasks
---     - tasks/${DEVELOPER_NAME}/status.md: Progress tracking
---
---  2. Implementation Requirements:
---     - Follow section headers from technical.md
---     - Use animation patterns from technical.md
---     - Implement feature gates per architecture.md
---     - Follow component organization rules
---
---  3. Before ANY Code Changes:
---     - PARSE technical.md for relevant patterns
---     - VERIFY against architecture.md
---     - CHECK current task context
---     - VALIDATE component structure
---
---# Enforce Technical Standards
---ENFORCE_TECHNICAL: |
---  On every query:
---  1. Load technical.md section standards
---  2. Apply animation patterns
---  3. Follow component organization
---  4. Use proper section headers
---  5. Implement proper loading states
---  6. Follow markdown code block standards
---
---# Enforce Architectural Patterns
---ENFORCE_ARCHITECTURE: |
---  On every component:
---  1. Verify premium feature gates
---  2. Check component dependencies
---  3. Follow data flow patterns
---  4. Implement proper auth checks
---
---# Error Prevention
---VALIDATION_RULES: |
---  Before responding to any query:
---  1. Load and parse technical.md completely
---  2. Check section dividers (100 dashes)
---  3. Validate heading hierarchy
---  4. Ensure code blocks follow documentation rules
---  5. Verify file paths in examples
---
---# File Management Rules
---ON_FILE_CHANGE: |
---  Required actions after code changes:
---  1. VERIFY premium feature gates implementation
---  2. CHECK README_Docs/architecture/architecture.md compliance
---  3. UPDATE personal status.md with:
---     - Current progress
---     - Any blockers
---     - Completed items
---  4. VALIDATE against technical.md specifications
---  5. VERIFY task progress
---  6. NEVER modify package-lock.json directly
---
---# Package Management Rules
---PACKAGE_GUIDELINES: |
---  - Never manually edit package-lock.json
---  - Use npm install for adding new packages
---  - Commit both package.json and package-lock.json together
---  - Report conflicts in package-lock.json to team lead
---  - Run npm ci for clean installs
---  - Contact Josh for dependency updates
---
---# Code Style Reference
---CODE_STYLE_RULES: |
---  All code style, formatting, and organization rules are defined in technical.md:
---  - Component Structure
---  - Section Headers (100 characters)
---  - Import Standards
---  - Route-Component Relationships
---  - Component Naming
---  - File Organization
---  - Animation Patterns
---  - Error Handling
---  
---  Always parse technical.md before implementing any component or feature.
---
---  Component Template Requirements:
---  1. Import Order:
---     - React/Next.js
---     - External libraries
---     - Internal utilities/types
---     - Internal components
---  
---  2. Section Headers:
---     - Must be 100 characters wide
---     - Must follow standard order
---     - Constants/Types outside component
---  
---  3. Component Structure:
---     - Default export
---     - CamelCase naming
---     - Props interface with Types section
---
---# Architecture Understanding
---READ_ARCHITECTURE: |
---  File: README_Docs/architecture/architecture.md
---  Required parsing:
---  1. Load and parse Mermaid diagram focusing on:
---     - Auth -> Onboarding flow
---     - Feature Gates system
---     - Free vs Premium features
---     - Game systems
---     - Data collection flow
---  2. Extract and understand:
---     - Premium vs Free feature boundaries
---     - Clerk Auth integration points
---     - Data flow patterns
---     - Component dependencies
---  3. Validate changes against architectural constraints
---  4. Ensure proper feature gating
---
---# Task Management
---TASK_WORKFLOW: |
---  Required files:
---  - README_Docs/tasks/user-${DEVELOPER_NAME}/tasks.md
---  - README_Docs/tasks/user-${DEVELOPER_NAME}/status.md
---  - README_Docs/architecture/technical.md
---  
---  Workflow steps:
---  1. READ personal tasks.md:
---     - Parse requirements
---     - Check premium feature implications
---     - Identify dependencies
---  
---  2. VALIDATE against architecture.md:
---     - Verify feature gate compliance
---     - Check component interactions
---     - Confirm Clerk Auth integration
---  
---  3. UPDATE personal status.md:
---     - Track progress
---     - Document blockers
---     - Note premium feature considerations
---
---# Feature Gate Implementation
---PREMIUM_FEATURES: |
---  # AI Behavior for Premium Features
---  1. Source of Truth:
---     - Load feature definitions from "Feature Control" section in technical.md
---     - Follow implementation patterns from "Feature Gates" section
---     - Reference component examples from technical.md
---  
---  2. Validation Requirements:
---     - Verify component against documented feature gate patterns
---     - Ensure proper hook usage (useSubscriptionStatus) as shown in examples
---     - Confirm implementation matches technical.md specifications
---     
---  3. Documentation Requirements:
---     - Reference "Free Features" and "Premium Features" sections in technical.md
---     - Link to relevant implementation examples
---     - Keep implementation aligned with documentation
---
---  4. Response Guidelines:
---     - Always cite specific sections from technical.md
---     - Point developers to relevant code examples
---     - Ensure responses align with documented patterns
---
---# Technical Documentation Parser
---PARSE_TECHNICAL_MD: |
---  1. Section Hierarchy:
---     - Parse h1 (#) for main document title
---     - Parse h2 (##) for major sections
---     - Parse h3 (###) for subsections
---     - Parse h4 (####) for detailed guidelines
---  
---  2. Special Sections:
---     - Always validate Feature Control section for premium gates
---     - Check Component Guidelines for structure requirements
---     - Verify Documentation Guidelines for formatting rules
---
---# Component Structure Enforcement
---ENFORCE_COMPONENT_STRUCTURE: |
---  For all .tsx files:
---  1. Verify file header comment
---  2. Check import order against technical.md standards
---  3. Validate section headers match technical.md template
---  4. Ensure premium feature gates are implemented
---  5. Check component naming conventions
---
---# Documentation Standards
---DOCUMENTATION_RULES: |
---  For all .md files:
---  1. Verify proper markdown link syntax
---  2. Check code block formatting
---  3. Validate section dividers
---  4. Ensure proper heading hierarchy
---  5. Check for complete examples in guidelines
--\ No newline at end of file
--diff --git a/.eslintrc.json b/.eslintrc.json
--index a6ce61be266dcce75550cf2e383a77edd5d289ab..346aa0c75f86a3d47901ea282152e7fc47c4538b 100644
----- a/.eslintrc.json
--+++ b/.eslintrc.json
--@@ -23,7 +23,8 @@
--       }
--     ],
--     "import/no-unused-modules": ["warn", {
---      "unusedExports": true
--+      "unusedExports": true,
--+      "ignoreExports": ["**/api/**/*"]
--     }],
--     "@typescript-eslint/adjacent-overload-signatures": "warn",
--     "@typescript-eslint/ban-ts-comment": "warn",
--@@ -37,7 +38,7 @@
--     "@typescript-eslint/no-misused-new": "warn",
--     "@typescript-eslint/no-namespace": "warn",
--     "@typescript-eslint/no-non-null-asserted-optional-chain": "warn",
---    "@typescript-eslint/no-non-null-assertion": "warn",
--+    "@typescript-eslint/no-non-null-assertion": "off",
--     "@typescript-eslint/no-this-alias": "warn",
--     "@typescript-eslint/no-var-requires": "warn",
--     "@typescript-eslint/prefer-as-const": "warn",
--diff --git a/README_Docs/tasks/user-dennis/1-tasks-all.md b/README_Docs/tasks/user-dennis/1-tasks-all.md
--new file mode 100644
--index 0000000000000000000000000000000000000000..af0e6d753f3e19e666328d95a059335c89d65863
----- /dev/null
--+++ b/README_Docs/tasks/user-dennis/1-tasks-all.md
--@@ -0,0 +1,128 @@
--+# Features:
--+[ ] Talking to kalypso - better UI - waveform shows - when talking to Kalypso AI 
--+[ ] 
--+
--+
--+
--+---
--+
--+# Tech Debt:
--+
--+## Update Cursor Rules
--+[ ] .mdc - cursor rules - update to always use zustand not context API - also consider rules when creating a new state in a component? should multiple components have access to it? consider global state. 
--+[ ] when creating new global state - make sure our DebugPanel renders it too.
--+
--+### Unmigrated Content from .cursorrules
--+Content from .cursorrules that hasn't been migrated to .mdc files yet:
--+
--+#### Documentation Hierarchy
--+```markdown
--+# Documentation Hierarchy
--+1. Primary Documentation:
--+   - technical.md: Source of truth for coding standards
--+   - architecture.md: System design and patterns
--+   - tasks/${DEVELOPER_NAME}/tasks.md: Current tasks
--+   - tasks/${DEVELOPER_NAME}/status.md: Progress tracking
--+
--+2. Implementation Requirements:
--+   - Follow section headers from technical.md
--+   - Use animation patterns from technical.md
--+   - Implement feature gates per architecture.md
--+   - Follow component organization rules
--+
--+3. Before ANY Code Changes:
--+   - PARSE technical.md for relevant patterns
--+   - VERIFY against architecture.md
--+   - CHECK current task context
--+   - VALIDATE component structure
--+```
--+
--+#### Premium Features / Feature Gates
--+```markdown
--+# Feature Gate Implementation
--+1. Source of Truth:
--+   - Load feature definitions from "Feature Control" section in technical.md
--+   - Follow implementation patterns from "Feature Gates" section
--+   - Reference component examples from technical.md
--+
--+2. Validation Requirements:
--+   - Verify component against documented feature gate patterns
--+   - Ensure proper hook usage (useSubscriptionStatus) as shown in examples
--+   - Confirm implementation matches technical.md specifications
--+   
--+3. Documentation Requirements:
--+   - Reference "Free Features" and "Premium Features" sections in technical.md
--+   - Link to relevant implementation examples
--+   - Keep implementation aligned with documentation
--+```
--+
--+#### Architecture Understanding
--+```markdown
--+# Architecture Understanding
--+Required parsing:
--+1. Load and parse Mermaid diagram focusing on:
--+   - Auth -> Onboarding flow
--+   - Feature Gates system
--+   - Free vs Premium features
--+   - Game systems
--+   - Data collection flow
--+2. Extract and understand:
--+   - Premium vs Free feature boundaries
--+   - Clerk Auth integration points
--+   - Data flow patterns
--+   - Component dependencies
--+3. Validate changes against architectural constraints
--+4. Ensure proper feature gating
--+```
--+
--+#### Package Management
--+```markdown
--+# Package Management Rules
--+- Never manually edit package-lock.json
--+- Use npm install for adding new packages
--+- Commit both package.json and package-lock.json together
--+- Report conflicts in package-lock.json to team lead
--+- Run npm ci for clean installs
--+- Contact Josh for dependency updates
--+```
--+
--+#### Error Prevention & Documentation Standards
--+```markdown
--+# Error Prevention
--+Before responding to any query:
--+1. Load and parse technical.md completely
--+2. Check section dividers (100 dashes)
--+3. Validate heading hierarchy
--+4. Ensure code blocks follow documentation rules
--+5. Verify file paths in examples
--+
--+# Documentation Standards
--+For all .md files:
--+1. Verify proper markdown link syntax
--+2. Check code block formatting
--+3. Validate section dividers
--+4. Ensure proper heading hierarchy
--+5. Check for complete examples in guidelines
--+```
--+
--+#### File Management Rules
--+```markdown
--+# File Management Rules
--+Required actions after code changes:
--+1. VERIFY premium feature gates implementation
--+2. CHECK README_Docs/architecture/architecture.md compliance
--+3. UPDATE personal status.md with:
--+   - Current progress
--+   - Any blockers
--+   - Completed items
--+4. VALIDATE against technical.md specifications
--+5. VERIFY task progress
--+```
--+
--+[x] Create component-guidelines.mdc and state-management.mdc files
--+[ ] Migrate remaining content from .cursorrules to appropriate .mdc files
--+[ ] Delete .cursorrules file after migration is complete
--+
--+## Bugs
--+[ ] CARS Suite - take out sound when you select answer. (Prynce bug)
--+
--diff --git a/README_Docs/tasks/user-dennis/2-single-task-steps.md b/README_Docs/tasks/user-dennis/2-single-task-steps.md
--new file mode 100644
--index 0000000000000000000000000000000000000000..8e4907140e215b0b37cc1e2b1ff447b01ef25dac
----- /dev/null
--+++ b/README_Docs/tasks/user-dennis/2-single-task-steps.md
--@@ -0,0 +1 @@
--+### Branch TODO:
--diff --git a/store/slices/vocalSlice.ts b/README_Docs/tasks/user-dennis/3-pr-diff.txt
--similarity index 100%
--rename from store/slices/vocalSlice.ts
--rename to README_Docs/tasks/user-dennis/3-pr-diff.txt
--index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..cabc2379a6319719cbd31e5a69406b233be68402 100644
--diff --git a/README_Docs/tasks/user-dennis/4-debug-console.txt b/README_Docs/tasks/user-dennis/4-debug-console.txt
--new file mode 100644
--index 0000000000000000000000000000000000000000..b21b8195ed13cb7f9ccc5a0a96f3333808b4d360
----- /dev/null
--+++ b/README_Docs/tasks/user-dennis/4-debug-console.txt
--@@ -0,0 +1,106 @@
--+initializationContentScript.js:1 Chrome storage API available, initializing emoji style sync
--+content.js:1 [Deprecation] Listener added for a 'DOMNodeInserted' mutation event. Support for this event type has been removed, and this event will no longer be fired. See https://chromestatus.com/feature/5083947249172480 for more information.
--+(anonymous) @ content.js:1
--+j @ jquery.js:2
--+fireWith @ jquery.js:2
--+ready @ jquery.js:2
--+I @ jquery.js:2
--+contentScript.js:2 Chrome storage API available, initializing emoji style sync
--+
--+                
--+          
--+          
--+          
--+         Chrome is moving towards a new experience that allows users to choose to browse without third-party cookies.
--+script.debug.js:1 [Vercel Web Analytics] Debug mode is enabled by default in development. No requests will be sent to the server.
--+script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/ {o: 'http://localhost:3000/', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742417480019, …}
--+hot-reloader-client.tsx:297 [Fast Refresh] rebuilding
--+hot-reloader-client.tsx:74 [Fast Refresh] done in 19811ms
--+script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/sign-in {o: 'http://localhost:3000/sign-in', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742417512522, …}
--+ui-common_a52944_5.57.0.js:1 🔒 Clerk:
--+The <SignIn/> component cannot render when a user is already signed in, unless the application allows multiple sessions. Since a user is signed in and this application only allows a single session, Clerk is redirecting to the `afterSignIn` URL instead.
--+(This notice only appears in development)
--+script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home {o: 'http://localhost:3000/home', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742417516507, …}
--+musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: false, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--+musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: sakuraTrees
--+audioSlice.ts:193 [AudioSlice] Theme changed to sakuraTrees wasPlaying: false
--+layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
--+musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--+musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: sakuraTrees
--+audioSlice.ts:193 [AudioSlice] Theme changed to sakuraTrees wasPlaying: false
--+layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
--+musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--+musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
--+musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--+musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--+audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--+audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--+hot-reloader-client.tsx:297 [Fast Refresh] rebuilding
--+purchase-button.tsx:52 Attempting MD_GOLD purchase... {productType: 'md_gold', isSubscribed: true}
--+purchase-button.tsx:58 User is already subscribed, redirecting to manage subscription
--+contentInt.js:1 
--+            
--+            
--+           GET http://localhost:3000/api/stripe 400 (Bad Request)
--+e.class.n.value.t.send @ contentInt.js:1
--+dispatchXhrRequest @ xhr.js:195
--+xhr @ xhr.js:15
--+dispatchRequest @ dispatchRequest.js:51
--+_request @ Axios.js:173
--+request @ Axios.js:40
--+Axios.<computed> @ Axios.js:199
--+wrap @ bind.js:5
--+handlePurchase @ purchase-button.tsx:59
--+onClick @ purchase-button.tsx:174
--+callCallback @ react-dom.development.js:20565
--+invokeGuardedCallbackImpl @ react-dom.development.js:20614
--+invokeGuardedCallback @ react-dom.development.js:20689
--+invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:20703
--+executeDispatch @ react-dom.development.js:32128
--+processDispatchQueueItemsInOrder @ react-dom.development.js:32160
--+processDispatchQueue @ react-dom.development.js:32173
--+dispatchEventsForPlugins @ react-dom.development.js:32184
--+eval @ react-dom.development.js:32374
--+batchedUpdates$1 @ react-dom.development.js:24953
--+batchedUpdates @ react-dom.development.js:28844
--+dispatchEventForPluginEventSystem @ react-dom.development.js:32373
--+dispatchEvent @ react-dom.development.js:30141
--+dispatchDiscreteEvent @ react-dom.development.js:30112
--+ChatContainer.tsx:117 [ChatContainer] KeyDown: Meta repeat: false cmdPressedRef: false
--+ChatContainer.tsx:121 [ChatContainer] Setting cmdPressedRef to true
--+ChatContainer.tsx:117 [ChatContainer] KeyDown: Shift repeat: false cmdPressedRef: true
--+ChatContainer.tsx:128 [ChatContainer] Combo detected, clearing cmdPressedTime
--+purchase-button.tsx:52 Attempting MD_GOLD purchase... {productType: 'md_gold', isSubscribed: true}
--+purchase-button.tsx:58 User is already subscribed, redirecting to manage subscription
--+contentInt.js:1 
--+            
--+            
--+           GET http://localhost:3000/api/stripe 400 (Bad Request)
--+e.class.n.value.t.send @ contentInt.js:1
--+dispatchXhrRequest @ xhr.js:195
--+xhr @ xhr.js:15
--+dispatchRequest @ dispatchRequest.js:51
--+_request @ Axios.js:173
--+request @ Axios.js:40
--+Axios.<computed> @ Axios.js:199
--+wrap @ bind.js:5
--+handlePurchase @ purchase-button.tsx:59
--+onClick @ purchase-button.tsx:174
--+callCallback @ react-dom.development.js:20565
--+invokeGuardedCallbackImpl @ react-dom.development.js:20614
--+invokeGuardedCallback @ react-dom.development.js:20689
--+invokeGuardedCallbackAndCatchFirstError @ react-dom.development.js:20703
--+executeDispatch @ react-dom.development.js:32128
--+processDispatchQueueItemsInOrder @ react-dom.development.js:32160
--+processDispatchQueue @ react-dom.development.js:32173
--+dispatchEventsForPlugins @ react-dom.development.js:32184
--+eval @ react-dom.development.js:32374
--+batchedUpdates$1 @ react-dom.development.js:24953
--+batchedUpdates @ react-dom.development.js:28844
--+dispatchEventForPluginEventSystem @ react-dom.development.js:32373
--+dispatchEvent @ react-dom.development.js:30141
--+dispatchDiscreteEvent @ react-dom.development.js:30112
--diff --git a/README_Docs/tasks/user-dennis/5-cursor-notes.md b/README_Docs/tasks/user-dennis/5-cursor-notes.md
--new file mode 100644
--index 0000000000000000000000000000000000000000..909495f5285da102e6fbf353f81bb494e9b96ea1
----- /dev/null
--+++ b/README_Docs/tasks/user-dennis/5-cursor-notes.md
--@@ -0,0 +1,33 @@
--+## Cursor Notes
--+
--+#### Prompts
--+` Do not apply code changes, just analyze the codebase and write out your steps to 2-single-task-steps.md`
--+
--+#### Compare functionality to main
--+To thoroughly evaluate whether our branch behaves functionally the same as main, use both approaches:
--+1. Add main branch to worktree for direct file comparison:
--+```bash
--+# Add main branch as a worktree for comparison
--+git worktree add main
--+# When finished with comparison
--+git worktree remove main
--+```
--+
--+2. Create a diff file for Cursor analysis:
--+```bash
--+# Generate detailed diff against main
--+git diff --full-index main -- > README_Docs/tasks/user-dennis/3-pr-diff.txt
--+```
--+
--+3. Working with Cursor:
--+Prompt to use for comparison
--+
--+```
--+Carefully examine both the diff against main @3-pr-diff.txt and our `main` branch repo itself, which was added to our worktree @main 
--+Evaluate whether our branch behaves and acts functionally the SAME as main.
--+```
--+
--+Having both the worktree and diff file available provides:
--+- Direct access to main branch files for inspection
--+- A comprehensive diff that Cursor can analyze
--+- The ability to verify functional equivalence with confidence
--\ No newline at end of file
--diff --git a/README_Docs/tasks/user-dennis/tasks.md b/README_Docs/tasks/user-dennis/tasks.md
--deleted file mode 100644
--index e2e1eaca7220ce90137d26ef9962411f472192f6..0000000000000000000000000000000000000000
----- a/README_Docs/tasks/user-dennis/tasks.md
--+++ /dev/null
--@@ -1,36 +0,0 @@
---TODO: 
---
---
---## Store Migration Progress
---[✓] Implemented audioSlice (complete)
---[✓] Implemented uiSlice (complete)
---[ ] Implement userSlice (files created but not implemented)
---[✓ ] Implement gameSlice (files created but not implemented)
---[ ] Implement vocabSlice (files created but not implemented)
---[ ] CARS Suite - take out sound when you select answer. (Prynce bug)
---
---
-------
---## Cursor Notes
---
---#### Prompts
---` Do not apply code changes, just analyze the issue and respond to the question`
---
---#### Add new branch to worktree
---add new branch for Cursor to compare: 
---`git worktree add localstate-compare`
---
---remove it before pushing back up 
---`git worktree remove localstate-compare`
---
---#### Create diff file for Cursor
---
---To create a detailed diff against `main` with context:
---```
---git diff --full-index main > branch-diff-full.diff
---```
---
---To feed the diff back into Cursor:
---1. Create the diff file
---2. Open the diff file in Cursor
---3. Ask Cursor to analyze the changes
--\ No newline at end of file
--diff --git a/app/(auth)/(routes)/onboarding/components/GoldSubscriptionCard.tsx b/app/(auth)/(routes)/onboarding/components/GoldSubscriptionCard.tsx
--index 1d975e1c3809df4a6e0297b0c8e2803349719cce..8afe0a691181f7c9190d33221e8b542c04c536e8 100644
----- a/app/(auth)/(routes)/onboarding/components/GoldSubscriptionCard.tsx
--+++ b/app/(auth)/(routes)/onboarding/components/GoldSubscriptionCard.tsx
--@@ -36,6 +36,7 @@ export function GoldSubscriptionCard({ context }: { context: 'onboarding' | 'off
-- 
--   const checkTrialEligibility = async () => {
--     try {
--+      // Instead of checking with Stripe, we check our internal trial eligibility
--       const response = await axios.get('/api/subscription/check-trial-eligibility');
--       setIsTrialEligible(response.data.isEligible);
--       
--@@ -52,7 +53,7 @@ export function GoldSubscriptionCard({ context }: { context: 'onboarding' | 'off
--   const handleStartTrial = async () => {
--     try {
--       setLocalLoading(true);
---      // Check eligibility first
--+      // Check eligibility first using our internal API
--       const response = await axios.get('/api/subscription/check-trial-eligibility');
--       if (!response.data.isEligible) {
--         toast.error("You're not eligible for a free trial at this time");
--@@ -60,8 +61,8 @@ export function GoldSubscriptionCard({ context }: { context: 'onboarding' | 'off
--         return;
--       }
--       
---      // Start the trial
---      const trialResponse = await axios.post('/api/subscription/start-trial');
--+      // Start the trial using our internal API
--+      const trialResponse = await axios.post('/api/user/start-trial');
--       if (trialResponse.data.success) {
--         toast.success("Your 14-day free trial has started!");
--         router.push('/examcalendar');
--@@ -79,26 +80,29 @@ export function GoldSubscriptionCard({ context }: { context: 'onboarding' | 'off
--   const handleAction = async () => {
--     try {
--       setIsLoading(true);
--+      console.log("GoldSubscriptionCard: handleAction initiated", { 
--+        isGold,
--+        context
--+      });
-- 
--       if (isGold) {
---        // Manage existing subscription
---        const response = await axios.get("/api/stripe");
---        window.location.href = response.data.url;
---        return
--+        // Manage existing subscription - redirect to pricing instead of Stripe portal
--+        console.log("User is Gold member, redirecting to manage subscription");
--+        router.push('/pricing');
--+        return;
--       }
--       
--       if (context === 'onboarding') {
--         // Show the pricing page with more options
--+        console.log("Onboarding context, redirecting to pricing page");
--         router.push('/pricing');
--       } else {
---        // Direct checkout for gold
---        const response = await axios.post("/api/stripe/checkout", {
---          productType: "gold"
---        });
---        window.location.href = response.data.url;
--+        // Direct to pricing page instead of Stripe checkout
--+        console.log("Offer context, redirecting to pricing");
--+        router.push('/pricing');
--       }
--     } catch (error) {
---      console.error("Error:", error);
--+      console.error("Error in handleAction:", error);
--       toast.error("Failed to load page. Please try again.");
--     } finally {
--       setIsLoading(false);
--@@ -107,6 +111,11 @@ export function GoldSubscriptionCard({ context }: { context: 'onboarding' | 'off
-- 
--   return (
--     <div 
--+      onClick={() => {
--+        if (!isGold) {
--+          router.push('/pricing');
--+        }
--+      }}
--       className={`relative h-full group transform transition-all duration-200 hover:scale-[1.02] cursor-pointer
--         ${isGold ? 'before:absolute before:inset-0 before:bg-gradient-to-br before:from-amber-400/10 before:via-yellow-400/5 before:to-amber-400/10 before:rounded-lg border-2 border-amber-300' : ''}`}
--     >
--diff --git a/app/api/stripe/checkout/route.ts b/app/api/stripe/checkout/route.ts
--index 80e97a6c12d3d3392e1f887659bdfbc5bc62bc8a..236d0d0ee1db1106ca7c5b2f26f15a349fdf4bce 100644
----- a/app/api/stripe/checkout/route.ts
--+++ b/app/api/stripe/checkout/route.ts
--@@ -24,59 +24,8 @@ export async function POST(request: Request) {
--     }
-- 
--     const body = await request.json();
---    // Extract isTrial parameter
---    const isTrial = body.isTrial || false;
--     const priceType = body.priceType as ProductType;
--     const isSpecialStatus = body.isSpecialStatus || false;
---    
---    // If user is trying to start a trial, check eligibility first
---    if (isTrial) {
---      // Check if the user has had a subscription or trial before
---      const userInfo = await prismadb.userInfo.findUnique({
---        where: { userId }
---      });
---      
---      const userSubscription = await prismadb.userSubscription.findUnique({
---        where: { userId }
---      });
---      
---      // If user has had any subscription before, they're not eligible
---      if (userInfo?.subscriptionType && userInfo.subscriptionType !== "None") {
---        return new NextResponse(
---          JSON.stringify({ 
---            error: "You've already had a subscription and are not eligible for a trial" 
---          }), 
---          { status: 400 }
---        );
---      }
---      
---      // If they have a subscription record, check with Stripe
---      if (userSubscription?.stripeCustomerId) {
---        try {
---          // Look for trial history in Stripe
---          const subscriptions = await stripe.subscriptions.list({
---            customer: userSubscription.stripeCustomerId,
---            limit: 100,
---            status: 'all'
---          });
---          
---          // Check if any subscription has trial_start, indicating they've had a trial
---          const hadTrialBefore = subscriptions.data.some(sub => sub.trial_start !== null);
---          
---          if (hadTrialBefore) {
---            return new NextResponse(
---              JSON.stringify({ 
---                error: "You've already had a trial subscription" 
---              }), 
---              { status: 400 }
---            );
---          }
---        } catch (error) {
---          console.error("Error checking subscription history:", error);
---          // If we can't check, we'll allow them to continue
---        }
---      }
---    }
-- 
--     // Make body parsing optional with default values
--     let friendEmail: string | undefined;
--@@ -89,111 +38,6 @@ export async function POST(request: Request) {
--       // If JSON parsing fails, we'll just use the default values
--     }
-- 
---    // If there's a valid friend email, create UserInfo with bonus score instead of checkout
---    if (friendEmail?.trim()) {
---      const user = await currentUser();
---      if (!user) {
---        return new NextResponse("User not found", { status: 404 });
---      }
---
---      const userEmail = user.emailAddresses[0]?.emailAddress;
---
---      // Check if user exists
---      const existingUser = await prismadb.userInfo.findUnique({
---        where: { userId }
---      });
---
---      if (!existingUser) {
---        return new NextResponse("User not found. Please complete onboarding first.", { status: 404 });
---      }
---
---      // Update existing user
---      const userInfo = await prismadb.userInfo.update({
---        where: { userId },
---        data: {
---          score: {
---            increment: 5, // Add 5 to the existing score
---          },
---        },
---      });
---
---      // Handle referral logic
---      if (user) {
---        let referrerName: string | undefined;
---
---        referrerName = userInfo?.firstName || user.firstName || "A friend";
---
---        // Send both welcome and referral emails
---        await Promise.all([
---          sendWelcomeEmail(referrerName, userEmail),
---          sendReferralEmail(referrerName, friendEmail),
---        ]);
---
---        try {
---          await prismadb.referral.create({
---            data: {
---              userId,
---              referrerName: user.fullName ?? "Unknown",
---              referrerEmail: userEmail ?? "",
---              friendEmail,
---            },
---          });
---
---          const REFERRAL_REWARD = 10;
---          // Update joinedAt and friendUserId for all referrals if friendUserId is null
---          await prismadb.referral.updateMany({
---            where: {
---              friendEmail: userEmail,
---              friendUserId: null
---            },
---            data: {
---              joinedAt: new Date(),
---              friendUserId: userId
---            }
---          });
---
---          // Get the oldest referral record for this userEmail
---          const referral = await prismadb.referral.findFirst({
---            where: {
---              friendEmail: userEmail
---            },
---            orderBy: {
---              createdAt: 'asc'
---            }
---          })
---
---          if (referral) {
---            // Referral user get REFERRAL_REWARD coins
---            const referralUserId = referral.userId;
---
---            if (referralUserId !== userId) {
---              await prismadb.userInfo.update({
---                where: { userId: referralUserId },
---                data: {
---                  score: {
---                    increment: REFERRAL_REWARD
---                  }
---                }
---              })
---            }
---          }
---        } catch (error) {
---          console.error("Error creating referral:", error);
---          // Continue execution even if referral creation fails
---        }
---      }
---
---      // Return success response for referred users with redirect URL
---      return NextResponse.json(
---        {
---          success: true,
---          message: "User setup completed with referral bonus",
---          url: `${process.env.NEXT_PUBLIC_APP_URL}/home`,
---        },
---        { headers: corsHeaders }
---      );
---    }
---
--     // If no friend email, proceed with regular Stripe checkout
--     let priceId: string;
--     let productType: ProductType = ProductType.COINS_10; // Default product type
--@@ -232,15 +76,12 @@ export async function POST(request: Request) {
--           break;
--         case ProductType.COINS_10:
--         default:
---          priceId = process.env.STRIPE_PRICE_ID!;
--+          priceId = process.env.STRIPE_PRICE_ID!; // Default to 10 coins if invalid type
--       }
--     } else {
--       priceId = process.env.STRIPE_PRICE_ID!; // Default to 10 coins if invalid type
--     }
-- 
---    // Set trial period days for subscription products if requested
---    const trialPeriodDays = isTrial && mode === 'subscription' ? 14 : undefined;
---
--     const stripeSession = await stripe.checkout.sessions.create({
--       success_url: absoluteUrl("/home?payment=success"),
--       cancel_url: absoluteUrl("/home?payment=cancelled"),
--@@ -248,9 +89,6 @@ export async function POST(request: Request) {
--       mode: mode,
--       billing_address_collection: "auto",
--       client_reference_id: userId,
---      subscription_data: trialPeriodDays ? {
---        trial_period_days: trialPeriodDays
---      } : undefined,
--       metadata: {
--         userId: userId,
--         productType: productType,
--@@ -259,8 +97,7 @@ export async function POST(request: Request) {
--           priceId === process.env.STRIPE_PRICE_GOLD_ID ? 'MDGold' :
--           priceId === process.env.STRIPE_PRICE_GOLD_ANNUAL_ID || priceId === process.env.STRIPE_PRICE_GOLD_ANNUAL_DISCOUNT_ID ? 'MDGoldAnnual' :
--           priceId === process.env.STRIPE_PRICE_GOLD_BIANNUAL_ID || priceId === process.env.STRIPE_PRICE_GOLD_BIANNUAL_DISCOUNT_ID ? 'MDGoldBiannual' : 'one_time_purchase'
---        ) : 'one_time_purchase',
---        isTrial: isTrial ? 'true' : 'false'
--+        ) : 'one_time_purchase'
--       },
--       line_items: [
--         {
--@@ -274,7 +111,6 @@ export async function POST(request: Request) {
--       userId,
--       mode,
--       productType,
---      isTrial,
--       metadata: stripeSession.metadata
--     });
-- 
--diff --git a/app/api/subscription/check-trial-eligibility/route.ts b/app/api/subscription/check-trial-eligibility/route.ts
--index 62884d99f2e82289c8a479a452483038024d43c8..401b61de2e2f082bd20dcc9c3ef2a3c8f6e8a7b6 100644
----- a/app/api/subscription/check-trial-eligibility/route.ts
--+++ b/app/api/subscription/check-trial-eligibility/route.ts
--@@ -1,6 +1,5 @@
-- import { NextResponse } from "next/server";
-- import prismadb from "@/lib/prismadb";
---import { stripe } from "@/lib/stripe";
-- import { auth } from "@clerk/nextjs/server";
-- 
-- export async function GET() {
--@@ -24,6 +23,7 @@ export async function GET() {
--     }
-- 
--     // User is only eligible if they've never had any subscription status
--+    // This matches main branch logic but without checking Stripe history
--     const isEligible = !userInfo.subscriptionType || userInfo.subscriptionType === "";
--     const reason = isEligible 
--       ? "New user" 
--diff --git a/app/api/webhook/clerk/route.ts b/app/api/webhook/clerk/route.ts
--index adfe2227cac46e278a436e37cf4a7ce918ba7155..2165ba9ef8e04160892070dc88499967e20157c1 100644
----- a/app/api/webhook/clerk/route.ts
--+++ b/app/api/webhook/clerk/route.ts
--@@ -22,7 +22,7 @@ export async function POST(req: Request) {
--       status: 400
--     });
--   }
---
--+i
--   try {
--     // Get the body
--     const payload = await req.json();
--diff --git a/components/RouteTracker.tsx b/components/RouteTracker.tsx
--index 76a2738f71962de9bc7eba9a4b6f0149114605cd..bf8a1b1b2efabd341bbad112e5a29a828a799526 100644
----- a/components/RouteTracker.tsx
--+++ b/components/RouteTracker.tsx
--@@ -2,9 +2,7 @@
-- 
-- import { useEffect, useState } from 'react';
-- import { usePathname, useRouter, useSearchParams } from 'next/navigation';
---import { useUI, useUser } from '@/store/selectors';
---import { useAudioStore } from '@/store/slices/audioSlice';
---import { OnboardingInfo } from '@/types';
--+import { useUI, useUser, useAudio } from '@/store/selectors';
-- import { useUser as useClerkUser } from '@clerk/nextjs';
-- 
-- /**
--@@ -20,8 +18,7 @@ const RouteTracker = () => {
--   const { userInfo, isSubscribed, onboardingComplete, profileLoading, statsLoading } = useUser();
--   const { isSignedIn } = useClerkUser();
--   const [initialLoadComplete, setInitialLoadComplete] = useState(false);
---  const stopLoop = useAudioStore(state => state.stopLoop);
---  const currentLoop = useAudioStore(state => state.currentLoop);
--+  const { stopLoop, currentLoop } = useAudio();
-- 
--   // Handle immediate redirection for users with no userInfo
--   useEffect(() => {
--@@ -39,7 +36,7 @@ const RouteTracker = () => {
--     // If user is signed in but has no userInfo, redirect to onboarding immediately
--     if (isSignedIn && !profileLoading && !userInfo) {
--       // Only allow exempt paths to proceed without redirection
---      if (!exemptPaths.some(path => pathname.startsWith(path))) {
--+      if (pathname && !exemptPaths.some(path => pathname.startsWith(path))) {
--         router.push('/onboarding');
--       }
--     }
--@@ -50,7 +47,6 @@ const RouteTracker = () => {
--     if (pathname) {
--       setCurrentRoute(pathname);
-- 
---      // Define exempt paths that should never redirect to onboarding
--       const exemptPaths = [
--         '/auth',
--         '/api',
--@@ -61,7 +57,6 @@ const RouteTracker = () => {
--         '/register'
--       ];
-- 
---      // Skip remaining redirection checks for exempt paths
--       if (exemptPaths.some(path => pathname.startsWith(path))) {
--         return;
--       }
--@@ -74,7 +69,13 @@ const RouteTracker = () => {
--       if (isSignedIn && !profileLoading && pathname !== '/onboarding') {
--         if (!onboardingComplete) {
--           router.push('/onboarding');
---          return;
--+          
--+          // Fallback for critical redirects
--+          const fallbackTimeout = setTimeout(() => {
--+            window.location.href = '/onboarding';
--+          }, 2000);
--+          
--+          return () => clearTimeout(fallbackTimeout);
--         }
--       }
--     }
--@@ -82,23 +83,19 @@ const RouteTracker = () => {
-- 
--   // Handle ambient sound cleanup on route changes
--   useEffect(() => {    
---    // Only stop the ambient loop if we're not in AnkiClinic and it's currently playing
--     if (currentLoop === 'flashcard-loop-catfootsteps' && !pathname?.startsWith('/ankiclinic')) {
--       console.log('[RouteTracker] Stopping ambient loop - route changed to:', pathname);
--       stopLoop();
--     }
---  }, [pathname]); // Only depend on pathname changes, not currentLoop
--+  }, [pathname, currentLoop, stopLoop]);
-- 
--   // Track when initial loading is complete - skip for onboarding
--   useEffect(() => {
---    // Skip loading state tracking if we're on onboarding
--     if (pathname === '/onboarding') {
--       setInitialLoadComplete(true);
--       return;
--     }
-- 
---    // Consider data loaded when both profile and stats are loaded
---    // and we have userInfo data
--     if (!profileLoading && !statsLoading && userInfo && !initialLoadComplete) {
--       setInitialLoadComplete(true);
--     }
--@@ -106,16 +103,8 @@ const RouteTracker = () => {
-- 
--   // Handle redirection logic
--   useEffect(() => {
---    // Skip redirection checks if we're on onboarding
---    if (pathname === '/onboarding') {
---      return;
---    }
---
---    // Only proceed if we have user info, a valid pathname, and initial loading is complete
---    // IMPORTANT: Also check if the user is signed in before redirecting
---    if (!userInfo || !pathname || !initialLoadComplete || !isSignedIn) {
---      return;
---    }
--+    if (pathname === '/onboarding') return;
--+    if (!userInfo || !pathname || !initialLoadComplete || !isSignedIn) return;
-- 
--     const checkRedirectPath = async () => {
--       // Check for debug mode in query parameters
--@@ -129,19 +118,16 @@ const RouteTracker = () => {
--         return;
--       }
-- 
---      // 1. Redirect to onboarding if user has not completed onboarding
--+      // 1. Redirect to onboarding if not complete
--       if (!onboardingComplete) {
--         router.push('/onboarding');
--         
--         // Fallback for critical redirects
--         const fallbackTimeout = setTimeout(() => {
--           window.location.href = '/onboarding';
---        }, 2000); // 2 second timeout
--+        }, 2000);
--         
---        // Clear timeout if component unmounts
--         return () => clearTimeout(fallbackTimeout);
---        
---        return;
--       }
-- 
--       // 2. Redirect non-gold users to ankiclinic
--@@ -151,40 +137,39 @@ const RouteTracker = () => {
--         // Fallback for critical redirects
--         const fallbackTimeout = setTimeout(() => {
--           window.location.href = '/ankiclinic';
---        }, 2000); // 2 second timeout
--+        }, 2000);
--         
---        // Clear timeout if component unmounts
--         return () => clearTimeout(fallbackTimeout);
---        
---        return;
--       }
-- 
---      // 3. Check if gold user needs study plan (skip for exempt paths)
---      // Match main branch exempt paths
---      const studyPlanExemptPaths = ['/examcalendar', '/api', '/auth', '/onboarding', '/redirect'];
--+      // 3. Check if gold user needs study plan
--+      const studyPlanExemptPaths = [
--+        '/examcalendar',
--+        '/api',
--+        '/auth',
--+        '/onboarding',
--+        '/redirect'
--+      ];
--       const shouldCheckStudyPlan = !studyPlanExemptPaths.some(path => pathname.startsWith(path));
--       
--       if (isSubscribed && shouldCheckStudyPlan) {
--         try {
--           const response = await fetch('/api/study-plan');
--           
---          // Add response validation like main branch
--           if (!response.ok) {
--             throw new Error('Failed to fetch study plan');
--           }
--           
--           const data = await response.json();
--           
---          // Redirect to examcalendar if no study plan
--           if (!data.studyPlan) {
--             router.push('/examcalendar');
--             
---            // Add fallback for critical redirects
--+            // Fallback for critical redirects
--             const fallbackTimeout = setTimeout(() => {
--               window.location.href = '/examcalendar';
---            }, 2000); // 2 second timeout
--+            }, 2000);
--             
---            // Clear timeout if component unmounts
--             return () => clearTimeout(fallbackTimeout);
--           }
--         } catch (error) {
--@@ -194,10 +179,6 @@ const RouteTracker = () => {
--     };
-- 
--     checkRedirectPath();
---    
---    // onboardingComplete is critical in this dependency array
---    // When it changes (via store updates), this effect re-runs and ensures
---    // the user is redirected correctly based on their current onboarding status
--   }, [pathname, router, userInfo, isSubscribed, onboardingComplete, initialLoadComplete, isSignedIn, searchParams]);
-- 
--   return null;
--diff --git a/components/ScoreDialog.tsx b/components/ScoreDialog.tsx
--index 9b34eaa96896485c9d76429a3de6e48eb87f0055..d22260e5fcaafb79b1b5b144a846594c81611416 100644
----- a/components/ScoreDialog.tsx
--+++ b/components/ScoreDialog.tsx
--@@ -1,12 +1,12 @@
-- //components/ScoreDialog.tsx
-- 'use client';
---import React, { useEffect, useRef, useState } from 'react';
--+import React, { useEffect, useRef, useState, useCallback } from 'react';
-- import { Star } from 'lucide-react';
-- import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from "@/components/ui/dialog";
-- import { useRouter } from 'next/navigation'; 
-- import Link from 'next/link';
---import Image from 'next/image'; // Added import
---import { useAudio } from '@/store/selectors'; // Replace useAudioManager
--+import Image from 'next/image';
--+import { useAudio } from '@/store/selectors';
-- 
-- interface ScoreDialogProps {
--   open: boolean;
--@@ -39,74 +39,131 @@ const ScoreDialog: React.FC<ScoreDialogProps> = ({
--   const [timingStars, setTimingStars] = useState(0);
--   const [techniqueStars, setTechniqueStars] = useState(0);
--   const router = useRouter();
---  const audio = useAudio(); // Replace useAudioManager
--+  const audio = useAudio();
--+  
--+  // Track animation intervals for cleanup
--+  const intervalsRef = useRef<Array<NodeJS.Timeout>>([]);
--+  // Track animation values in refs to reduce renders
--+  const currentScoreRef = useRef(0);
--+  const animationCompleteRef = useRef(false);
--+  // Flag to ensure sound is played only once
--+  const soundPlayedRef = useRef(false);
--+  // Dialog previous state 
--+  const wasOpenRef = useRef(false);
-- 
---  useEffect(() => {
---    if (open) {
---      // Play appropriate sound based on score
---      if (score === 100) {
---        audio.playSound('fanfare');
---      } else if (score >= 60) {
---        audio.playSound('levelup');
---      } else {
---        audio.playSound('sadfanfare');
---      }
--+  // Memoized cleanup function
--+  const cleanupIntervals = useCallback(() => {
--+    intervalsRef.current.forEach(interval => clearInterval(interval));
--+    intervalsRef.current = [];
--+  }, []);
-- 
---      // Animate the score percentage
---      let currentScore = 0;
---      const scoreInterval = setInterval(() => {
---        if (currentScore < score) {
---          currentScore += 1;
---          setAnimatedScore(currentScore);
---        } else {
---          clearInterval(scoreInterval);
--+  // Play sound once when dialog opens
--+  useEffect(() => {
--+    // Only play sound when the dialog first opens
--+    if (open && !wasOpenRef.current && !soundPlayedRef.current) {
--+      soundPlayedRef.current = true;
--+      
--+      // Use setTimeout to ensure sound isn't played immediately during render loop
--+      setTimeout(() => {
--+        // Double check the flag hasn't changed
--+        if (soundPlayedRef.current && open) {
--+          // Play appropriate sound based on score
--+          if (score === 100) {
--+            audio.playSound('fanfare');
--+          } else if (score >= 60) {
--+            audio.playSound('levelup');
--+          } else {
--+            audio.playSound('sadfanfare');
--+          }
--         }
---      }, 20);
--+      }, 100);
--+    }
--+    
--+    // Reset sound played flag when dialog closes
--+    if (!open && wasOpenRef.current) {
--+      soundPlayedRef.current = false;
--+    }
--+    
--+    // Update previous state
--+    wasOpenRef.current = open;
--+  }, [open, score, audio]);
-- 
---      // Animate stars for score
---      let currentScoreStars = 0;
---      const targetScoreStars = getStarCount(score);
---      const scoreStarsInterval = setInterval(() => {
---        if (currentScoreStars < targetScoreStars) {
---          currentScoreStars += 0.1;
---          setScoreStars(currentScoreStars);
---        } else {
---          clearInterval(scoreStarsInterval);
---        }
---      }, 50);
--+  useEffect(() => {
--+    // Reset values when dialog opens
--+    if (open) {
--+      animationCompleteRef.current = false;
--+      currentScoreRef.current = 0;
--+      setAnimatedScore(0);
--+      setScoreStars(0);
--+      setTimingStars(0);
--+      setTechniqueStars(0);
-- 
---      // Animate stars for timing
---      let currentTimingStars = 0;
---      const targetTimingStars = getTimingStars(totalTimeTaken, totalQuestions);
---      const timingStarsInterval = setInterval(() => {
---        if (currentTimingStars < targetTimingStars) {
---          currentTimingStars += 0.1;
---          setTimingStars(currentTimingStars);
---        } else {
---          clearInterval(timingStarsInterval);
---        }
---      }, 50);
--+      // Create all animations at once with a single timeout
--+      setTimeout(() => {
--+        // Handle all animations after a brief delay
--+        startAnimations();
--+      }, 300);
--+    }
-- 
---      // Animate stars for technique
---      let currentTechniqueStars = 0;
---      const targetTechniqueStars = getTechniqueStars(technique);
---      const techniqueStarsInterval = setInterval(() => {
---        if (currentTechniqueStars < targetTechniqueStars) {
---          currentTechniqueStars += 0.1;
---          setTechniqueStars(currentTechniqueStars);
---        } else {
---          clearInterval(techniqueStarsInterval);
---        }
---      }, 50);
--+    return () => {
--+      cleanupIntervals();
--+    };
--+  }, [open, cleanupIntervals, totalTimeTaken, totalQuestions, technique]);
-- 
---      return () => {
---        clearInterval(scoreInterval);
---        clearInterval(scoreStarsInterval);
---        clearInterval(timingStarsInterval);
---        clearInterval(techniqueStarsInterval);
---      };
---    }
---  }, [open, score, audio]);
--+  // Function to start all animations
--+  const startAnimations = () => {
--+    if (animationCompleteRef.current) return;
--+    
--+    cleanupIntervals(); // Clear any existing intervals
--+    
--+    // Calculate target values
--+    const targetScore = score;
--+    const targetScoreStars = getStarCount(score);
--+    const targetTimingStars = getTimingStars(totalTimeTaken, totalQuestions);
--+    const targetTechniqueStars = getTechniqueStars(technique);
--+    
--+    // Use a single animation frame for all animations
--+    let frameCount = 0;
--+    const totalFrames = 15; // Complete all animations in 15 frames
--+    
--+    const animationInterval = setInterval(() => {
--+      frameCount++;
--+      
--+      if (frameCount >= totalFrames) {
--+        // Final frame - set exact values
--+        setAnimatedScore(targetScore);
--+        setScoreStars(targetScoreStars);
--+        setTimingStars(targetTimingStars);
--+        setTechniqueStars(targetTechniqueStars);
--+        animationCompleteRef.current = true;
--+        cleanupIntervals();
--+        return;
--+      }
--+      
--+      // Calculate progress (0 to 1)
--+      const progress = frameCount / totalFrames;
--+      
--+      // Update all values based on progress
--+      const newScore = Math.floor(targetScore * progress);
--+      const newScoreStars = targetScoreStars * progress;
--+      const newTimingStars = targetTimingStars * progress;
--+      const newTechniqueStars = targetTechniqueStars * progress;
--+      
--+      // Only update state if the value has changed significantly
--+      if (Math.abs(newScore - currentScoreRef.current) >= 5) {
--+        currentScoreRef.current = newScore;
--+        setAnimatedScore(newScore);
--+      }
--+      
--+      setScoreStars(newScoreStars);
--+      setTimingStars(newTimingStars);
--+      setTechniqueStars(newTechniqueStars);
--+      
--+    }, 100); // 100ms per frame, ~1.5 seconds total animation
--+    
--+    // Store interval for cleanup
--+    intervalsRef.current.push(animationInterval);
--+  };
-- 
--   const getStarCount = (score: number) => {
--     if (score === 100) return 3;
--diff --git a/components/StoreInitializer.tsx b/components/StoreInitializer.tsx
--index f069d69db98090edc13beb96fef5d28f95a86c62..8f93c948910eda3c2f3cbb4c5907ce3b783b10d1 100644
----- a/components/StoreInitializer.tsx
--+++ b/components/StoreInitializer.tsx
--@@ -1,8 +1,8 @@
-- "use client";
-- 
-- import { useEffect } from 'react';
---import { useUser } from '@clerk/nextjs';
---import { useStore } from '@/store/store';
--+import { useUser as useClerkUser } from '@clerk/nextjs';
--+import { useUser } from '@/store/selectors';
-- import { useAudioStore } from '@/store/slices/audioSlice';
-- import { initializeGlobalStore } from '@/store';
-- 
--@@ -17,21 +17,23 @@ import { initializeGlobalStore } from '@/store';
--  * It doesn't render anything visible, just handles initialization.
--  */
-- const StoreInitializer = () => {
---  const { isLoaded, isSignedIn } = useUser();
---  const refreshUserInfo = useStore(state => state.refreshUserInfo);
--+  const { isLoaded, isSignedIn } = useClerkUser();
--+  const { refreshUserInfo } = useUser();
--   const initializeAudioContext = useAudioStore(state => state.initializeAudioContext);
--   
--   // Initialize the global store when the app starts
--   useEffect(() => {
---    // Initialize audio context
---    initializeAudioContext().catch(error => {
---      console.error('[StoreInitializer] Error initializing audio context:', error);
---    });
--+    if (typeof window === 'undefined') return;
--     
---    // Initialize global store (will be expanded as we add more slices)
--+    // Initialize global store
--     initializeGlobalStore().catch(error => {
--       console.error('[StoreInitializer] Error initializing global store:', error);
--     });
--+    
--+    // Initialize audio context
--+    initializeAudioContext().catch(error => {
--+      console.error('[StoreInitializer] Error initializing audio context:', error);
--+    });
--   }, [initializeAudioContext]);
--   
--   // Refresh user information when the user is signed in
--diff --git a/components/pricing/options/SoftwareSection.tsx b/components/pricing/options/SoftwareSection.tsx
--index aa2451d7d08af36fdd19f0612319b1b6e1939698..783287eeea784384d5aee54193c8fee0431387f5 100644
----- a/components/pricing/options/SoftwareSection.tsx
--+++ b/components/pricing/options/SoftwareSection.tsx
--@@ -1,6 +1,6 @@
-- import { CustomVideo } from "../CustomVideo";
-- import Image from "next/image";
---import { useState, useEffect } from "react";
--+import { useState } from "react";
-- import axios from "axios";
-- import { toast } from "react-hot-toast";
-- import { ProductType } from "@/types";
--@@ -28,8 +28,6 @@ const SoftwareSection = ({
-- }: SoftwareSectionProps) => {
--   /* ---- State ----- */
--   const [showTestimonials, setShowTestimonials] = useState(false);
---  const [localLoading, setLocalLoading] = useState(false);
---  const [isTrialEligible, setIsTrialEligible] = useState(true);
--   const { isTrialing, isCanceled } = useSubscriptionStatus();
-- 
--   /* ---- Helper Methods ----- */
--@@ -59,76 +57,11 @@ const SoftwareSection = ({
--     }
--   };
-- 
---  /* ---- Animations & Effects --- */
---  useEffect(() => {
---    // Check trial eligibility when component mounts and user is available
---    if (user?.id) {
---      checkTrialEligibility();
---    }
---  }, [user?.id]);
---
--   /* ---- Event Handlers ----- */
--   const handlePeriodSelection = (period: 'monthly' | 'biannual' | 'annual') => {
--     setPricingPeriod(period);
--   };
-- 
---  const checkTrialEligibility = async () => {
---    try {
---      const response = await axios.get('/api/subscription/check-trial-eligibility');
---      setIsTrialEligible(response.data.isEligible);
---      
---      if (!response.data.isEligible) {
---        console.log("User not eligible for trial:", response.data.reason);
---      }
---    } catch (error) {
---      console.error("Error checking trial eligibility:", error);
---      // Default to eligible if we can't check
---      setIsTrialEligible(true);
---    }
---  };
---
---  // Handle starting a free trial
---  const handleStartTrial = async () => {
---    try {
---      // Check eligibility first
---      const response = await axios.get('/api/subscription/check-trial-eligibility');
---      if (!response.data.isEligible) {
---        toast.error("You're not eligible for a free trial");
---        return;
---      }
---      
---      setLocalLoading(true);
---      
---      const userId = user?.id;
---      
---      if (!userId) {
---        // If not authenticated, redirect to sign-up with return URL
---        const returnUrl = encodeURIComponent(window.location.pathname);
---        window.location.href = `/sign-up?redirect_url=${returnUrl}`;
---        return;
---      }
---
---      // Map pricing period to the correct product type
---      const priceType = pricingPeriod === 'monthly' ? ProductType.MD_GOLD :
---                       pricingPeriod === 'annual' ? ProductType.MD_GOLD_ANNUAL :
---                       ProductType.MD_GOLD_BIANNUAL;
---
---      // Pass trial=true to the API
---      const checkoutResponse = await axios.post("/api/stripe/checkout", {
---        priceType: priceType,
---        isSpecialStatus: isSpecialStatus,
---        isTrial: true
---      });
---      
---      window.location.href = checkoutResponse.data.url;
---    } catch (error) {
---      console.error("Error:", error);
---      toast.error("Failed to start trial");
---    } finally {
---      setLocalLoading(false);
---    }
---  };
---
--   /* ---- Render Methods ----- */
--   return (
--     <div className="mt-8">
--@@ -147,9 +80,6 @@ const SoftwareSection = ({
--             <p className="text-white/60 text-sm mt-1">
--               ${getMonthlyPrice(pricingPeriod)}/month for comprehensive MCAT prep
--             </p>
---            <div className="mt-2 inline-flex items-center justify-center bg-blue-500/20 text-blue-300 px-3 py-1 rounded-full text-sm font-medium">
---              New 14-day free trial! ✨
---            </div>
--           </div>
-- 
--           <div className="flex flex-col md:flex-row">
--@@ -348,7 +278,7 @@ const SoftwareSection = ({
--                     </button>
--                   </div>
-- 
---                  {/* Upgrade button - Shows first */}
--+                  {/* Upgrade button */}
--                   <button
--                     onClick={handleUpgradeClick}
--                     className="w-full relative overflow-hidden bg-gradient-to-r from-amber-400 via-yellow-500 to-amber-500 text-black py-3 rounded-lg font-semibold 
--@@ -365,27 +295,6 @@ const SoftwareSection = ({
--                   >
--                     {isLoading ? 'Processing...' : `Get Gold ${pricingPeriod === 'monthly' ? 'Monthly' : pricingPeriod === 'biannual' ? 'Bi-Annual' : 'Annual'}`}
--                   </button>
---
---                  {/* Trial button - Only show if eligible, now appears below Gold button */}
---                  {isTrialEligible &&(
---                    <div className="space-y-2 mt-24">
---                      <button
---                        onClick={handleStartTrial}
---                        className="w-full relative overflow-hidden bg-gradient-to-r from-blue-500 to-blue-600 text-white py-3 rounded-lg font-semibold 
---                          transition-all duration-300
---                          hover:from-blue-400 hover:to-blue-700
---                          hover:shadow-[0_0_20px_rgba(59,130,246,0.5)]
---                          hover:scale-[1.02] hover:-translate-y-0.5
---                          active:scale-[0.98] active:shadow-[0_0_15px_rgba(59,130,246,0.4)]
---                          before:absolute before:content-[''] before:top-0 before:left-0 before:w-full before:h-full 
---                          before:bg-gradient-to-r before:from-transparent before:via-blue-200/10 before:to-transparent
---                          before:translate-x-[-100%] hover:before:translate-x-[100%] before:transition-transform before:duration-700"
---                        disabled={localLoading}
---                      >
---                        {localLoading ? 'Processing...' : 'Start 14-Day Free Trial'}
---                      </button>
---                    </div>
---                  )}
--                 </>
--               )}
--             </div>
--diff --git a/components/purchase-button.tsx b/components/purchase-button.tsx
--index 5e021add595fb9bb35c4d1b328af2ac2bd106394..5f65601f656ea9d17deb7bcd84a4dc6973e96e50 100644
----- a/components/purchase-button.tsx
--+++ b/components/purchase-button.tsx
--@@ -8,6 +8,7 @@ import axios from "axios";
-- import { useState, useEffect } from "react";
-- import { toast } from "react-hot-toast";
-- import Image from "next/image";
--+import { useRouter } from "next/navigation";
-- import { useUserInfo } from "@/hooks/useUserInfo";
-- import { cn } from "@/lib/utils";
-- 
--@@ -31,6 +32,7 @@ export function PurchaseButton({
--   const [loadingStates, setLoadingStates] = useState<Record<string, boolean>>({});
--   const [isModalOpen, setIsModalOpen] = useState(autoOpen);
--   const { isSubscribed, isLoading } = useUserInfo();
--+  const router = useRouter();
-- 
--   useEffect(() => {
--     setIsModalOpen(autoOpen);
--@@ -49,21 +51,24 @@ export function PurchaseButton({
--       setLoadingStates(prev => ({ ...prev, [productType]: true }));
--       
--       if (productType === ProductType.MD_GOLD) {
---        if (isSubscribed) {
---          const response = await axios.get("/api/stripe");
---          window.location.href = response.data.url;
---          return;
---        }
---        window.location.href = '/pricing';
--+        console.log("Redirecting to pricing page for MD Gold subscription");
--+        router.push('/pricing');
--         return;
--       }
-- 
--+      console.log("Initiating checkout for product type:", productType);
--       const response = await axios.post("/api/stripe/checkout", {
--         priceType: productType
--       });
--+      console.log("Checkout response:", response.data);
--       window.location.href = response.data.url;
---    } catch (error) {
---      console.error("Error:", error);
--+    } catch (error: any) {
--+      console.error("Error during purchase:", error);
--+      // Log more details if available
--+      if (error.response) {
--+        console.error("Error response data:", error.response.data);
--+        console.error("Error response status:", error.response.status);
--+      }
--       toast.error("Failed to initiate purchase. Please try again.");
--     } finally {
--       setLoadingStates(prev => ({ ...prev, [productType]: false }));
--diff --git a/components/ui/DebugPanel.tsx b/components/ui/DebugPanel.tsx
--index 6cdc43ac44354a32168255b2a5af87c9aa919c11..a73fa72c3df9c67cff6d8e59d27ab167e78d6e01 100644
----- a/components/ui/DebugPanel.tsx
--+++ b/components/ui/DebugPanel.tsx
--@@ -2,7 +2,7 @@
-- 
-- import { useState, useEffect } from 'react';
-- import { usePathname, useSearchParams } from 'next/navigation';
---import { useUI, useUser, useGame, useAudio } from '@/store/selectors'
--+import { useUI, useUser, useGame, useAudio, useVocab } from '@/store/selectors'
-- 
-- /* --- Constants ----- */
-- const DEBUG_PARAM = 'debug'
--@@ -18,6 +18,7 @@ const DebugPanel = () => {
--   const userState = useUser()
--   const gameState = useGame()
--   const audioState = useAudio()
--+  const vocabState = useVocab()
-- 
--   /* --- Effects --- */
--   // Simple debug mode logic - only use URL parameter
--@@ -96,6 +97,11 @@ const DebugPanel = () => {
--           <h4 className="font-bold">User State</h4>
--           <pre>{JSON.stringify(userState, null, 2)}</pre>
--         </div>
--+        <hr className="border-white/30 my-2" />
--+        <div>
--+          <h4 className="font-bold">Vocab State</h4>
--+          <pre>{JSON.stringify(vocabState, null, 2)}</pre>
--+        </div>
--       </div>
--     </div>
--   )
--diff --git a/hooks/useOnboardingInfo.ts b/hooks/useOnboardingInfo.ts
--index 98f9c34265e89fdbb165fd1ad584e38ebdabc7b5..62517567e251a1c5ee3ff3ec1fdb726350752020 100644
----- a/hooks/useOnboardingInfo.ts
--+++ b/hooks/useOnboardingInfo.ts
--@@ -1,4 +1,4 @@
---import { useState, useEffect, useCallback } from 'react';
--+import { useState, useEffect } from 'react';
-- import { OnboardingInfo } from '@/types';
-- import { toast } from 'react-hot-toast';
-- import { useRouter } from 'next/navigation';
--@@ -74,63 +74,52 @@ export function useOnboardingInfo() {
-- 
--         // Set the step once we've determined the correct one
--         setCurrentStep(targetStep);
--+
--       } catch (error) {
--         console.error('Error fetching onboarding info:', error);
--+        toast.error('Failed to load your progress');
--       }
--     };
-- 
--     fetchOnboardingInfo();
---  }, [router, onboardingComplete, setOnboardingComplete]);
--+  }, [onboardingComplete, router, setOnboardingComplete]);
-- 
--+  // Update onboarding info in the database
--   const updateOnboardingInfo = async (updates: Partial<OnboardingInfo>) => {
--     try {
--       const response = await fetch('/api/user-info/onboarding', {
---        method: 'PUT',
--+        method: 'PATCH',
--         headers: { 'Content-Type': 'application/json' },
---        body: JSON.stringify(updates),
--+        body: JSON.stringify(updates)
--       });
-- 
--       if (!response.ok) throw new Error('Failed to update onboarding info');
-- 
--       const updatedInfo = await response.json();
---
---      // Update local state
--       setOnboardingInfo(updatedInfo);
--+
--+      // Update current step if provided
--       if (updates.currentStep && isValidStep(updates.currentStep)) {
--         setCurrentStep(updates.currentStep);
--       }
-- 
--       return updatedInfo;
--     } catch (error) {
---      console.error('[updateOnboardingInfo] Error:', error);
--+      console.error('Error updating onboarding info:', error);
--       throw error;
--     }
--   };
-- 
---  const handleNameSubmit = async (firstName: string) => {
--+  // Step submission handlers
--+  const handleNameSubmit = async (data: { firstName: string }) => {
--     try {
---      // Force create a new user info record
---      const response = await fetch("/api/user-info", {
---        method: "POST",
---        headers: { "Content-Type": "application/json" },
---        body: JSON.stringify({ firstName }),
---      });
---
---      if (!response.ok) throw new Error("Failed to create user info");
---
---      const data = await response.json();
---
---      // Store referral redemption status
---      localStorage.setItem('mymcat_show_redeem_referral_modal', data.referralRedeemed ? 'true' : 'false');
---
---      // Update onboarding info with fresh data
--       await updateOnboardingInfo({
---        firstName,
--+        ...data,
--         currentStep: ONBOARDING_STEPS.COLLEGE as OnboardingStep,
--       });
--     } catch (error) {
--       console.error("Error saving name:", error);
---      toast.error("Failed to save your information");
--+      toast.error("Failed to save your name");
--     }
--   };
-- 
--@@ -204,38 +193,14 @@ export function useOnboardingInfo() {
--     }
--   };
-- 
---  const handleReferralComplete = async (skipReferral: boolean = false) => {
---    try {
---      const updatedInfo = await updateOnboardingInfo({
---        currentStep: ONBOARDING_STEPS.UNLOCK as OnboardingStep,
---        onboardingComplete: true,
---      });
---
---      // Redirect immediately after successful update
---      if (updatedInfo?.onboardingComplete) {
---        if (isMobileButNotIpad()) {
---          router.push('/redirect');
---        } else {
---          router.push('/home');
---        }
---      } else {
---        console.error('[handleReferralComplete] Update successful but onboardingComplete not set');
---      }
---    } catch (error) {
---      console.error("[handleReferralComplete] Error:", error);
---      toast.error("Failed to proceed to next step");
---    }
---  };
---
--   return {
--     onboardingInfo,
---    updateOnboardingInfo,
--     currentStep,
--     handleNameSubmit,
--     handleCollegeSubmit,
--     handleAcademicsSubmit,
--     handleGoalsSubmit,
---    handleReferralComplete,
--     handleKalypsoComplete,
--+    ONBOARDING_STEPS
--   };
-- } 
--\ No newline at end of file
--diff --git a/hooks/useSubscriptionStatus.ts b/hooks/useSubscriptionStatus.ts
--index f765d1a5bd871ed0bdcbdad43c465dcc46b6c296..c51e76c0c490b2d760a659afab4b60f6261898a1 100644
----- a/hooks/useSubscriptionStatus.ts
--+++ b/hooks/useSubscriptionStatus.ts
--@@ -81,7 +81,9 @@ export function useSubscriptionStatus() {
--   const isCanceled = stripeData.status?.subscription?.cancelAtPeriodEnd ?? false;
-- 
--   // Calculate trial end date
---  const trialEnd = stripeData.status?.subscription?.trialEnd;
--+  const trialEnd = stripeData.status?.subscription?.trialEnd 
--+    ? new Date(stripeData.status?.subscription?.trialEnd) 
--+    : null;
--   
--   // Calculate days remaining in trial if in trial period
--   const trialDaysRemaining = trialEnd ? 
--@@ -98,7 +100,9 @@ export function useSubscriptionStatus() {
--     isNewUserTrial,
--     trialEnd,
--     trialDaysRemaining,
---    currentPeriodEnd: stripeData.status?.subscription?.currentPeriodEnd,
--+    currentPeriodEnd: stripeData.status?.subscription?.currentPeriodEnd 
--+      ? new Date(stripeData.status?.subscription?.currentPeriodEnd)
--+      : null,
--     isActive: isPremium || isGold,
--     stripeStatus: stripeData.status?.status || 'none',
--     // Map subscription type to a status
--diff --git a/state-management.mdc b/state-management.mdc
--new file mode 100644
--index 0000000000000000000000000000000000000000..8f7f2533f7c6474f51a33a163d671c7cd1a34eae
----- /dev/null
--+++ b/state-management.mdc
--@@ -0,0 +1,120 @@
--+---
--+description: 
--+globs: 
--+alwaysApply: false
--+---
--+ ---
--+name: State Management Patterns
--+description: Guidelines for managing state in the application
--+globs: ["**/*.tsx", "**/*.ts"]
--+alwaysApply: true
--+---
--+
--+### State Management Patterns
--+
--+#### Store Access
--+Always use the consolidated selector pattern from `@/store/selectors.ts` instead of directly importing from slice files.
--+
--+✅ Correct: Use consolidated selectors
--+```typescript
--+import { useUI, useUser, useAudio } from '@/store/selectors';
--+
--+const MyComponent = () => {
--+  const { theme } = useUI();
--+  const { isSubscribed } = useUser();
--+  const { playSound, stopLoop } = useAudio();
--+  
--+  // Component implementation
--+};
--+```
--+
--+❌ Incorrect: Direct imports from slice files
--+```typescript
--+import { useUIStore } from '@/store/slices/uiSlice';
--+import { useUserStore } from '@/store/slices/userSlice';
--+import { useAudioStore } from '@/store/slices/audioSlice';
--+
--+const MyComponent = () => {
--+  const theme = useUIStore(state => state.theme);
--+  const isSubscribed = useUserStore(state => state.isSubscribed);
--+  const playSound = useAudioStore(state => state.playSound);
--+  
--+  // Component implementation
--+};
--+```
--+
--+#### Local vs. Global State
--+
--+Consider using global state (Zustand) when:
--+
--+✅ Use Global State When:
--+- State needs to be accessed by multiple components across different parts of the app
--+- State needs to persist between route changes
--+- State changes in one component need to trigger updates in other components
--+- You find yourself prop drilling (passing props through 3+ levels of components)
--+- State represents app-wide settings or user preferences
--+- The state represents a shared resource (e.g., audio player, notifications)
--+
--+❌ Keep State Local When:
--+- State is only relevant to a single component or a small component tree
--+- State is temporary or transient (e.g., form inputs before submission)
--+- State represents UI-only concerns contained to a single component (e.g., isHovered, isExpanded)
--+- State is reset when the component unmounts
--+- Performance is critical and the state changes frequently
--+
--+#### Store Organization
--+
--+When adding state to the global Zustand store:
--+
--+1. **Choose the Appropriate Slice**
--+   - Identify which existing slice is most appropriate for your state:
--+     - `uiSlice`: UI-related state (themes, viewport, modals, navigation)
--+     - `userSlice`: User profile, authentication, preferences
--+     - `gameSlice`: Game mechanics, progress, scores
--+     - `audioSlice`: Sound effects, music, audio settings
--+     - `vocabSlice`: Vocabulary and content data
--+
--+2. **Create New Slices Sparingly**
--+   - Only create a new slice if the state represents an entirely new domain
--+   - Get approval before creating new slices to maintain architecture coherence
--+
--+3. **Slice Placement Guidelines**:
--+   ```typescript
--+   // UI State (uiSlice.ts)
--+   - Theme settings
--+   - Responsive layout information
--+   - Modal/drawer open states
--+   - Navigation state
--+   - Toast notifications
--+   
--+   // User State (userSlice.ts)
--+   - User profile/authentication
--+   - User preferences
--+   - Study settings
--+   - Progress tracking
--+   - Subscription status
--+   
--+   // Game State (gameSlice.ts)
--+   - Active game session data
--+   - Scores and statistics
--+   - Game progression
--+   - Game mechanics state
--+   
--+   // Audio State (audioSlice.ts)
--+   - Sound effect states
--+   - Music playback
--+   - Volume settings
--+   - Audio resources
--+   
--+   // Vocab State (vocabSlice.ts)
--+   - Content and vocabulary data
--+   - Learning materials
--+   - Study resources
--+   ```
--+
--+4. **Update Selectors**
--+   - When adding new state, create or update the appropriate selectors in `selectors.ts`
--+   - Consider creating granular selectors for specific use cases to minimize re-renders
--+
--+#### Exception: Store Initialization Components
--+The only exception to this pattern is in components specifically designed for store initialization (e.g., `StoreInitializer.tsx`), where direct access to store actions may be required.
--\ No newline at end of file
--diff --git a/store/index.ts b/store/index.ts
--index bf1e9e6743b34f074104a4c04974983ccea88a60..8e8adb1872c497be8b2031834636aa3a762928ef 100644
----- a/store/index.ts
--+++ b/store/index.ts
--@@ -2,6 +2,8 @@
-- export { useAudioStore } from './slices/audioSlice';
-- export { useUIStore } from './slices/uiSlice';
-- export { useGameStore } from './slices/gameSlice';
--+export { useUserStore } from './slices/userSlice';
--+export { useVocabStore } from './slices/vocabSlice';
-- 
-- // Re-export all types
-- export * from './types';
--@@ -11,29 +13,37 @@ export type { ThemeType, WindowSize } from './slices/uiSlice';
-- import { useAudioStore } from './slices/audioSlice';
-- import { useUIStore } from './slices/uiSlice';
-- import { useGameStore } from './slices/gameSlice';
---import { create } from 'zustand';
--+import { useUserStore } from './slices/userSlice';
--+import { useVocabStore } from './slices/vocabSlice';
-- 
-- // Flag to track global initialization
-- let isStoreInitialized = false;
-- 
---// Create a combined store for backward compatibility
---// This will be expanded as we migrate more slices
--+type StoreUpdates = Record<string, any>;
--+
-- export const useStore = {
--   getState: () => ({
--     ...useAudioStore.getState(),
--     ...useUIStore.getState(),
--     ...useGameStore.getState(),
--+    ...useUserStore.getState(),
--+    ...useVocabStore.getState(),
--   }),
---  setState: (updates: any) => {
--+  
--+  setState: (updates: StoreUpdates) => {
--     // Determine which slice each update belongs to and apply accordingly
--     const audioKeys = new Set(Object.keys(useAudioStore.getState()));
--     const uiKeys = new Set(Object.keys(useUIStore.getState()));
--     const gameKeys = new Set(Object.keys(useGameStore.getState()));
--+    const userKeys = new Set(Object.keys(useUserStore.getState()));
--+    const vocabKeys = new Set(Object.keys(useVocabStore.getState()));
--     
--     // Extract updates for each slice
---    const audioUpdates: Record<string, any> = {};
---    const uiUpdates: Record<string, any> = {};
---    const gameUpdates: Record<string, any> = {};
--+    const audioUpdates: StoreUpdates = {};
--+    const uiUpdates: StoreUpdates = {};
--+    const gameUpdates: StoreUpdates = {};
--+    const userUpdates: StoreUpdates = {};
--+    const vocabUpdates: StoreUpdates = {};
--     
--     // Sort updates into appropriate slices
--     Object.entries(updates).forEach(([key, value]) => {
--@@ -43,6 +53,10 @@ export const useStore = {
--         uiUpdates[key] = value;
--       } else if (gameKeys.has(key)) {
--         gameUpdates[key] = value;
--+      } else if (userKeys.has(key)) {
--+        userUpdates[key] = value;
--+      } else if (vocabKeys.has(key)) {
--+        vocabUpdates[key] = value;
--       }
--     });
--     
--@@ -56,27 +70,39 @@ export const useStore = {
--     if (Object.keys(gameUpdates).length > 0) {
--       useGameStore.setState(gameUpdates);
--     }
--+    if (Object.keys(userUpdates).length > 0) {
--+      useUserStore.setState(userUpdates);
--+    }
--+    if (Object.keys(vocabUpdates).length > 0) {
--+      useVocabStore.setState(vocabUpdates);
--+    }
--   },
--+  
--   subscribe: (callback: (state: any, prevState: any) => void) => {
--     // Subscribe to all slice stores
--     const unsubAudio = useAudioStore.subscribe(callback);
--     const unsubUI = useUIStore.subscribe(callback);
--     const unsubGame = useGameStore.subscribe(callback);
--+    const unsubUser = useUserStore.subscribe(callback);
--+    const unsubVocab = useVocabStore.subscribe(callback);
--     
--     // Return a function to unsubscribe from all
--     return () => {
--       unsubAudio();
--       unsubUI();
--       unsubGame();
--+      unsubUser();
--+      unsubVocab();
--     };
--   }
-- };
-- 
-- // Export a function to initialize the store at the app level
---export const initializeGlobalStore = async () => {
--+export const initializeGlobalStore = async (options?: { forceOnboarding?: boolean }): Promise<void> => {
--   if (typeof window !== 'undefined' && !isStoreInitialized) {
--     console.debug('[DEBUG][Store] Initializing global store from exported function');
--     try {
--+      // Initialize audio context
--       await useAudioStore.getState().initializeAudioContext();
--       
--       // Initialize UI state
--@@ -85,10 +111,17 @@ export const initializeGlobalStore = async () => {
--         useUIStore.getState().setTheme(savedTheme as any);
--       }
--       
--+      // Process debug options
--+      if (options?.forceOnboarding) {
--+        console.debug('[DEBUG][Store] DEBUG MODE: Forcing onboardingComplete to true for testing');
--+        useUserStore.getState().setOnboardingComplete(true);
--+      }
--+      
--       isStoreInitialized = true;
--       console.debug('[DEBUG][Store] Store initialization complete');
--     } catch (error) {
--       console.error('[DEBUG][Store] Store initialization failed:', error);
--+      throw error;
--     }
--   }
-- }; 
--\ No newline at end of file
--diff --git a/store/selectors.ts b/store/selectors.ts
--index 41348a50142d8d1425258f5e589a7b541803cd35..fbeb875883ff68209558b34ea6f41890f0da7ae5 100644
----- a/store/selectors.ts
--+++ b/store/selectors.ts
--@@ -1,8 +1,9 @@
---import { useStore } from './store'
-- import { useEffect, useCallback, useRef } from 'react'
-- import { useAudioStore } from './slices/audioSlice'
-- import { useUIStore } from './slices/uiSlice'
-- import { useGameStore } from './slices/gameSlice'
--+import { useUserStore } from './slices/userSlice'
--+import { useVocabStore } from './slices/vocabSlice'
-- 
-- /* --- UI Selectors ---- */
-- export const useUI = () => {
--@@ -23,7 +24,6 @@ export const useUI = () => {
--   }
-- }
-- 
---// Individual property selectors for performance
-- export const useTheme = () => useUIStore(state => state.theme)
-- export const useWindowSize = () => useUIStore(state => state.window)
-- export const useCurrentRoute = () => useUIStore(state => state.currentRoute)
--@@ -32,44 +32,40 @@ export const useCurrentRoute = () => useUIStore(state => state.currentRoute)
-- // Consolidated user selector that provides all user-related state and actions
-- export const useUser = () => {
--   // Profile state and actions
---  const profile = useStore((state) => state.profile)
---  const profileLoading = useStore((state) => state.profileLoading)
---  const updateProfile = useStore((state) => state.updateProfile)
---  const isProfileComplete = useStore((state) => state.isProfileComplete)
---  const completedSteps = useStore((state) => state.completedSteps)
---  const studyPreferences = useStore((state) => state.studyPreferences)
---  const interfaceSettings = useStore((state) => state.interfaceSettings)
---  const tutorialProgress = useStore((state) => state.tutorialProgress)
---  const onboardingComplete = useStore((state) => state.onboardingComplete)
---  const lastVisitedRoute = useStore((state) => state.lastVisitedRoute)
---  const onboardingRoute = useStore((state) => state.onboardingRoute)
--+  const profile = useUserStore((state) => state.profile)
--+  const profileLoading = useUserStore((state) => state.profileLoading)
--+  const updateProfile = useUserStore((state) => state.updateProfile)
--+  const isProfileComplete = useUserStore((state) => state.isProfileComplete)
--+  const completedSteps = useUserStore((state) => state.completedSteps)
--+  const studyPreferences = useUserStore((state) => state.studyPreferences)
--+  const interfaceSettings = useUserStore((state) => state.interfaceSettings)
--+  const tutorialProgress = useUserStore((state) => state.tutorialProgress)
--+  const onboardingComplete = useUserStore((state) => state.onboardingComplete)
--+  const lastVisitedRoute = useUserStore((state) => state.lastVisitedRoute)
--   
--   // Profile actions
---  const setCompletedSteps = useStore((state) => state.setCompletedSteps)
---  const addCompletedStep = useStore((state) => state.addCompletedStep)
---  const updateStudyPreferences = useStore((state) => state.updateStudyPreferences)
---  const updateInterfaceSettings = useStore((state) => state.updateInterfaceSettings)
---  const updateTutorialProgress = useStore((state) => state.updateTutorialProgress)
---  const setOnboardingComplete = useStore((state) => state.setOnboardingComplete)
---  const setLastVisitedRoute = useStore((state) => state.setLastVisitedRoute)
---  const setOnboardingRoute = useStore((state) => state.setOnboardingRoute)
--+  const setCompletedSteps = useUserStore((state) => state.setCompletedSteps)
--+  const addCompletedStep = useUserStore((state) => state.addCompletedStep)
--+  const updateStudyPreferences = useUserStore((state) => state.updateStudyPreferences)
--+  const updateInterfaceSettings = useUserStore((state) => state.updateInterfaceSettings)
--+  const updateTutorialProgress = useUserStore((state) => state.updateTutorialProgress)
--+  const setOnboardingComplete = useUserStore((state) => state.setOnboardingComplete)
--+  const setLastVisitedRoute = useUserStore((state) => state.setLastVisitedRoute)
--   
--   // User info state and actions
---  const userInfo = useStore((state) => state.userInfo)
---  const isSubscribed = useStore((state) => state.isSubscribed)
---  const setIsSubscribed = useStore((state) => state.setIsSubscribed)
--+  const userInfo = useUserStore((state) => state.userInfo)
--+  const isSubscribed = useUserStore((state) => state.isSubscribed)
--+  const setIsSubscribed = useUserStore((state) => state.setIsSubscribed)
--   
--   // User stats state and actions
---  const coins = useStore((state) => state.coins)
---  const statsLoading = useStore((state) => state.statsLoading)
---  const updateCoins = useStore((state) => state.updateCoins)
---  const updateCoinsDisplay = useStore((state) => state.updateCoinsDisplay)
---  
---  // Shared actions
---  const refreshUserInfo = useStore((state) => state.refreshUserInfo)
---  
--+  const coins = useUserStore((state) => state.coins)
--+  const statsLoading = useUserStore((state) => state.statsLoading)
--+  const updateCoins = useUserStore((state) => state.updateCoins)
--+  const updateCoinsDisplay = useUserStore((state) => state.updateCoinsDisplay)
--+  const refreshUserInfo = useUserStore((state) => state.refreshUserInfo)
--+
--   return {
---    // Profile state and actions
--+    // Profile state
--     profile,
--     profileLoading,
--     updateProfile,
--@@ -80,7 +76,6 @@ export const useUser = () => {
--     tutorialProgress,
--     onboardingComplete,
--     lastVisitedRoute,
---    onboardingRoute,
--     
--     // Profile actions
--     setCompletedSteps,
--@@ -90,20 +85,17 @@ export const useUser = () => {
--     updateTutorialProgress,
--     setOnboardingComplete,
--     setLastVisitedRoute,
---    setOnboardingRoute,
--     
---    // User info state and actions
--+    // User info
--     userInfo,
--     isSubscribed,
--     setIsSubscribed,
--     
---    // User stats state and actions
--+    // Stats
--     coins,
--     statsLoading,
--     updateCoins,
--     updateCoinsDisplay,
---    
---    // Shared actions
--     refreshUserInfo,
--   }
-- }
--@@ -192,18 +184,6 @@ export const useGame = () => {
--   }
-- }
-- 
---/* --- Individual Profile Selectors ---- */
---// For components that only need specific profile data
---export const useProfileComplete = () => useStore(state => state.isProfileComplete)
---export const useCompletedSteps = () => useStore(state => state.completedSteps)
---export const useStudyPreferences = () => useStore(state => state.studyPreferences)
---export const useInterfaceSettings = () => useStore(state => state.interfaceSettings)
---export const useTutorialProgress = () => useStore(state => state.tutorialProgress)
---export const useOnboardingStatus = () => ({
---  onboardingComplete: useStore(state => state.onboardingComplete),
---  lastVisitedRoute: useStore(state => state.lastVisitedRoute),
---  onboardingRoute: useStore(state => state.onboardingRoute)
---})
-- 
-- /* --- Audio Selector ---- */
-- // Consolidated audio selector that provides all audio-related state and actions
--@@ -324,15 +304,15 @@ export const useAudio = () => {
-- // Consolidated vocab selector that provides all vocabulary-related state and actions
-- export const useVocab = () => {
--   // Vocab state
---  const vocabList = useStore((state) => state.vocabList)
---  const showVocabList = useStore((state) => state.showVocabList)
---  const isCmdIEnabled = useStore((state) => state.isCmdIEnabled)
--+  const vocabList = useVocabStore((state) => state.vocabList)
--+  const showVocabList = useVocabStore((state) => state.showVocabList)
--+  const isCmdIEnabled = useVocabStore((state) => state.isCmdIEnabled)
--   
--   // Vocab actions
---  const addVocabWord = useStore((state) => state.addVocabWord)
---  const removeVocabWord = useStore((state) => state.removeVocabWord)
---  const toggleVocabList = useStore((state) => state.toggleVocabList)
---  const toggleCmdI = useStore((state) => state.toggleCmdI)
--+  const addVocabWord = useVocabStore((state) => state.addVocabWord)
--+  const removeVocabWord = useVocabStore((state) => state.removeVocabWord)
--+  const toggleVocabList = useVocabStore((state) => state.toggleVocabList)
--+  const toggleCmdI = useVocabStore((state) => state.toggleCmdI)
--   
--   return {
--     // State
--@@ -349,9 +329,10 @@ export const useVocab = () => {
-- }
-- 
-- // Individual property selectors for performance
---export const useVocabList = () => useStore(state => state.vocabList)
---export const useShowVocabList = () => useStore(state => state.showVocabList)
---export const useIsCmdIEnabled = () => useStore(state => state.isCmdIEnabled)
--+// Commented out as they're currently unused in the codebase
--+// export const useVocabList = () => useVocabStore(state => state.vocabList)
--+// export const useShowVocabList = () => useVocabStore(state => state.showVocabList)
--+// export const useIsCmdIEnabled = () => useVocabStore(state => state.isCmdIEnabled)
-- 
-- /* --- Clinic Data Management ---- */
-- export const useClinicData = () => {
--diff --git a/store/slices/audioSlice.ts b/store/slices/audioSlice.ts
--index ece5e87c2103ea91964699a35559ebcd95964ca3..9703fe72c5ce1b23264dc16be0ce5265620ac2e5 100644
----- a/store/slices/audioSlice.ts
--+++ b/store/slices/audioSlice.ts
--@@ -48,6 +48,9 @@ interface AudioState {
--   // Track loading state to prevent duplicate playback
--   _isLoopLoading: boolean;
--   _pendingLoopName: string | null;
--+  // Debouncing for sounds
--+  _lastPlayedSounds: Record<string, number>;
--+  _soundDebounceTime: number;
-- }
-- 
-- interface AudioActions {
--@@ -134,6 +137,7 @@ export const useAudioStore = create<AudioState & AudioActions>()(
--       'notification': 'notification',
--       'cardFlip': 'cardFlip',
--       'levelUp': 'levelUp',
--+      'levelup': 'levelUp', // Adding alias with lowercase for consistency
--       'coin': 'coin',
--       'achievement': 'achievement',
--       'flashcard-startup': 'flashcard-startup',
--@@ -141,12 +145,24 @@ export const useAudioStore = create<AudioState & AudioActions>()(
--       'flashcard-select': 'flashcard-select',
--       'correct': 'correct',
--       'whoosh': 'whoosh',
--+      'fanfare': 'fanfare',
--+      'sadfanfare': 'sadfanfare', // Map to actual file now instead of fallback
--+      'beep-tone': 'beep-tone',
--+      'chatbot-open': 'chatbot-open',
--+      'short-choir': 'short-choir',
--+      'streakdaily': 'streakdaily',
--+      'streakmonth': 'streakmonth',
--+      'warning': 'warning',
--     },
-- 
--     // Initialize new properties for loop loading state
--     _isLoopLoading: false,
--     _pendingLoopName: null,
-- 
--+    // Store last played sound with timestamp to prevent multiple rapid plays
--+    _lastPlayedSounds: {} as Record<string, number>,
--+    _soundDebounceTime: 3000, // Increased to 3 seconds (3000ms) from 1000ms
--+
--     // Set song queue
--     setSongQueue: (queue) => {
--       const state = get();
--@@ -643,14 +659,47 @@ export const useAudioStore = create<AudioState & AudioActions>()(
--     playSound: async (sfxName) => {
--       console.log(`[AudioSlice] Attempting to play sound effect: ${sfxName}`);
--       const state = get();
--+      
--+      // Prevent rapid repeated plays of the same sound
--+      const now = Date.now();
--+      const lastPlayed = state._lastPlayedSounds[sfxName] || 0;
--+      if (now - lastPlayed < state._soundDebounceTime) {
--+        console.log(`[AudioSlice] Skipping sound "${sfxName}" - played too recently (${now - lastPlayed}ms ago)`);
--+        return Promise.resolve(); // Return resolved promise to avoid the async chain continuing
--+      }
--+      
--+      // Update last played timestamp IMMEDIATELY before any async operations
--+      // This prevents multiple calls while the first one is still initializing
--+      set({ 
--+        _lastPlayedSounds: { 
--+          ...state._lastPlayedSounds, 
--+          [sfxName]: now 
--+        } 
--+      });
--+      
--+      // Check if this is a duplicate call within 10ms (additional protection)
--+      const callTime = now;
--+      console.log(`[AudioSlice] Sound ${sfxName} - Processing started at ${callTime}`);
--+      
--       if (!state.audioContext) {
--         console.log(`[AudioSlice] Audio context not initialized for sound: ${sfxName}, initializing now...`);
--         await get().initializeAudioContext();
--       }
--       
---      const sfxPath = state._SOUND_MAPPINGS[sfxName];
--+      // Try exact name first, then try lowercase version for case-insensitive match
--+      let sfxPath = state._SOUND_MAPPINGS[sfxName];
--+      if (!sfxPath && typeof sfxName === 'string') {
--+        // Try lowercase version
--+        const lcName = sfxName.toLowerCase();
--+        sfxPath = state._SOUND_MAPPINGS[lcName];
--+        if (sfxPath) {
--+          console.log(`[AudioSlice] Found sound using case-insensitive match: ${lcName}`);
--+        }
--+      }
--+      
--       if (!sfxPath) {
--         console.error(`[AudioSlice] Sound effect not found in mappings: ${sfxName}`);
--+        console.log(`[AudioSlice] Available sounds: ${Object.keys(state._SOUND_MAPPINGS).join(', ')}`);
--         return;
--       }
-- 
--diff --git a/store/slices/userSlice.ts b/store/slices/userSlice.ts
--index e69de29bb2d1d6434b8b29ae775ad8c2e48c5391..0fff0cfe0fc6c71d45167edf52b37444bcfce379 100644
----- a/store/slices/userSlice.ts
--+++ b/store/slices/userSlice.ts
--@@ -0,0 +1,747 @@
--+import { create } from 'zustand';
--+import { devtools } from 'zustand/middleware';
--+import { UserInfo } from '@/types/user';
--+
--+//========================= Helpers ===============================
--+// Helper function to check if a date is within 14 days of now
--+const isWithin14Days = (date: Date): boolean => {
--+  const now = new Date();
--+  const diffTime = Math.abs(now.getTime() - date.getTime());
--+  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
--+  return diffDays <= 14;
--+};
--+
--+//========================= Types ===============================
--+interface UserProfile {
--+  userId?: string;
--+  firstName?: string;
--+  bio?: string;
--+  coins?: number;
--+  patientsCount?: number;
--+  profilePhoto?: string;
--+  studyPreferences?: {
--+    dailyGoal?: number;
--+    reminderTime?: string;
--+  };
--+  interfaceSettings?: {
--+    darkMode?: boolean;
--+    fontSize?: string;
--+  };
--+  tutorialProgress?: {
--+    currentStep?: number;
--+    completedRoutes?: string[];
--+  };
--+  completedSteps?: string[];
--+  onboardingComplete?: boolean;
--+  lastVisitedRoute?: string;
--+}
--+
--+interface UserState {
--+  // Version tracking
--+  version: number;
--+  isHydrated: boolean;
--+  
--+  // Profile state
--+  profile: UserProfile | null;
--+  profileLoading: boolean;
--+  isProfileComplete: boolean;
--+  completedSteps: string[];
--+  studyPreferences: {
--+    dailyGoal: number;
--+    reminderTime: string;
--+  };
--+  interfaceSettings: {
--+    darkMode: boolean;
--+    fontSize: string;
--+  };
--+  tutorialProgress: {
--+    currentStep: number;
--+    completedRoutes: string[];
--+  };
--+  onboardingComplete: boolean;
--+  lastVisitedRoute: string;
--+  
--+  // User info state
--+  userInfo: UserInfo | null;
--+  isSubscribed: boolean;
--+  
--+  // Stats state
--+  coins: number;
--+  statsLoading: boolean;
--+  error: string | null;
--+}
--+
--+interface UserActions {
--+  // Profile actions
--+  updateProfile: (updates: any) => Promise<void>;
--+  setCompletedSteps: (steps: string[]) => void;
--+  addCompletedStep: (step: string) => void;
--+  
--+  // Preferences actions
--+  updateStudyPreferences: (preferences: Partial<UserState['studyPreferences']>) => void;
--+  updateInterfaceSettings: (settings: Partial<UserState['interfaceSettings']>) => void;
--+  updateTutorialProgress: (progress: Partial<UserState['tutorialProgress']>) => void;
--+  
--+  // Onboarding actions
--+  setOnboardingComplete: (completed: boolean) => void;
--+  setLastVisitedRoute: (route: string) => void;
--+  
--+  // User info actions
--+  refreshUserInfo: () => Promise<void>;
--+  setIsSubscribed: (status: boolean) => void;
--+  
--+  // Stats actions
--+  updateCoins: (amount: number) => Promise<void>;
--+  updateCoinsDisplay: (newAmount: number) => void;
--+}
--+
--+interface OnboardingInfo {
--+  currentStep: number;
--+  startedAt: string;
--+  lastUpdated: string;
--+  onboardingComplete: boolean;
--+  firstName: string | null;
--+  targetScore: number | null;
--+  college: string | null;
--+  year: string | null;
--+  referralSource: string | null;
--+}
--+
--+//========================= Store Creation ===============================
--+export const useUserStore = create<UserState & UserActions>()(
--+  devtools((set, get) => ({
--+    // Version tracking
--+    version: 1,
--+    isHydrated: false,
--+    
--+    // Profile state
--+    profile: null,
--+    profileLoading: true,
--+    isProfileComplete: false,
--+    completedSteps: [],
--+    studyPreferences: {
--+      dailyGoal: 30,
--+      reminderTime: '09:00'
--+    },
--+    interfaceSettings: {
--+      darkMode: false,
--+      fontSize: 'medium'
--+    },
--+    tutorialProgress: {
--+      currentStep: 0,
--+      completedRoutes: []
--+    },
--+    onboardingComplete: false,
--+    lastVisitedRoute: '/',
--+    
--+    // User info state
--+    userInfo: null,
--+    isSubscribed: false,
--+    
--+    // Stats state
--+    coins: 0,
--+    statsLoading: false,
--+    error: null,
--+    
--+    // Profile actions
--+    updateProfile: async (updates) => {
--+      try {
--+        // Get the current profile and email/userId for the API call
--+        const userInfo = get().userInfo;
--+        
--+        if (!userInfo || (!userInfo.email && !userInfo.userId)) {
--+          console.error('Cannot update profile: No user email or ID available');
--+          return;
--+        }
--+        
--+        // Validate updates
--+        const currentProfile = get().profile;
--+        const updatedProfile = { ...currentProfile, ...updates };
--+        const validation = validateProfile(updatedProfile);
--+        
--+        if (!validation.isValid) {
--+          console.error('Invalid profile updates:', validation.errors);
--+          set({
--+            error: validation.errors.join('. '),
--+            profileLoading: false
--+          });
--+          return;
--+        }
--+        
--+        // Determine which query param to use
--+        const queryParam = userInfo.email 
--+          ? `email=${encodeURIComponent(userInfo.email)}`
--+          : `userId=${userInfo.userId}`;
--+        
--+        set({ profileLoading: true, error: null });
--+        
--+        // Send update to API
--+        const response = await fetch(`/api/user-info/profile?${queryParam}`, {
--+          method: 'PATCH',
--+          headers: { 'Content-Type': 'application/json' },
--+          body: JSON.stringify(updates)
--+        });
--+        
--+        if (!response.ok) {
--+          throw new Error('Failed to update profile');
--+        }
--+        
--+        const updatedProfileFromServer = await response.json();
--+        
--+        // Update local state with server response
--+        set({
--+          profile: updatedProfileFromServer,
--+          profileLoading: false,
--+          error: null,
--+          ...(updatedProfileFromServer.completedSteps && { completedSteps: updatedProfileFromServer.completedSteps }),
--+          ...(updatedProfileFromServer.studyPreferences && { studyPreferences: updatedProfileFromServer.studyPreferences }),
--+          ...(updatedProfileFromServer.interfaceSettings && { interfaceSettings: updatedProfileFromServer.interfaceSettings }),
--+          ...(updatedProfileFromServer.tutorialProgress && { tutorialProgress: updatedProfileFromServer.tutorialProgress }),
--+          ...(updatedProfileFromServer.onboardingComplete !== undefined && { onboardingComplete: updatedProfileFromServer.onboardingComplete }),
--+          ...(updatedProfileFromServer.lastVisitedRoute && { lastVisitedRoute: updatedProfileFromServer.lastVisitedRoute }),
--+          isProfileComplete: isProfileComplete(updatedProfileFromServer)
--+        });
--+      } catch (error) {
--+        console.error('Failed to update profile:', error);
--+        set({
--+          profileLoading: false,
--+          error: error instanceof Error ? error.message : 'Failed to update profile'
--+        });
--+      }
--+    },
--+    
--+    setCompletedSteps: (steps) => {
--+      set({ completedSteps: steps });
--+      set({ isProfileComplete: steps.length >= 3 });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, completedSteps: steps } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ completedSteps: steps });
--+    },
--+    
--+    addCompletedStep: (step) => {
--+      const currentSteps = get().completedSteps;
--+      if (!currentSteps.includes(step)) {
--+        const newSteps = [...currentSteps, step];
--+        set({ completedSteps: newSteps });
--+        set({ isProfileComplete: newSteps.length >= 3 });
--+        
--+        // Also update the profile object for consistency
--+        const profile = get().profile;
--+        if (profile) {
--+          set({ profile: { ...profile, completedSteps: newSteps } });
--+        }
--+        
--+        // Persist to backend if possible
--+        get().updateProfile({ completedSteps: newSteps });
--+      }
--+    },
--+    
--+    updateStudyPreferences: (preferences) => {
--+      const currentPreferences = get().studyPreferences;
--+      const updatedPreferences = { ...currentPreferences, ...preferences };
--+      set({ studyPreferences: updatedPreferences });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, studyPreferences: updatedPreferences } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ studyPreferences: updatedPreferences });
--+    },
--+    
--+    updateInterfaceSettings: (settings) => {
--+      const currentSettings = get().interfaceSettings;
--+      const updatedSettings = { ...currentSettings, ...settings };
--+      set({ interfaceSettings: updatedSettings });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, interfaceSettings: updatedSettings } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ interfaceSettings: updatedSettings });
--+    },
--+    
--+    updateTutorialProgress: (progress) => {
--+      const currentProgress = get().tutorialProgress;
--+      const updatedProgress = { ...currentProgress, ...progress };
--+      set({ tutorialProgress: updatedProgress });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, tutorialProgress: updatedProgress } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ tutorialProgress: updatedProgress });
--+    },
--+    
--+    setOnboardingComplete: (completed) => {
--+      set({ onboardingComplete: completed });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, onboardingComplete: completed } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ onboardingComplete: completed });
--+    },
--+    
--+    setLastVisitedRoute: (route) => {
--+      set({ lastVisitedRoute: route });
--+      
--+      // Also update the profile object for consistency
--+      const profile = get().profile;
--+      if (profile) {
--+        set({ profile: { ...profile, lastVisitedRoute: route } });
--+      }
--+      
--+      // Persist to backend if possible
--+      get().updateProfile({ lastVisitedRoute: route });
--+    },
--+    
--+    refreshUserInfo: async () => {
--+      try {
--+        // Only set loading if not already loading
--+        const currentState = get();
--+        if (!currentState.statsLoading && !currentState.profileLoading) {
--+          set({ statsLoading: true, profileLoading: true, error: null });
--+        }
--+
--+        // Add loading timeout
--+        const loadingTimeout = setTimeout(() => {
--+          const state = get();
--+          if (state.statsLoading || state.profileLoading) {
--+            set({ 
--+              statsLoading: false,
--+              profileLoading: false,
--+              error: 'Loading timeout - please try again'
--+            });
--+          }
--+        }, 10000);
--+
--+        // Batch all fetch requests together
--+        const [userInfoResponse, profileResponse] = await Promise.all([
--+          fetch('/api/user-info'),
--+          fetch('/api/user-info/profile')
--+        ]);
--+
--+        clearTimeout(loadingTimeout);
--+
--+        if (!userInfoResponse.ok) throw new Error('Failed to fetch user info');
--+        const userInfo = await userInfoResponse.json();
--+        
--+        // Check if user is in 14-day free trial period
--+        const isNewUserTrial = userInfo.createdAt ? isWithin14Days(new Date(userInfo.createdAt)) : false;
--+
--+        // Prepare single state update with only changed values
--+        const updates: Partial<UserState> = {
--+          userInfo,
--+          statsLoading: false,
--+          profileLoading: false,
--+          error: null,
--+          isHydrated: true,
--+          version: CURRENT_VERSION
--+        };
--+
--+        // Only update coins if changed
--+        if (userInfo.score !== get().coins) {
--+          updates.coins = userInfo.score || 0;
--+        }
--+
--+        // Only update subscription if changed
--+        const newSubStatus = 
--+          userInfo.subscriptionType === 'gold' || 
--+          userInfo.subscriptionType === 'premium' ||
--+          userInfo.subscriptionType?.startsWith('Gold') ||
--+          userInfo.subscriptionType?.includes('_Trial') || 
--+          isNewUserTrial || 
--+          false;
--+          
--+        if (newSubStatus !== get().isSubscribed) {
--+          updates.isSubscribed = newSubStatus;
--+        }
--+
--+        if (profileResponse.ok) {
--+          const profileData = await profileResponse.json();
--+          const currentProfile = get().profile;
--+          
--+          // Only update profile fields that have changed
--+          if (JSON.stringify(currentProfile) !== JSON.stringify(profileData)) {
--+            Object.assign(updates, {
--+              profile: profileData,
--+              completedSteps: profileData.completedSteps || [],
--+              studyPreferences: profileData.studyPreferences || {
--+                dailyGoal: 30,
--+                reminderTime: '09:00'
--+              },
--+              interfaceSettings: profileData.interfaceSettings || {
--+                darkMode: false,
--+                fontSize: 'medium'
--+              },
--+              tutorialProgress: profileData.tutorialProgress || {
--+                currentStep: 0,
--+                completedRoutes: []
--+              },
--+              lastVisitedRoute: profileData.lastVisitedRoute || '/',
--+              isProfileComplete: (profileData.completedSteps || []).length >= 3
--+            });
--+          }
--+        }
--+
--+        // Apply all updates in a single state update
--+        set(updates);
--+
--+      } catch (error) {
--+        console.error('Error in refreshUserInfo:', error);
--+        set({ 
--+          error: error instanceof Error ? error.message : 'Failed to refresh user info',
--+          statsLoading: false,
--+          profileLoading: false,
--+          isHydrated: false
--+        });
--+      }
--+    },
--+    
--+    setIsSubscribed: (status) => {
--+      set({ isSubscribed: status });
--+    },
--+    
--+    updateCoins: async (amount) => {
--+      try {
--+        const response = await fetch('/api/user/score', {
--+          method: 'POST',
--+          headers: { 'Content-Type': 'application/json' },
--+          body: JSON.stringify({ amount })
--+        });
--+        
--+        if (!response.ok) throw new Error('Failed to update coins');
--+        
--+        await get().refreshUserInfo();
--+      } catch (error) {
--+        console.error('Failed to update coins:', error);
--+      }
--+    },
--+    
--+    updateCoinsDisplay: (newAmount) => {
--+      set({ coins: newAmount });
--+    }
--+  }))
--+);
--+
--+interface ValidationResult {
--+  isValid: boolean;
--+  missingFields: string[];
--+  invalidFields: string[];
--+  errors: string[];
--+}
--+
--+// Constants for validation
--+const ONBOARDING_STEPS = {
--+  NAME: 1,
--+  COLLEGE: 2,
--+  ACADEMICS: 3,
--+  GOALS: 4,
--+  KALYPSO_DIALOGUE: 5,
--+  REFERRAL: 6,
--+  UNLOCK: 7
--+} as const;
--+
--+const REQUIRED_STEPS = 3; // Minimum number of steps required for profile completion
--+
--+type OnboardingStep = typeof ONBOARDING_STEPS[keyof typeof ONBOARDING_STEPS];
--+
--+interface StepDependency {
--+  step: OnboardingStep;
--+  requires: OnboardingStep[];
--+  validates: (info: OnboardingInfo) => boolean;
--+}
--+
--+const STEP_DEPENDENCIES: Record<OnboardingStep, StepDependency> = {
--+  [ONBOARDING_STEPS.NAME]: {
--+    step: ONBOARDING_STEPS.NAME,
--+    requires: [],
--+    validates: (info) => !!info.firstName
--+  },
--+  [ONBOARDING_STEPS.COLLEGE]: {
--+    step: ONBOARDING_STEPS.COLLEGE,
--+    requires: [ONBOARDING_STEPS.NAME],
--+    validates: (info) => !!info.college
--+  },
--+  [ONBOARDING_STEPS.ACADEMICS]: {
--+    step: ONBOARDING_STEPS.ACADEMICS,
--+    requires: [ONBOARDING_STEPS.COLLEGE],
--+    validates: (info) => !!info.year
--+  },
--+  [ONBOARDING_STEPS.GOALS]: {
--+    step: ONBOARDING_STEPS.GOALS,
--+    requires: [ONBOARDING_STEPS.ACADEMICS],
--+    validates: (info) => typeof info.targetScore === 'number' && info.targetScore > 0
--+  },
--+  [ONBOARDING_STEPS.KALYPSO_DIALOGUE]: {
--+    step: ONBOARDING_STEPS.KALYPSO_DIALOGUE,
--+    requires: [ONBOARDING_STEPS.GOALS],
--+    validates: () => true // Dialogue completion is tracked separately
--+  },
--+  [ONBOARDING_STEPS.REFERRAL]: {
--+    step: ONBOARDING_STEPS.REFERRAL,
--+    requires: [ONBOARDING_STEPS.KALYPSO_DIALOGUE],
--+    validates: () => true // Optional step
--+  },
--+  [ONBOARDING_STEPS.UNLOCK]: {
--+    step: ONBOARDING_STEPS.UNLOCK,
--+    requires: [ONBOARDING_STEPS.KALYPSO_DIALOGUE],
--+    validates: (info) => {
--+      const requiredFields = [
--+        'firstName',
--+        'college',
--+        'year',
--+        'targetScore'
--+      ];
--+      return requiredFields.every(field => !!info[field as keyof OnboardingInfo]);
--+    }
--+  }
--+};
--+
--+// Cache for onboarding completion status
--+let cachedOnboardingStatus: { userId: string; isComplete: boolean } | null = null;
--+
--+// Validation function for onboarding state
--+const validateOnboardingState = (userInfo: UserInfo, profile: UserProfile | null): boolean => {
--+  // Check if we have all required data
--+  if (!userInfo || !userInfo.onboardingInfo || !profile) {
--+    return false;
--+  }
--+
--+  const { currentStep } = userInfo.onboardingInfo;
--+  
--+  // Check if all steps are completed
--+  const hasCompletedAllSteps = (currentStep ?? 0) >= ONBOARDING_STEPS.UNLOCK;
--+  if (!hasCompletedAllSteps) return false;
--+  
--+  // Validate all step dependencies
--+  for (const stepNum of Object.values(ONBOARDING_STEPS)) {
--+    const dependency = STEP_DEPENDENCIES[stepNum];
--+    if (!dependency.validates(userInfo.onboardingInfo)) {
--+      return false;
--+    }
--+  }
--+
--+  // Check profile completion
--+  const hasValidProfile = isProfileComplete(profile);
--+
--+  return hasValidProfile;
--+};
--+
--+// Async onboarding completion check with caching
--+const isOnboardingComplete = async (userId: string): Promise<boolean> => {
--+  // Check cache first
--+  if (cachedOnboardingStatus?.userId === userId) {
--+    return cachedOnboardingStatus.isComplete;
--+  }
--+  
--+  try {
--+    // Fetch latest user info
--+    const response = await fetch('/api/user-info');
--+    if (!response.ok) throw new Error('Failed to fetch user info');
--+    
--+    const userInfo = await response.json();
--+    const profileResponse = await fetch('/api/user-info/profile');
--+    const profile = profileResponse.ok ? await profileResponse.json() : null;
--+    
--+    // Determine completion status
--+    const isComplete = validateOnboardingState(userInfo, profile);
--+    
--+    // Update cache
--+    cachedOnboardingStatus = { userId, isComplete };
--+    
--+    return isComplete;
--+  } catch (error) {
--+    console.error('Error checking onboarding completion:', error);
--+    return false;
--+  }
--+};
--+
--+// Profile validation functions
--+const validateProfile = (profile: UserProfile): ValidationResult => {
--+  const missingFields: string[] = [];
--+  const invalidFields: string[] = [];
--+  
--+  // Check required fields
--+  if (!profile.firstName) missingFields.push('firstName');
--+  if (!profile.completedSteps || profile.completedSteps.length < REQUIRED_STEPS) {
--+    missingFields.push('completedSteps');
--+  }
--+  
--+  // Validate field types and values
--+  if (profile.coins !== undefined && (typeof profile.coins !== 'number' || profile.coins < 0)) {
--+    invalidFields.push('coins');
--+  }
--+  
--+  // Validate study preferences
--+  if (profile.studyPreferences) {
--+    const { dailyGoal, reminderTime } = profile.studyPreferences;
--+    if (dailyGoal !== undefined && (typeof dailyGoal !== 'number' || dailyGoal < 0)) {
--+      invalidFields.push('studyPreferences.dailyGoal');
--+    }
--+    if (reminderTime && !/^([01]\d|2[0-3]):([0-5]\d)$/.test(reminderTime)) {
--+      invalidFields.push('studyPreferences.reminderTime');
--+    }
--+  }
--+  
--+  // Validate interface settings
--+  if (profile.interfaceSettings) {
--+    const { fontSize } = profile.interfaceSettings;
--+    if (fontSize && !['small', 'medium', 'large'].includes(fontSize)) {
--+      invalidFields.push('interfaceSettings.fontSize');
--+    }
--+  }
--+  
--+  // Generate validation errors
--+  const errors = generateValidationErrors(missingFields, invalidFields);
--+  
--+  return {
--+    isValid: missingFields.length === 0 && invalidFields.length === 0,
--+    missingFields,
--+    invalidFields,
--+    errors
--+  };
--+};
--+
--+const generateValidationErrors = (missing: string[], invalid: string[]): string[] => {
--+  const errors: string[] = [];
--+  if (missing.length > 0) {
--+    errors.push(`Missing required fields: ${missing.join(', ')}`);
--+  }
--+  if (invalid.length > 0) {
--+    errors.push(`Invalid values for fields: ${invalid.join(', ')}`);
--+  }
--+  return errors;
--+};
--+
--+const isProfileComplete = (profile: UserProfile | null): boolean => {
--+  if (!profile) return false;
--+  
--+  const validation = validateProfile(profile);
--+  if (!validation.isValid) return false;
--+  
--+  return (
--+    !!profile.firstName &&
--+    (profile.completedSteps?.length ?? 0) >= REQUIRED_STEPS
--+  );
--+};
--+
--+// State update utility with optimistic updates and rollback
--+const updateState = async (
--+  set: (state: Partial<UserState> | ((state: UserState) => Partial<UserState>)) => void,
--+  get: () => UserState,
--+  updates: Partial<UserState>,
--+  options: { sync?: boolean } = {}
--+) => {
--+  try {
--+    // Store previous state for rollback
--+    const previousState = get();
--+    
--+    // Optimistically update local state
--+    set((state) => ({
--+      ...state,
--+      ...updates,
--+      error: null
--+    }));
--+
--+    // If sync is requested, update database
--+    if (options.sync) {
--+      try {
--+        const response = await fetch('/api/user-info', {
--+          method: 'PATCH',
--+          headers: { 'Content-Type': 'application/json' },
--+          body: JSON.stringify(updates)
--+        });
--+
--+        if (!response.ok) {
--+          throw new Error('Failed to sync with database');
--+        }
--+
--+        // Update local state with server response
--+        const serverState = await response.json();
--+        set((state) => ({
--+          ...state,
--+          ...serverState
--+        }));
--+      } catch (error) {
--+        // Rollback on sync failure
--+        console.error('Sync failed, rolling back:', error);
--+        set(previousState);
--+        throw error;
--+      }
--+    }
--+  } catch (error) {
--+    set((state) => ({
--+      ...state,
--+      error: error instanceof Error ? error.message : 'Update failed'
--+    }));
--+    throw error;
--+  }
--+};
--+
--+// Constants for state management
--+const CURRENT_VERSION = 1;
--+
--+const initialState: UserState = {
--+  // Version tracking
--+  version: CURRENT_VERSION,
--+  isHydrated: false,
--+  
--+  // Profile state
--+  profile: null,
--+  profileLoading: true,
--+  isProfileComplete: false,
--+  completedSteps: [],
--+  studyPreferences: {
--+    dailyGoal: 30,
--+    reminderTime: '09:00'
--+  },
--+  interfaceSettings: {
--+    darkMode: false,
--+    fontSize: 'medium'
--+  },
--+  tutorialProgress: {
--+    currentStep: 0,
--+    completedRoutes: []
--+  },
--+  onboardingComplete: false,
--+  lastVisitedRoute: '/',
--+  
--+  // User info state
--+  userInfo: null,
--+  isSubscribed: false,
--+  
--+  // Stats state
--+  coins: 0,
--+  statsLoading: false,
--+  error: null
--+};
--+
--+// Hydration check utility
--+const isStateHydrated = (state: UserState): boolean => {
--+  return state.isHydrated && state.version === CURRENT_VERSION;
--+};
--+
--+// State reset utility
--+const resetState = (): UserState => ({
--+  ...initialState,
--+  version: CURRENT_VERSION
--+});
--diff --git a/store/slices/vocabSlice.ts b/store/slices/vocabSlice.ts
--new file mode 100644
--index 0000000000000000000000000000000000000000..44f675079306377d3a4e227d12c28a7f9fe5b5a9
----- /dev/null
--+++ b/store/slices/vocabSlice.ts
--@@ -0,0 +1,61 @@
--+import { create } from 'zustand';
--+import { devtools } from 'zustand/middleware';
--+
--+//========================= Types ===============================
--+interface VocabWord {
--+  word: string;
--+  definitions: string;
--+}
--+
--+interface VocabState {
--+  // Vocab state
--+  vocabList: VocabWord[];
--+  showVocabList: boolean;
--+  isCmdIEnabled: boolean;
--+}
--+
--+interface VocabActions {
--+  // Vocab actions
--+  addVocabWord: (word: string, definition: string) => void;
--+  removeVocabWord: (word: string) => void;
--+  toggleVocabList: () => void;
--+  toggleCmdI: () => void;
--+}
--+
--+//========================= Store Creation ===============================
--+export const useVocabStore = create<VocabState & VocabActions>()(
--+  devtools((set, get) => ({
--+    // Vocab state
--+    vocabList: [],
--+    showVocabList: false,
--+    isCmdIEnabled: true,
--+    
--+    // Vocab actions
--+    addVocabWord: (word, definition) => {
--+      set((state) => ({
--+        vocabList: [
--+          ...state.vocabList,
--+          { word, definitions: definition }
--+        ]
--+      }));
--+    },
--+    
--+    removeVocabWord: (word) => {
--+      set((state) => ({
--+        vocabList: state.vocabList.filter((item) => item.word !== word)
--+      }));
--+    },
--+    
--+    toggleVocabList: () => {
--+      set((state) => ({
--+        showVocabList: !state.showVocabList
--+      }));
--+    },
--+    
--+    toggleCmdI: () => {
--+      set((state) => ({
--+        isCmdIEnabled: !state.isCmdIEnabled
--+      }));
--+    },
--+  }))
--+);
--\ No newline at end of file
--diff --git a/store/store.ts b/store/store.ts
--deleted file mode 100644
--index 341f139718b3bbd14f143720b5ace0944d450948..0000000000000000000000000000000000000000
----- a/store/store.ts
--+++ /dev/null
--@@ -1,592 +0,0 @@
---import { create } from 'zustand'
---import { devtools } from 'zustand/middleware'
---import { UserInfo } from '@/types/user'
---import type { DoctorOfficeStats } from '@/types'
---import { toast } from 'react-hot-toast'
---import { isWithin14Days } from '@/lib/utils'
---// Import the audio slice for initialization
---import { useAudioStore } from './slices/audioSlice'
---// Import the UI slice for initialization
---import { useUIStore } from './slices/uiSlice'
---// Import the Game slice for initialization
---import { useGameStore } from './slices/gameSlice'
---
---// Add a flag to track global initialization
---let isStoreInitialized = false;
---
---//***************************************** User Slice ********************************************************//
---//************************* UserProfile, UserInfo, UserStats, User  *******************************************//
---
---interface UserProfile {
---  profile: {
---    userId?: string;
---    firstName?: string;
---    bio?: string;
---    coins?: number;
---    patientsCount?: number;
---    profilePhoto?: string;
---    studyPreferences?: {
---      dailyGoal?: number;
---      reminderTime?: string;
---    };
---    interfaceSettings?: {
---      darkMode?: boolean;
---      fontSize?: string;
---    };
---    tutorialProgress?: {
---      currentStep?: number;
---      completedRoutes?: string[];
---    };
---    completedSteps?: string[];
---    onboardingComplete?: boolean;
---    lastVisitedRoute?: string;
---    onboardingRoute?: string;
---  } | null;
---  isLoading: boolean;
---}
---
---interface UserInfoState {
---  userInfo: UserInfo | null;
---  isSubscribed: boolean;
---}
---
---interface UserStats {
---  coins: number;
---  isLoading: boolean;
---}
---
---/* --- User Slice ---- */
---interface UserSlice {
---  // UserProfile state
---  profile: UserProfile['profile'];
---  profileLoading: boolean;
---  isProfileComplete: boolean;
---  completedSteps: string[];
---  studyPreferences: {
---    dailyGoal: number;
---    reminderTime: string;
---  };
---  interfaceSettings: {
---    darkMode: boolean;
---    fontSize: string;
---  };
---  tutorialProgress: {
---    currentStep: number;
---    completedRoutes: string[];
---  };
---  onboardingComplete: boolean;
---  lastVisitedRoute: string;
---  onboardingRoute: string;
---  
---  // UserInfo state
---  userInfo: UserInfoState['userInfo'];
---  isSubscribed: boolean;
---  
---  // UserStats state
---  coins: number;
---  statsLoading: boolean;
---  error: string | null;
---  
---  // Actions
---  updateProfile: (updates: any) => Promise<void>;
---  refreshUserInfo: () => Promise<void>;
---  updateCoins: (amount: number) => Promise<void>;
---  updateCoinsDisplay: (newAmount: number) => void;
---  setIsSubscribed: (status: boolean) => void;
---  setCompletedSteps: (steps: string[]) => void;
---  addCompletedStep: (step: string) => void;
---  updateStudyPreferences: (preferences: Partial<UserSlice['studyPreferences']>) => void;
---  updateInterfaceSettings: (settings: Partial<UserSlice['interfaceSettings']>) => void;
---  updateTutorialProgress: (progress: Partial<UserSlice['tutorialProgress']>) => void;
---  setOnboardingComplete: (completed: boolean) => void;
---  setLastVisitedRoute: (route: string) => void;
---  setOnboardingRoute: (route: string) => void;
---}
---
---// Audio Slice has been moved to its own file: slices/audioSlice.ts
---// Game Slice has been moved to its own file: slices/gameSlice.ts
---
---//******************************************* Vocab Slice ****************************************************//
---interface VocabSlice {
---  // Vocab state
---  vocabList: Array<{
---    word: string;
---    definitions: string;
---  }>;
---  showVocabList: boolean;
---  isCmdIEnabled: boolean;
---  
---  // Vocab actions
---  addVocabWord: (word: string, definition: string) => void;
---  removeVocabWord: (word: string) => void;
---  toggleVocabList: () => void;
---  toggleCmdI: () => void;
---}
---
---// Updated to exclude AudioSlice, UISlice, and GameSlice since they're now in their own files
---type Store = UserSlice & VocabSlice;
---
---//====================================================================================================//
---//================================= Store Initialization =============================================//
---//====================================================================================================//
---
---export const useStore = create<Store>()(
---  devtools(
---    (set, get) => ({
---      //***********************************************************************************************//
---      //************************************** USER State *********************************************//
---      //***********************************************************************************************//
---      // User State
---      profile: null,
---      profileLoading: true,
---      isProfileComplete: false,
---      completedSteps: [],
---      studyPreferences: {
---        dailyGoal: 30, // Default: 30 minutes
---        reminderTime: '09:00', // Default: 9 AM
---      },
---      interfaceSettings: {
---        darkMode: false,
---        fontSize: 'medium',
---      },
---      tutorialProgress: {
---        currentStep: 0,
---        completedRoutes: [],
---      },
---      onboardingComplete: false,
---      lastVisitedRoute: '/',
---      onboardingRoute: '/onboarding',
---      userInfo: null,
---      isSubscribed: false,
---      coins: 0,
---      statsLoading: true,
---      error: null,
---
---      // User Actions
---      updateProfile: async (updates) => {
---        try {
---          // Get the current profile and email/userId for the API call
---          const currentProfile = get().profile;
---          const userInfo = get().userInfo;
---          
---          if (!userInfo || (!userInfo.email && !userInfo.userId)) {
---            console.error('Cannot update profile: No user email or ID available');
---            return;
---          }
---          
---          // Determine query parameter
---          
---          const queryParam = userInfo.email 
---            ? `email=${encodeURIComponent(userInfo.email)}` 
---            : `userId=${userInfo.userId}`;
---          
---          // Implement your API call here
---          const response = await fetch(`/api/user-info/profile?${queryParam}`, {
---            method: 'PATCH',
---            headers: { 'Content-Type': 'application/json' },
---            body: JSON.stringify(updates)
---          });
---          
---          if (!response.ok) throw new Error('Failed to update profile');
---          
---          const updatedProfile = await response.json();
---          
---          // Update the profile and related state
---          set({ 
---            profile: updatedProfile,
---            profileLoading: false,
---            // Update other profile-related state if present in the response
---            ...(updatedProfile.completedSteps && { completedSteps: updatedProfile.completedSteps }),
---            ...(updatedProfile.studyPreferences && { studyPreferences: updatedProfile.studyPreferences }),
---            ...(updatedProfile.interfaceSettings && { interfaceSettings: updatedProfile.interfaceSettings }),
---            ...(updatedProfile.tutorialProgress && { tutorialProgress: updatedProfile.tutorialProgress }),
---            ...(updatedProfile.onboardingComplete !== undefined && { 
---              onboardingComplete: updatedProfile.onboardingComplete 
---            }),
---            ...(updatedProfile.lastVisitedRoute && { lastVisitedRoute: updatedProfile.lastVisitedRoute }),
---            ...(updatedProfile.onboardingRoute && { onboardingRoute: updatedProfile.onboardingRoute }),
---          });
---          
---          // Update isProfileComplete based on completedSteps
---          const steps = updatedProfile.completedSteps || get().completedSteps;
---          set({ isProfileComplete: steps.length >= 3 }); // Assuming 3 steps is complete
---        } catch (error) {
---          console.error('Failed to update profile:', error);
---        }
---      },
---      
---      refreshUserInfo: async () => {
---        try {
---          // Only set loading if not already loading
---          const currentState = get();
---          if (!currentState.statsLoading && !currentState.profileLoading) {
---            set({ statsLoading: true, profileLoading: true, error: null });
---          }
---
---          // Add loading timeout
---          const loadingTimeout = setTimeout(() => {
---            const state = get();
---            if (state.statsLoading || state.profileLoading) {
---              set({ 
---                statsLoading: false,
---                profileLoading: false,
---                error: 'Loading timeout - please try again'
---              });
---            }
---          }, 10000);
---
---          // Batch all fetch requests together
---          const [userInfoResponse, profileResponse] = await Promise.all([
---            fetch('/api/user-info'),
---            fetch('/api/user-info/profile')
---          ]);
---
---          clearTimeout(loadingTimeout);
---
---          if (!userInfoResponse.ok) throw new Error('Failed to fetch user info');
---          const userInfo = await userInfoResponse.json();
---          
---          // Check if user is in 14-day free trial period based on account creation date
---          const isNewUserTrial = userInfo.createdAt ? isWithin14Days(new Date(userInfo.createdAt)) : false;
---
---          // Prepare single state update with only changed values
---          const updates: Partial<Store> = {
---            userInfo,
---            statsLoading: false,
---            profileLoading: false,
---            error: null
---          };
---
---          // Only update coins if changed
---          if (userInfo.score !== get().coins) {
---            updates.coins = userInfo.score || 0;
---          }
---
---          // Only update subscription if changed
---          // Match main branch behavior by including trial subscriptions
---          // Also include users in their 14-day trial period
---          const newSubStatus = 
---            userInfo.subscriptionType === 'gold' || 
---            userInfo.subscriptionType === 'premium' ||
---            userInfo.subscriptionType?.startsWith('Gold') ||
---            userInfo.subscriptionType?.includes('_Trial') || 
---            isNewUserTrial || 
---            false;
---            
---          if (newSubStatus !== get().isSubscribed) {
---            updates.isSubscribed = newSubStatus;
---          }
---
---          // IMPORTANT: Check onboarding status from userInfo.onboardingInfo
---          if (userInfo.onboardingInfo && typeof userInfo.onboardingInfo === 'object') {
---            // Check if targetScore exists (main branch logic)
---            const targetScore = userInfo.onboardingInfo.targetScore;
---            const isOnboardingComplete = targetScore !== undefined && 
---                                  targetScore !== null && 
---                                  targetScore > 0;
---            
---            // Set onboardingComplete based on targetScore criteria to match main branch
---            if (isOnboardingComplete !== get().onboardingComplete) {
---              // Apply this update immediately and separately from the batch update
---              set({ onboardingComplete: isOnboardingComplete });
---              
---              // Remove from batch updates to avoid overwriting
---              delete updates.onboardingComplete;
---              
---              // Sync with database if there's a mismatch
---              const dbOnboardingComplete = userInfo.onboardingInfo.onboardingComplete === true;
---              if (dbOnboardingComplete !== isOnboardingComplete) {
---                // Queue an update to sync the database value
---                setTimeout(() => {
---                  get().updateProfile({ onboardingComplete: isOnboardingComplete });
---                }, 0);
---              }
---            }
---          }
---
---          if (profileResponse.ok) {
---            const profileData = await profileResponse.json();
---            const currentProfile = get().profile;
---            
---            // Only update profile fields that have changed
---            if (JSON.stringify(currentProfile) !== JSON.stringify(profileData)) {
---              Object.assign(updates, {
---                profile: profileData,
---                completedSteps: profileData.completedSteps || [],
---                studyPreferences: profileData.studyPreferences || {
---                  dailyGoal: 30,
---                  reminderTime: '09:00'
---                },
---                interfaceSettings: profileData.interfaceSettings || {
---                  darkMode: false,
---                  fontSize: 'medium'
---                },
---                tutorialProgress: profileData.tutorialProgress || {
---                  currentStep: 0,
---                  completedRoutes: []
---                },
---                lastVisitedRoute: profileData.lastVisitedRoute || '/',
---                onboardingRoute: profileData.onboardingRoute || '/onboarding',
---                isProfileComplete: (profileData.completedSteps || []).length >= 3
---              });
---            }
---          }
---
---          // Single state update for all other fields
---          set(updates);
---
---        } catch (error) {
---          console.error('Error in refreshUserInfo:', error);
---          set({ 
---            error: error instanceof Error ? error.message : 'Failed to refresh user info',
---            statsLoading: false,
---            profileLoading: false
---          });
---        }
---      },
---      
---      updateCoins: async (amount) => {
---        try {
---          // Implement your API call to update coins/score
---          const response = await fetch('/api/user/score', {
---            method: 'POST',
---            headers: { 'Content-Type': 'application/json' },
---            body: JSON.stringify({ amount })
---          });
---          
---          if (!response.ok) throw new Error('Failed to update coins');
---          
---          // After successful update, refresh user info to get updated data
---          await get().refreshUserInfo();
---        } catch (error) {
---          console.error('Failed to update coins:', error);
---        }
---      },
---      
---      updateCoinsDisplay: (newAmount) => {
---        set({ coins: newAmount });
---      },
---      
---      setIsSubscribed: (status) => {
---        set({ isSubscribed: status });
---      },
---      
---      // New profile-related actions
---      setCompletedSteps: (steps) => {
---        set({ completedSteps: steps });
---        set({ isProfileComplete: steps.length >= 3 }); // Assuming 3 steps is complete
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ profile: { ...profile, completedSteps: steps } });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ completedSteps: steps });
---      },
---      
---      addCompletedStep: (step) => {
---        const currentSteps = get().completedSteps;
---        if (!currentSteps.includes(step)) {
---          const newSteps = [...currentSteps, step];
---          set({ completedSteps: newSteps });
---          set({ isProfileComplete: newSteps.length >= 3 }); // Assuming 3 steps is complete
---          
---          // Also update the profile object for consistency
---          const profile = get().profile;
---          if (profile) {
---            set({ profile: { ...profile, completedSteps: newSteps } });
---          }
---          
---          // Persist to backend if possible
---          get().updateProfile({ completedSteps: newSteps });
---        }
---      },
---      
---      updateStudyPreferences: (preferences) => {
---        const currentPreferences = get().studyPreferences;
---        const updatedPreferences = { ...currentPreferences, ...preferences };
---        set({ studyPreferences: updatedPreferences });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              studyPreferences: updatedPreferences 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ studyPreferences: updatedPreferences });
---      },
---      
---      updateInterfaceSettings: (settings) => {
---        const currentSettings = get().interfaceSettings;
---        const updatedSettings = { ...currentSettings, ...settings };
---        set({ interfaceSettings: updatedSettings });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              interfaceSettings: updatedSettings 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ interfaceSettings: updatedSettings });
---      },
---      
---      updateTutorialProgress: (progress) => {
---        const currentProgress = get().tutorialProgress;
---        const updatedProgress = { ...currentProgress, ...progress };
---        set({ tutorialProgress: updatedProgress });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              tutorialProgress: updatedProgress 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ tutorialProgress: updatedProgress });
---      },
---      
---      setOnboardingComplete: (completed) => {
---        set({ onboardingComplete: completed });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              onboardingComplete: completed 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ onboardingComplete: completed });
---      },
---      
---      setLastVisitedRoute: (route) => {
---        set({ lastVisitedRoute: route });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              lastVisitedRoute: route 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ lastVisitedRoute: route });
---      },
---      
---      setOnboardingRoute: (route) => {
---        set({ onboardingRoute: route });
---        
---        // Also update the profile object for consistency
---        const profile = get().profile;
---        if (profile) {
---          set({ 
---            profile: { 
---              ...profile, 
---              onboardingRoute: route 
---            } 
---          });
---        }
---        
---        // Persist to backend if possible
---        get().updateProfile({ onboardingRoute: route });
---      },
---
---      //************************************************************************************************//
---      //************************************** Vocab State *******************************************//
---      //***********************************************************************************************//
---      
---      // Vocab state
---      vocabList: [],
---      showVocabList: false,
---      isCmdIEnabled: false,
---      
---      // Vocab actions
---      addVocabWord: (word, definition) => {
---        set((state) => ({
---          vocabList: [...state.vocabList, { word, definitions: definition }],
---          showVocabList: true
---        }));
---      },
---      removeVocabWord: (word) => {
---        set((state) => ({
---          vocabList: state.vocabList.filter((v) => v.word !== word),
---          showVocabList: state.vocabList.length > 1
---        }));
---      },
---      toggleVocabList: () => {
---        set((state) => ({
---          showVocabList: !state.showVocabList
---        }));
---      },
---      toggleCmdI: () => {
---        set((state) => ({
---          isCmdIEnabled: !state.isCmdIEnabled
---        }));
---      }
---    }),
---    {
---      name: 'main-store'
---    }
---  )
---) 
---
---// Export a function to initialize the store at the app level
---export const initializeGlobalStore = async () => {
---  if (typeof window !== 'undefined' && !isStoreInitialized) {
---    console.debug('[DEBUG][Store] Initializing global store from exported function');
---    
---    try {
---      // Initialize audio context from the audio slice
---      await useAudioStore.getState().initializeAudioContext();
---      
---      // Initialize UI state
---      const savedTheme = localStorage.getItem('theme');
---      if (savedTheme && ['cyberSpace', 'sakuraTrees', 'sunsetCity', 'mykonosBlue'].includes(savedTheme)) {
---        useUIStore.getState().setTheme(savedTheme as any);
---      }
---      
---      // Set initialization flag
---      isStoreInitialized = true;
---      console.debug('[DEBUG][Store] Store initialization complete');
---    } catch (error) {
---      console.error('[DEBUG][Store] Store initialization failed:', error);
---    }
---  }
---};
---
---export type Card = {
---  id: string;
---  question: string;
---  answer: string;
---  explanation?: string;
---  category?: string;
---  difficulty?: string;
---  otherOptions?: string[];
---}; 
--\ No newline at end of file
--diff --git a/types/user.ts b/types/user.ts
--index fbfebfd1ee6aedbc07291a8e11c0e9b571da8789..9d2768fc5bd35c2f9cabf06bb48cc9856034b4da 100644
----- a/types/user.ts
--+++ b/types/user.ts
--@@ -4,6 +4,10 @@
-- export interface OnboardingInfo {
--   targetScore?: number;
--   testDate?: string;
--+  currentStep?: number;
--+  firstName?: string;
--+  college?: string;
--+  onboardingComplete?: boolean;
--   // Add other onboarding fields as needed
-- }
-- 
-diff --git a/README_Docs/tasks/user-dennis/4-PR-Diff.txt b/README_Docs/tasks/user-dennis/4-PR-Diff.txt
-new file mode 100644
-index 0000000000000000000000000000000000000000..2ac744eeeed50914497849b410955d0758e436df
-diff --git a/README_Docs/tasks/user-dennis/4-PR-Notes.md b/README_Docs/tasks/user-dennis/4-PR-Notes.md
-new file mode 100644
-index 0000000000000000000000000000000000000000..cac8fa863930be166e61e03335928118f3e82497
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/4-PR-Notes.md
-@@ -0,0 +1,107 @@
-+# PR Analysis Notes
-+
-+## Summary of Key Changes
-+
-+This PR addresses several critical bugs and implements significant improvements in the onboarding and user authentication flows. The primary focus has been eliminating race conditions, improving state management, and ensuring a more reliable user experience.
-+
-+### 1. Fixed Core Navigation Bug
-+- Resolved the issue where users were inappropriately redirected from the root URL (`localhost:3000` or `mymcat.ai`).
-+- Implemented proper logic to ensure redirects only occur when users explicitly click the login button.
-+- Added specific handling for various user flows (new users, returning users, post-login, post-logout).
-+
-+### 2. Eliminated Race Conditions
-+- Replaced arbitrary timeouts (1-second delay in `StoreInitializer`) with dependency-based approaches.
-+- Implemented comprehensive loading state management:
-+  - Added detailed tracking of async operations
-+  - Created proper state transition handling
-+  - Eliminated cascading and redundant data fetches
-+- Fixed the "duplicate onboardingComplete" bug by implementing defensive programming patterns.
-+
-+### 3. Improved State Management
-+- Enhanced the Zustand store implementation with better error handling and loading states.
-+- Implemented atomic state updates to prevent UI inconsistencies.
-+- Added safeguards against root-level `onboardingComplete` property bug.
-+- Improved data synchronization patterns between the client and server.
-+
-+### 4. Enhanced Developer Experience
-+- Removed redundant debug statements and console logs.
-+- Simplified logging to focus on critical events and errors.
-+- Organized code with clearer structure and proper section headers.
-+- Improved documentation with detailed notes on implementation patterns.
-+
-+### 5. Code Quality Improvements
-+- Refactored `StoreInitializer` component to use dependency-based refreshes.
-+- Enhanced `RouteTracker` with better loading state detection and management.
-+- Improved `useOnboardingInfo` hook with proper request state tracking.
-+- Implemented defensive coding patterns to prevent data inconsistencies.
-+
-+## Impact Areas
-+
-+1. **User Authentication Flow**
-+   - Landing page behavior
-+   - Login/registration process
-+   - Session management
-+   - Post-authentication redirects
-+
-+2. **Onboarding Process**
-+   - Step progression
-+   - Data persistence
-+   - State synchronization
-+   - Validation checks
-+
-+3. **Global State Management**
-+   - User data handling
-+   - Loading states
-+   - Error handling
-+   - Data fetching patterns
-+
-+## Testing Recommendations
-+
-+1. **Core Navigation Scenarios**
-+   - Verify root URL (`localhost:3000`) behavior when:
-+     - A new user visits the site
-+     - A returning user (who completed onboarding) visits
-+     - A user with incomplete onboarding visits
-+     - A user manually navigates to root after being logged in
-+     - A user returns to the site after logging out
-+
-+2. **Onboarding Flow**
-+   - Test all onboarding steps, especially:
-+     - Incomplete onboarding resumption
-+     - Final step completion
-+     - Validation of required fields
-+     - Proper redirects after completion
-+
-+3. **Edge Cases**
-+   - Interrupted network connections during onboarding
-+   - Multiple concurrent sessions
-+   - Browser refresh during critical state transitions
-+
-+## Questions for Review
-+
-+1. Should we implement the suggested `refreshUserInfo()` call in `handleReferralComplete` for complete synchronization?
-+2. Are there any remaining edge cases in the navigation flow that should be addressed?
-+3. Should we consider adopting React Query or SWR for data fetching in future updates?
-+
-+## Next Steps
-+
-+If this PR is approved, we should consider the following future improvements:
-+
-+1. ✅ Implemented critical state synchronization improvements:
-+   - Added a full `refreshUserInfo()` call after setting `onboardingComplete: true` in `handleReferralComplete()`
-+   - Implemented atomic updates for related state changes with the new `batchUpdateProfile` function
-+   - Added error handling with rollback capabilities for failed API operations
-+   - Replaced individual property updates with batch updates for related changes
-+
-+2. Additional recommended improvements:
-+   - Reduce API calls through batching and caching
-+   - Enhance error handling with retry logic
-+   - Further streamline state management
-+   - Improve auth flow with session persistence
-+
-+3. Add comprehensive automated tests for all critical user flows
-+
-+4. Consider performance optimizations:
-+   - Caching strategies for user data
-+   - Optimistic UI updates
-+   - Lazy loading of non-critical components
-\ No newline at end of file
-diff --git a/README_Docs/tasks/user-dennis/4-PR-[Command].md b/README_Docs/tasks/user-dennis/4-PR-[Command].md
-new file mode 100644
-index 0000000000000000000000000000000000000000..c89176020271ca14214276ec0960db4e47b4fa87
---- /dev/null
-+++ b/README_Docs/tasks/user-dennis/4-PR-[Command].md
-@@ -0,0 +1,21 @@
-+# PR Diff Analysis Workflow
-+
-+## Step 1: Generate the diff
-+Run the following command to write the diff to 4-PR-Diff.txt:
-+
-+```bash
-+# Generate detailed diff against main
-+git diff --full-index main -- > README_Docs/tasks/user-dennis/4-PR-Diff.txt
-+```
-+
-+## Step 2: Analyze the diff
-+Carefully examine 4-PR-Diff.txt to identify all changes between your branch and main:
-+- Review file additions, deletions, and modifications
-+- Understand functional changes vs. cosmetic changes
-+
-+## Step 3: Document your analysis
-+Write a detailed analysis of your findings in 4-PR-Notes.md, including:
-+- Summary of key changes
-+- Potential impact areas
-+- Recommendations for the PR review
-+- Any questions that need to be addressed before merging 
-\ No newline at end of file
-diff --git a/README_Docs/tasks/user-dennis/4-debug-console.txt b/README_Docs/tasks/user-dennis/4-debug-console.txt
-deleted file mode 100644
-index 75f5ba87bf2e3d07cf04f27d592a91337c8554b0..0000000000000000000000000000000000000000
---- a/README_Docs/tasks/user-dennis/4-debug-console.txt
-+++ /dev/null
-@@ -1,217 +0,0 @@
--initializationContentScript.js:1 Chrome storage API available, initializing emoji style sync
--content.js:1 [Deprecation] Listener added for a 'DOMNodeInserted' mutation event. Support for this event type has been removed, and this event will no longer be fired. See https://chromestatus.com/feature/5083947249172480 for more information.
--(anonymous) @ content.js:1
--j @ jquery.js:2
--fireWith @ jquery.js:2
--ready @ jquery.js:2
--I @ jquery.js:2
--contentScript.js:2 Chrome storage API available, initializing emoji style sync
--musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: false, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: cyberSpace
--audioSlice.ts:193 [AudioSlice] Theme changed to cyberSpace wasPlaying: false
--layout.tsx:46 🎫 Subscription Status: FREE
--musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: cyberSpace
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 0, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: cyberSpace
--audioSlice.ts:193 [AudioSlice] Theme changed to cyberSpace wasPlaying: false
--layout.tsx:46 🎫 Subscription Status: FREE
--musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: sakuraTrees
--audioSlice.ts:193 [AudioSlice] Theme changed to sakuraTrees wasPlaying: false
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
--musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--script.debug.js:1 [Vercel Web Analytics] Debug mode is enabled by default in development. No requests will be sent to the server.
--script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home?debug=true {o: 'http://localhost:3000/home?debug=true', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742498654486, …}
--audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--
--                
--          
--          
--          
--         Chrome is moving towards a new experience that allows users to choose to browse without third-party cookies.
--layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
--script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/ {o: 'http://localhost:3000/', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742498669025, …}
--script.debug.js:1 [Vercel Web Analytics] [pageview] http://localhost:3000/home {o: 'http://localhost:3000/home', sv: '0.1.2', sdkn: '@vercel/analytics/react', sdkv: '1.3.1', ts: 1742498670288, …}
--musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: false, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: true}
--musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: sakuraTrees
--audioSlice.ts:193 [AudioSlice] Theme changed to sakuraTrees wasPlaying: false
--layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
--musicplayer.tsx:104 [MusicPlayer] Initializing audio context
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: sakuraTrees
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
--layout.tsx:46 🎫 Subscription Status: GOLD or PREMIUM
--musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--musicplayer.tsx:107 [MusicPlayer] Audio context initialized successfully
--audioSlice.ts:219 [AudioSlice] Not playing music after theme change
--useNotifications.ts:32 
--            
--            
--           GET http://localhost:3000/api/notifications 500 (Internal Server Error)
--eval @ useNotifications.ts:32
--useNotifications.ts:32 
--            
--            
--           GET http://localhost:3000/api/notifications 500 (Internal Server Error)
--eval @ useNotifications.ts:32
--useNotifications.ts:32 
--            
--            
--           GET http://localhost:3000/api/notifications 500 (Internal Server Error)
--eval @ useNotifications.ts:32
--useNotifications.ts:32 
--            
--            
--           GET http://localhost:3000/api/notifications 500 (Internal Server Error)
--eval @ useNotifications.ts:32
--useNotifications.ts:32 
--            
--            
--           GET http://localhost:3000/api/notifications 500 (Internal Server Error)
--eval @ useNotifications.ts:32
--musicplayer.tsx:150 [MusicPlayer] Toggle play button clicked
--musicplayer.tsx:177 [MusicPlayer] Toggling playback with existing queue
--audioSlice.ts:225 [AudioSlice] togglePlayPause called, checking current state
--audioSlice.ts:256 [AudioSlice] Starting playback from queue
--audioSlice.ts:259 [AudioSlice] Playing song at index 0 : /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2FsakuraTrees1.mp3
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2FsakuraTrees1.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2FsakuraTrees1.mp3
--audioSlice.ts:419 [AudioSlice] Fetching audio from: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2FsakuraTrees1.mp3
--audioSlice.ts:426 [AudioSlice] Audio fetch successful, processing array buffer...
--audioSlice.ts:436 [AudioSlice] Decoding audio data...
--audioSlice.ts:438 [AudioSlice] Audio data decoded successfully, caching buffer
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.699999988079071
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:263 [AudioSlice] Playback started successfully
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: false, shouldUpdateQueue: true}
--musicplayer.tsx:139 [MusicPlayer] Updating song queue for theme: mykonosBlue
--audioSlice.ts:193 [AudioSlice] Theme changed to mykonosBlue wasPlaying: false
--audioSlice.ts:198 [AudioSlice] Stopping current music before theme change
--audioSlice.ts:564 [AudioSlice] stopMusic called
--audioSlice.ts:572 [AudioSlice] Stopping music with audio context
--audioSlice.ts:581 [AudioSlice] Using gain node for smooth fade-out
--audioSlice.ts:655 [AudioSlice] Music playback stopped
--musicplayer.tsx:116 [MusicPlayer] Theme changed or component mounted, theme: mykonosBlue
--musicplayer.tsx:131 [MusicPlayer] Queue status: {initialized: true, queueLength: 10, firstSongMatchesTheme: true, shouldUpdateQueue: false}
--audioSlice.ts:600 [AudioSlice] Music source stopped with fade-out
--audioSlice.ts:533 [AudioSlice] Track ended naturally, advancing to next song
--audioSlice.ts:210 [AudioSlice] Auto-playing first song from new theme
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:419 [AudioSlice] Fetching audio from: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--musicplayer.tsx:150 [MusicPlayer] Toggle play button clicked
--musicplayer.tsx:177 [MusicPlayer] Toggling playback with existing queue
--audioSlice.ts:225 [AudioSlice] togglePlayPause called, checking current state
--audioSlice.ts:256 [AudioSlice] Starting playback from queue
--audioSlice.ts:259 [AudioSlice] Playing song at index 0 : /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:419 [AudioSlice] Fetching audio from: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--musicplayer.tsx:150 [MusicPlayer] Toggle play button clicked
--musicplayer.tsx:177 [MusicPlayer] Toggling playback with existing queue
--audioSlice.ts:225 [AudioSlice] togglePlayPause called, checking current state
--audioSlice.ts:256 [AudioSlice] Starting playback from queue
--audioSlice.ts:259 [AudioSlice] Playing song at index 0 : /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:419 [AudioSlice] Fetching audio from: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:426 [AudioSlice] Audio fetch successful, processing array buffer...
--audioSlice.ts:426 [AudioSlice] Audio fetch successful, processing array buffer...
--audioSlice.ts:426 [AudioSlice] Audio fetch successful, processing array buffer...
--audioSlice.ts:436 [AudioSlice] Decoding audio data...
--audioSlice.ts:436 [AudioSlice] Decoding audio data...
--audioSlice.ts:436 [AudioSlice] Decoding audio data...
--audioSlice.ts:438 [AudioSlice] Audio data decoded successfully, caching buffer
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.009999999776482582
--audioSlice.ts:523 [AudioSlice] Gain node volume too low, resetting to: 0.7
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:263 [AudioSlice] Playback started successfully
--audioSlice.ts:438 [AudioSlice] Audio data decoded successfully, caching buffer
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.699999988079071
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:263 [AudioSlice] Playback started successfully
--audioSlice.ts:438 [AudioSlice] Audio data decoded successfully, caching buffer
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.699999988079071
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:214 [AudioSlice] New theme music started successfully
--musicplayer.tsx:150 [MusicPlayer] Toggle play button clicked
--musicplayer.tsx:177 [MusicPlayer] Toggling playback with existing queue
--audioSlice.ts:225 [AudioSlice] togglePlayPause called, checking current state
--audioSlice.ts:229 [AudioSlice] Currently playing, stopping music
--audioSlice.ts:241 [AudioSlice] Music source stopped and disconnected
--audioSlice.ts:533 [AudioSlice] Track ended naturally, advancing to next song
--musicplayer.tsx:150 [MusicPlayer] Toggle play button clicked
--musicplayer.tsx:177 [MusicPlayer] Toggling playback with existing queue
--audioSlice.ts:225 [AudioSlice] togglePlayPause called, checking current state
--audioSlice.ts:256 [AudioSlice] Starting playback from queue
--audioSlice.ts:259 [AudioSlice] Playing song at index 0 : /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:413 [AudioSlice] Using cached buffer for: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue1.mp3
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.699999988079071
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:263 [AudioSlice] Playback started successfully
--musicplayer.tsx:182 [MusicPlayer] Next song button clicked
--musicplayer.tsx:188 [MusicPlayer] Skipping to next song
--audioSlice.ts:360 [AudioSlice] skipToNext called
--audioSlice.ts:372 [AudioSlice] Advancing from index 0 to 1
--audioSlice.ts:379 [AudioSlice] Storing current volume for restoration: 0.7
--audioSlice.ts:564 [AudioSlice] stopMusic called
--audioSlice.ts:572 [AudioSlice] Stopping music with audio context
--audioSlice.ts:581 [AudioSlice] Using gain node for smooth fade-out
--audioSlice.ts:655 [AudioSlice] Music playback stopped
--audioSlice.ts:600 [AudioSlice] Music source stopped with fade-out
--audioSlice.ts:533 [AudioSlice] Track ended naturally, advancing to next song
--audioSlice.ts:386 [AudioSlice] Timeout completed, playing next song: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue2.mp3
--audioSlice.ts:391 [AudioSlice] Reset music gain node to original volume: 0.7
--audioSlice.ts:449 [AudioSlice] playMusic called with URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue2.mp3
--audioSlice.ts:489 [AudioSlice] Loading audio buffer for track
--audioSlice.ts:405 [AudioSlice] Loading audio buffer for URL: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue2.mp3
--audioSlice.ts:419 [AudioSlice] Fetching audio from: /api/audio?url=https%3A%2F%2Fmy-mcat.s3.us-east-2.amazonaws.com%2Fmusic%2Fmykonosblue2.mp3
--audioSlice.ts:426 [AudioSlice] Audio fetch successful, processing array buffer...
--audioSlice.ts:436 [AudioSlice] Decoding audio data...
--audioSlice.ts:438 [AudioSlice] Audio data decoded successfully, caching buffer
--audioSlice.ts:492 [AudioSlice] Audio buffer loaded successfully
--audioSlice.ts:508 [AudioSlice] Reset music gain node to volume: 0.7
--audioSlice.ts:512 [AudioSlice] Creating audio source node
--audioSlice.ts:518 [AudioSlice] Connecting to music gain node with volume: 0.699999988079071
--audioSlice.ts:543 [AudioSlice] Starting playback
--audioSlice.ts:553 [AudioSlice] Playback started, state updated
--audioSlice.ts:396 [AudioSlice] Next song playback started successfully
-diff --git a/README_Docs/tasks/user-dennis/5-cursor-notes.md b/README_Docs/tasks/user-dennis/5-cursor-notes.md
-index 909495f5285da102e6fbf353f81bb494e9b96ea1..fe351b945000e48f239c50fa54d09644e02e1d40 100644
---- a/README_Docs/tasks/user-dennis/5-cursor-notes.md
-+++ b/README_Docs/tasks/user-dennis/5-cursor-notes.md
-@@ -4,7 +4,8 @@
- ` Do not apply code changes, just analyze the codebase and write out your steps to 2-single-task-steps.md`
- 
- #### Compare functionality to main
--To thoroughly evaluate whether our branch behaves functionally the same as main, use both approaches:
-+To thoroughly evaluate whether our branch behaves functionally the same as main:
-+
- 1. Add main branch to worktree for direct file comparison:
- ```bash
- # Add main branch as a worktree for comparison
-@@ -13,21 +14,14 @@ git worktree add main
- git worktree remove main
- ```
- 
--2. Create a diff file for Cursor analysis:
--```bash
--# Generate detailed diff against main
--git diff --full-index main -- > README_Docs/tasks/user-dennis/3-pr-diff.txt
--```
--
--3. Working with Cursor:
-+2. Working with Cursor:
- Prompt to use for comparison
- 
- ```
--Carefully examine both the diff against main @3-pr-diff.txt and our `main` branch repo itself, which was added to our worktree @main 
-+Carefully examine our `main` branch repo itself, which was added to our worktree @main 
- Evaluate whether our branch behaves and acts functionally the SAME as main.
- ```
- 
--Having both the worktree and diff file available provides:
-+Having the worktree available provides:
- - Direct access to main branch files for inspection
--- A comprehensive diff that Cursor can analyze
- - The ability to verify functional equivalence with confidence
-\ No newline at end of file
-diff --git a/components/RouteTracker.tsx b/components/RouteTracker.tsx
-index 23f2464e2fbec6f8328276ad0173b1f30cffda01..d75cb33bb122fc749406926d61dfc6c01b2c54ef 100644
---- a/components/RouteTracker.tsx
-+++ b/components/RouteTracker.tsx
-@@ -14,9 +14,31 @@ import { useAuth as useClerkAuth } from '@clerk/nextjs';
- // Define auth-related paths that should be exempt from redirects
- const AUTH_PATHS = ['/sign-in', '/sign-up', '/login', '/register', '/auth', '/sso-callback'];
- 
--// Define other exempt paths
-+// Define other exempt paths - Remove '/' from this list since we handle it specially
- const EXEMPT_PATHS = ['/auth', '/api', '/redirect', '/examcalendar', '/pricing', '/terms'];
- 
-+// Type for tracking loading states
-+type LoadingState = {
-+  auth: boolean;      // Clerk auth loaded
-+  profile: boolean;   // User profile data loaded
-+  stats: boolean;     // User stats loaded
-+  studyPlan: boolean; // Study plan check loading
-+  redirect: boolean;  // Redirect in progress
-+};
-+
-+// Type for tracking async operations
-+type AsyncOpState = {
-+  loading: boolean;
-+  error: Error | null;
-+  complete: boolean;
-+};
-+
-+const initialAsyncState: AsyncOpState = {
-+  loading: false,
-+  error: null,
-+  complete: false
-+};
-+
- const RouteTracker = () => {
-   const pathname = usePathname();
-   const searchParams = useSearchParams();
-@@ -27,22 +49,88 @@ const RouteTracker = () => {
-   const { isLoaded } = useClerkAuth();
-   const { stopLoop, currentLoop } = useAudio();
-   
-+  // Consolidated loading state
-+  const [loadingState, setLoadingState] = useState<LoadingState>({
-+    auth: true,
-+    profile: true,
-+    stats: true,
-+    studyPlan: false,
-+    redirect: false
-+  });
-+  
-+  // Request state for study plan check
-+  const [studyPlanCheckState, setStudyPlanCheckState] = useState<AsyncOpState>(initialAsyncState);
-+  
-+  // State flags
-+  const [justLoggedIn, setJustLoggedIn] = useState(false);
-   const [initialLoadComplete, setInitialLoadComplete] = useState(false);
-+  
-+  // Refs for redirection management
-   const lastRedirectTime = useRef<number>(0);
-   const isRedirecting = useRef<boolean>(false);
--
-+  const prevSignedInState = useRef<boolean | undefined>(undefined);
-+  
-+  // Debug mode - Set to true to enable verbose logging
-+  const isDebugMode = searchParams?.get('debug') === 'true';
-+  
-+  // Debug logging helper that only logs in debug mode
-+  const debugLog = useCallback((section: string, ...args: unknown[]) => {
-+    if (isDebugMode) {
-+      console.log(`[${section}]`, ...args);
-+    }
-+  }, [isDebugMode]);
-+  
-+  // Update loading state when auth or data loading status changes
-+  useEffect(() => {
-+    setLoadingState(prev => ({
-+      ...prev,
-+      auth: !isLoaded,
-+      profile: profileLoading,
-+      stats: statsLoading
-+    }));
-+    
-+    // Track initial load completion when all primary data is loaded
-+    if (isLoaded && !profileLoading && !statsLoading && userInfo && !initialLoadComplete) {
-+      setInitialLoadComplete(true);
-+    }
-+  }, [isLoaded, profileLoading, statsLoading, userInfo, initialLoadComplete]);
-+  
-   // Memoize values that are used in effect dependencies to prevent unnecessary re-renders
-   const isExemptPath = useMemo(() => {
-+    // Root path is always exempt
-+    if (pathname === '/') {
-+      debugLog('PATH_CHECK', 'Root path is exempt');
-+      return true;
-+    }
-+    
-     if (!pathname) return false;
--    return AUTH_PATHS.some(path => pathname.includes(path)) || 
--           EXEMPT_PATHS.some(path => pathname.startsWith(path));
--  }, [pathname]);
-+    
-+    // Always exempt auth-related paths
-+    if (AUTH_PATHS.some(path => pathname.includes(path))) {
-+      debugLog('PATH_CHECK', 'Auth path is exempt');
-+      return true;
-+    }
-+    
-+    // Other standard exempt paths
-+    const isStandardExempt = EXEMPT_PATHS.some(path => pathname.startsWith(path));
-+    debugLog('PATH_CHECK', `Path ${pathname} exempt: ${isStandardExempt}`);
-+    return isStandardExempt;
-+  }, [pathname, debugLog]);
- 
-   // Validate onboarding status (memoized)
-   const effectiveOnboardingComplete = useMemo(() => {
-+    // First check the direct onboardingComplete flag from onboardingInfo
-+    if (userInfo?.onboardingInfo?.onboardingComplete === true) {
-+      debugLog('ONBOARDING', 'Complete via direct flag');
-+      return true;
-+    }
-+    
-+    // Then fall back to targetScore validation as a secondary check
-     const targetScore = userInfo?.onboardingInfo?.targetScore;
--    return targetScore !== undefined && targetScore !== null && targetScore > 0;
--  }, [userInfo?.onboardingInfo?.targetScore]);
-+    const isComplete = targetScore !== undefined && targetScore !== null && targetScore > 0;
-+    debugLog('ONBOARDING', `Complete via target score: ${isComplete}`);
-+    return isComplete;
-+  }, [userInfo?.onboardingInfo?.onboardingComplete, userInfo?.onboardingInfo?.targetScore, debugLog]);
- 
-   // Local utility function for preserving debug parameter
-   const preserveDebugParam = useCallback((path: string): string => {
-@@ -60,10 +148,15 @@ const RouteTracker = () => {
-   const performRedirect = useCallback((targetPath: string, reason: string) => {
-     // Prevent duplicate redirects and throttle redirect attempts
-     if (Date.now() - lastRedirectTime.current < 1000 || isRedirecting.current) {
--      return false;
-+      debugLog('REDIRECT', `Skipping redirect to ${targetPath} - too soon or already redirecting`);
-+      return undefined;
-     }
- 
-+    debugLog('REDIRECT', `Redirecting to ${targetPath} - reason: ${reason}`);
-+
-+    // Set redirect state
-     isRedirecting.current = true;
-+    setLoadingState(prev => ({ ...prev, redirect: true }));
-     lastRedirectTime.current = Date.now();
-     
-     // Use the local function to preserve debug parameter
-@@ -81,11 +174,45 @@ const RouteTracker = () => {
-     // Reset redirect flag after 1.5 seconds
-     setTimeout(() => {
-       isRedirecting.current = false;
-+      setLoadingState(prev => ({ ...prev, redirect: false }));
-     }, 1500);
-     
-     // Return the fallback timeout to allow cleanup
-     return fallbackTimeout;
--  }, [router, preserveDebugParam]);
-+  }, [router, preserveDebugParam, debugLog]);
-+
-+  // Check study plan with proper async state tracking
-+  const checkStudyPlan = useCallback(async (): Promise<boolean> => {
-+    // Set loading state
-+    setStudyPlanCheckState({ loading: true, error: null, complete: false });
-+    setLoadingState(prev => ({ ...prev, studyPlan: true }));
-+    
-+    try {
-+      const response = await fetch('/api/study-plan');
-+      
-+      if (!response.ok) {
-+        throw new Error('Failed to fetch study plan');
-+      }
-+      
-+      const data = await response.json();
-+      
-+      // Update states
-+      setStudyPlanCheckState({ loading: false, error: null, complete: true });
-+      setLoadingState(prev => ({ ...prev, studyPlan: false }));
-+      
-+      // Return whether study plan exists
-+      return !!data.studyPlan;
-+    } catch (error) {
-+      debugLog('STUDY_PLAN', 'Error checking study plan:', error);
-+      
-+      // Set error state
-+      const typedError = error instanceof Error ? error : new Error('Unknown error checking study plan');
-+      setStudyPlanCheckState({ loading: false, error: typedError, complete: true });
-+      setLoadingState(prev => ({ ...prev, studyPlan: false }));
-+      
-+      return false;
-+    }
-+  }, [debugLog]);
- 
-   // Update current route in the store
-   useEffect(() => {
-@@ -94,23 +221,6 @@ const RouteTracker = () => {
-     }
-   }, [pathname, setCurrentRoute]);
- 
--  // Track initial load completion - match main branch behavior
--  useEffect(() => {
--    // Skip loading state tracking if we're on onboarding
--    if (pathname === '/onboarding') {
--      if (!initialLoadComplete) {
--        setInitialLoadComplete(true);
--      }
--      return;
--    }
--
--    // Consider data loaded when both profile and stats are loaded
--    // and we have userInfo data (like main branch)
--    if (!profileLoading && !statsLoading && userInfo && !initialLoadComplete) {
--      setInitialLoadComplete(true);
--    }
--  }, [profileLoading, statsLoading, userInfo, initialLoadComplete, pathname]);
--
-   // Handle ambient sound cleanup on route changes
-   useEffect(() => {    
-     // Only stop the ambient loop if we're not in AnkiClinic and it's currently playing
-@@ -119,47 +229,114 @@ const RouteTracker = () => {
-     }
-   }, [pathname, stopLoop, currentLoop]);
- 
--  // EFFECT 1: Handle immediate redirection for users with no userInfo (like main branch)
-+  // Track if user just logged in
-   useEffect(() => {
--    // Don't redirect during loads or for exempt paths
--    if (!isLoaded || isRedirecting.current || isExemptPath) {
--      return;
-+    const wasExplicitLogin = localStorage.getItem('explicit_login_click') === 'true';
-+    
-+    // If signed in state changed AND it was an explicit login button click
-+    if (isSignedIn === true && prevSignedInState.current !== true && wasExplicitLogin) {
-+      debugLog('AUTH', 'Login detected from explicit button click');
-+      setJustLoggedIn(true);
-+      // Clear the flag
-+      localStorage.removeItem('explicit_login_click');
-     }
-+    
-+    // Update previous state for next comparison
-+    prevSignedInState.current = isSignedIn;
-+  }, [isSignedIn, debugLog]);
- 
--    // If user is signed in but has no userInfo, redirect to onboarding immediately
--    if (isSignedIn && !profileLoading && !userInfo && !pathname?.startsWith('/onboarding')) {
--      const fallback = performRedirect('/onboarding', 'No userInfo');
-+  // Special effect for handling login from root path
-+  useEffect(() => {
-+    // Only handle explicit login redirects on root path
-+    if (pathname !== '/' || !justLoggedIn) return;
-+
-+    // Skip if still loading or redirect in progress
-+    if (!isLoaded || loadingState.profile || isRedirecting.current) return;
-+    
-+    // Decide where to redirect based on onboarding status
-+    if (isSignedIn) {
-+      console.log('[CRITICAL_DEBUG] Login Redirect Decision:', {
-+        onboardingFlag: userInfo?.onboardingInfo?.onboardingComplete,
-+        targetScore: userInfo?.onboardingInfo?.targetScore,
-+        effectiveOnboardingComplete: effectiveOnboardingComplete,
-+        willRedirectTo: effectiveOnboardingComplete ? '/home' : '/onboarding'
-+      });
-       
--      // Clean up fallback timeout if component unmounts
--      return () => {
--        if (fallback) clearTimeout(fallback);
--      };
-+      if (effectiveOnboardingComplete) {
-+        debugLog('ROOT_PATH', 'Redirecting to /home - onboarding complete');
-+        const fallback = performRedirect('/home', 'Login with onboarding complete');
-+        setJustLoggedIn(false); // Reset flag
-+        return () => { if (fallback) clearTimeout(fallback); };
-+      } else {
-+        debugLog('ROOT_PATH', 'Redirecting to /onboarding - onboarding incomplete');
-+        const fallback = performRedirect('/onboarding', 'Login with onboarding incomplete');
-+        setJustLoggedIn(false); // Reset flag
-+        return () => { if (fallback) clearTimeout(fallback); };
-+      }
-     }
--  }, [isSignedIn, userInfo, profileLoading, pathname, isLoaded, isExemptPath, performRedirect]);
-+  }, [
-+    pathname, 
-+    isSignedIn, 
-+    isLoaded, 
-+    justLoggedIn, 
-+    effectiveOnboardingComplete, 
-+    loadingState.profile, 
-+    performRedirect,
-+    debugLog,
-+    userInfo
-+  ]);
- 
--  // EFFECT 2: Handle redirects based on onboarding status (like main branch)
-+  // Handle redirection for users with no userInfo
-   useEffect(() => {
--    if (pathname === '/onboarding' || isExemptPath) {
-+    // Skip if any of these conditions are true
-+    if (
-+      !isLoaded || 
-+      isRedirecting.current || 
-+      isExemptPath || 
-+      !isSignedIn || 
-+      loadingState.profile || 
-+      pathname?.startsWith('/onboarding')
-+    ) {
-       return;
-     }
-     
--    // Only redirect to onboarding if:
--    // 1. User is signed in
--    // 2. Not already on onboarding page
--    // 3. Not in loading state
--    // 4. Onboarding is not complete
--    if (isSignedIn && !profileLoading && !isRedirecting.current && !effectiveOnboardingComplete) {
--      const fallback = performRedirect('/onboarding', 'Onboarding not complete');
-+    // If user is signed in but has no userInfo, redirect to onboarding immediately
-+    if (!userInfo) {
-+      debugLog('USERINFO', 'No userInfo - redirecting to onboarding');
-+      const fallback = performRedirect('/onboarding', 'No userInfo');
-       
-       // Clean up fallback timeout if component unmounts
-       return () => {
-         if (fallback) clearTimeout(fallback);
-       };
-     }
-+  }, [
-+    isSignedIn, 
-+    userInfo, 
-+    loadingState.profile, 
-+    pathname, 
-+    isLoaded, 
-+    isExemptPath, 
-+    performRedirect,
-+    debugLog
-+  ]);
-+
-+  // Handle redirects based on onboarding status
-+  useEffect(() => {
-+    // Skip if any of these conditions are true
-+    if (
-+      pathname === '/onboarding' || 
-+      isExemptPath || 
-+      loadingState.redirect || 
-+      loadingState.profile
-+    ) {
-+      return;
-+    }
-     
--    // Onboarding complete but on onboarding page, redirect to home
--    if (isSignedIn && !profileLoading && effectiveOnboardingComplete && pathname === '/onboarding') {
--      const fallback = performRedirect('/home', 'Onboarding complete but on onboarding page');
-+    // Redirect to onboarding if needed
-+    if (isSignedIn && !effectiveOnboardingComplete) {
-+      debugLog('ONBOARDING_CHECK', 'Redirecting to onboarding - incomplete');
-+      const fallback = performRedirect('/onboarding', 'Onboarding not complete');
-       
-       // Clean up fallback timeout if component unmounts
-       return () => {
-@@ -167,74 +344,79 @@ const RouteTracker = () => {
-       };
-     }
-     
--    // Special case: If on root path and signed in with completed onboarding, redirect to home
--    if (isSignedIn && !profileLoading && effectiveOnboardingComplete && pathname === '/') {
--      const fallback = performRedirect('/home', 'On root with completed onboarding');
-+    // Redirect from onboarding page if already complete
-+    if (isSignedIn && effectiveOnboardingComplete && pathname === '/onboarding') {
-+      debugLog('ONBOARDING_CHECK', 'Redirecting to home - already complete');
-+      const fallback = performRedirect('/home', 'Onboarding already complete');
-       
-       // Clean up fallback timeout if component unmounts
-       return () => {
-         if (fallback) clearTimeout(fallback);
-       };
-     }
--  }, [isSignedIn, profileLoading, pathname, effectiveOnboardingComplete, isExemptPath, performRedirect]);
-+  }, [
-+    isSignedIn, 
-+    loadingState.profile, 
-+    loadingState.redirect,
-+    pathname, 
-+    effectiveOnboardingComplete, 
-+    isExemptPath, 
-+    performRedirect,
-+    debugLog
-+  ]);
- 
--  // EFFECT 3: Main redirection logic for subscription checks (like main branch)
-+  // Handle subscription and study plan checks
-   useEffect(() => {
--    // Skip redirection checks for specific paths
-+    // Skip checks if any of these conditions are true
-     if (
-+      !initialLoadComplete ||
-+      !isLoaded || 
-+      !isSignedIn ||
-+      !userInfo ||
-+      !effectiveOnboardingComplete ||
-+      loadingState.redirect ||
-+      loadingState.studyPlan ||
-+      isExemptPath ||
-       pathname === '/onboarding' || 
-       pathname === '/redirect' ||
-       pathname?.startsWith('/onboarding') ||
--      pathname?.startsWith('/pricing') ||
--      isExemptPath ||
--      isRedirecting.current ||
--      !initialLoadComplete ||
--      !isLoaded ||
--      !isSignedIn ||
--      !userInfo
-+      pathname?.startsWith('/pricing')
-     ) {
-       return;
-     }
- 
--    // Check if we have userInfo, if not refresh it
--    if (isSignedIn && !userInfo) {
--      refreshUserInfo();
--      return;
--    }
--
--    const checkRedirectPath = async () => {
--      // 1. Subscription check - redirect non-subscribers to ankiclinic
--      if (effectiveOnboardingComplete && !isSubscribed && pathname && !pathname.startsWith('/ankiclinic')) {
-+    // Check subscription status
-+    const checkSubscriptionAndStudyPlan = async () => {
-+      // Subscription check - redirect non-subscribers to ankiclinic
-+      if (!isSubscribed && pathname && !pathname.startsWith('/ankiclinic')) {
-+        debugLog('SUBSCRIPTION', 'Not subscribed - redirecting to ankiclinic');
-         const fallback = performRedirect('/ankiclinic', 'Not subscribed');
--        if (fallback) return fallback;
-+        return fallback;
-       }
- 
--      // 2. Check study plan for subscribed users
--      const studyPlanExemptPaths = ['/examcalendar', '/api', '/auth', '/onboarding', '/redirect'];
--      const shouldCheckStudyPlan = pathname ? !studyPlanExemptPaths.some(path => pathname.startsWith(path)) : false;
-+      // Only check study plan for subscribed users on certain paths
-+      const studyPlanExemptPaths = ['/examcalendar', '/api', '/auth', '/onboarding', '/redirect', '/ankiclinic'];
-+      const shouldCheckStudyPlan = !studyPlanExemptPaths.some(path => pathname?.startsWith(path));
-       
--      if (effectiveOnboardingComplete && isSubscribed && shouldCheckStudyPlan) {
--        try {
--          const response = await fetch('/api/study-plan');
--          if (!response.ok) {
--            throw new Error('Failed to fetch study plan');
--          }
--          
--          const data = await response.json();
--          
--          if (!data.studyPlan) {
--            const fallback = performRedirect('/examcalendar', 'No study plan');
--            if (fallback) return fallback;
--          }
--        } catch (error) {
--          console.error('[RouteTracker] Error checking study plan:', error);
-+      if (isSubscribed && shouldCheckStudyPlan) {
-+        debugLog('STUDY_PLAN', 'Checking study plan existence');
-+        
-+        // Check if study plan exists
-+        const hasStudyPlan = await checkStudyPlan();
-+        
-+        if (!hasStudyPlan) {
-+          debugLog('STUDY_PLAN', 'No study plan - redirecting to examcalendar');
-+          const fallback = performRedirect('/examcalendar', 'No study plan');
-+          return fallback;
-         }
-       }
-+      
-+      return null;
-     };
-     
--    // Handle async redirects with proper typing
-+    // Handle async operations with proper cleanup
-     let fallbackTimeout: ReturnType<typeof setTimeout> | undefined;
--    checkRedirectPath().then(timeout => {
-+    checkSubscriptionAndStudyPlan().then(timeout => {
-       fallbackTimeout = timeout;
-     });
-     
-@@ -250,11 +432,31 @@ const RouteTracker = () => {
-     userInfo,
-     effectiveOnboardingComplete,
-     isSubscribed,
--    refreshUserInfo,
-+    loadingState.redirect,
-+    loadingState.studyPlan,
-     isExemptPath,
--    performRedirect
-+    performRedirect,
-+    checkStudyPlan,
-+    debugLog
-   ]);
- 
-+  // Expose core loading state for the application
-+  const isApplicationLoading = useMemo(() => {
-+    return (
-+      loadingState.auth || 
-+      loadingState.profile || 
-+      loadingState.redirect || 
-+      isRedirecting.current
-+    );
-+  }, [loadingState]);
-+
-+  // Expose consolidated state to components via Zustand if needed
-+  useEffect(() => {
-+    // Here you could update a loading state in a Zustand store
-+    // This would make the loading state available to all components
-+    // Example: setAppLoading(isApplicationLoading);
-+  }, [isApplicationLoading]);
-+
-   return null;
- };
- 
-diff --git a/components/StoreInitializer.tsx b/components/StoreInitializer.tsx
-index 8f93c948910eda3c2f3cbb4c5907ce3b783b10d1..6838179f6108d037fc799b9b7205f6046b242954 100644
---- a/components/StoreInitializer.tsx
-+++ b/components/StoreInitializer.tsx
-@@ -1,10 +1,32 @@
- "use client";
- 
--import { useEffect } from 'react';
-+import { useEffect, useState, useRef, useCallback } from 'react';
- import { useUser as useClerkUser } from '@clerk/nextjs';
--import { useUser } from '@/store/selectors';
-+import { useUserStore } from '@/store/slices/userSlice';
- import { useAudioStore } from '@/store/slices/audioSlice';
--import { initializeGlobalStore } from '@/store';
-+import { useUIStore } from '@/store/slices/uiSlice';
-+import type { ThemeType } from '@/store/slices/uiSlice';
-+
-+/**
-+ * Initialize global store with theme and audio settings
-+ */
-+const initializeGlobalStore = async (): Promise<void> => {
-+  if (typeof window !== 'undefined') {
-+    try {
-+      // Initialize audio context
-+      await useAudioStore.getState().initializeAudioContext();
-+      
-+      // Initialize UI state
-+      const savedTheme = localStorage.getItem('theme');
-+      if (savedTheme && ['cyberSpace', 'sakuraTrees', 'sunsetCity', 'mykonosBlue'].includes(savedTheme)) {
-+        useUIStore.getState().setTheme(savedTheme as ThemeType);
-+      }
-+    } catch (error) {
-+      console.error('[Store] Store initialization failed:', error);
-+      throw error;
-+    }
-+  }
-+};
- 
- /**
-  * StoreInitializer component
-@@ -18,9 +40,13 @@ import { initializeGlobalStore } from '@/store';
-  */
- const StoreInitializer = () => {
-   const { isLoaded, isSignedIn } = useClerkUser();
--  const { refreshUserInfo } = useUser();
-+  const refreshUserInfo = useUserStore(state => state.refreshUserInfo);
-   const initializeAudioContext = useAudioStore(state => state.initializeAudioContext);
-   
-+  // Track data refresh state
-+  const [isInitialRefreshComplete, setIsInitialRefreshComplete] = useState(false);
-+  const refreshAttemptRef = useRef(0);
-+  
-   // Initialize the global store when the app starts
-   useEffect(() => {
-     if (typeof window === 'undefined') return;
-@@ -36,30 +62,55 @@ const StoreInitializer = () => {
-     });
-   }, [initializeAudioContext]);
-   
--  // Refresh user information when the user is signed in
-+  // Helper to log performance info during refresh
-+  const logRefreshAttempt = useCallback((action: string, attempt: number) => {
-+    // Simplified: Only log critical user refresh events
-+    if (action.includes('failed')) {
-+      console.log(`[StoreInitializer] ${action} (attempt: ${attempt})`);
-+    }
-+  }, []);
-+  
-+  // Refresh user information when the user is signed in - dependency-based approach
-   useEffect(() => {
--    if (isLoaded && isSignedIn) {
--      // Initial refresh
--      refreshUserInfo();
-+    if (!isLoaded || !isSignedIn) return;
-+    
-+    // Track this refresh attempt
-+    const currentAttempt = refreshAttemptRef.current;
-+    refreshAttemptRef.current += 1;
-+    
-+    logRefreshAttempt('User signed in, refreshing user info', currentAttempt);
-+    
-+    refreshUserInfo()
-+      .then(() => {
-+        logRefreshAttempt('User refresh complete', currentAttempt);
-+        setIsInitialRefreshComplete(true);
-+      })
-+      .catch(error => {
-+        console.error(`[StoreInitializer] User refresh failed (attempt: ${currentAttempt}):`, error);
-+      });
-       
--      /**
--       * IMPORTANT: Secondary refresh to ensure state synchronization
--       * 
--       * This solves a race condition where:
--       * 1. The first refreshUserInfo() updates hasCompletedOnboarding in the store
--       * 2. But RouteTracker might read the old value before the update is fully applied
--       * 3. This causes incorrect redirects (e.g., to onboarding when it should go to home)
--       * 
--       * The delayed second refresh ensures all components have the correct state
--       * after the initial data load is complete.
--       */
--      const refreshTimeout = setTimeout(() => {
--        refreshUserInfo();
--      }, 1000);
-+  }, [isLoaded, isSignedIn, refreshUserInfo, logRefreshAttempt]);
-+  
-+  // Secondary refresh effect that depends on initial refresh being complete
-+  // This replaces the arbitrary timeout with a dependency-based approach
-+  useEffect(() => {
-+    if (!isInitialRefreshComplete || !isLoaded || !isSignedIn) return;
-+    
-+    // Track this refresh attempt
-+    const currentAttempt = refreshAttemptRef.current;
-+    refreshAttemptRef.current += 1;
-+    
-+    logRefreshAttempt('Initial refresh complete, performing verification refresh', currentAttempt);
-+    
-+    refreshUserInfo()
-+      .then(() => {
-+        logRefreshAttempt('Verification refresh complete', currentAttempt);
-+      })
-+      .catch(error => {
-+        console.error(`[StoreInitializer] Verification refresh failed (attempt: ${currentAttempt}):`, error);
-+      });
-       
--      return () => clearTimeout(refreshTimeout);
--    }
--  }, [isLoaded, isSignedIn, refreshUserInfo]);
-+  }, [isInitialRefreshComplete, isLoaded, isSignedIn, refreshUserInfo, logRefreshAttempt]);
-   
-   // This component doesn't render anything
-   return null;
-diff --git a/components/landingpage/landing-navbar.tsx b/components/landingpage/landing-navbar.tsx
-index 17467e97d39b1883ba4034c8ec9c68fba64069de..f7187d7d428e29d9669cc280c3728060618dec70 100644
---- a/components/landingpage/landing-navbar.tsx
-+++ b/components/landingpage/landing-navbar.tsx
-@@ -63,7 +63,13 @@ const LandingNavbar = () => {
-             </button>
-           </Link>
-           <Link href={"/sign-in"}>
--            <button className="bg-white text-black py-2 text-[16px] px-6 rounded-lg hover:bg-white/90 transition-colors duration-300">
-+            <button 
-+              className="bg-white text-black py-2 text-[16px] px-6 rounded-lg hover:bg-white/90 transition-colors duration-300"
-+              onClick={() => {
-+                console.log('[LOGIN BUTTON] Login button clicked explicitly by user');
-+                localStorage.setItem('explicit_login_click', 'true');
-+              }}
-+            >
-               Login
-             </button>
-           </Link>
-@@ -113,7 +119,13 @@ const LandingNavbar = () => {
-             </button>
-           </Link>
-           <Link href={"/sign-in"} >
--            <button className="w-full bg-white text-black py-3 text-lg rounded-lg hover:bg-white/90 transition-colors duration-300 mt-4">
-+            <button 
-+              className="w-full bg-white text-black py-3 text-lg rounded-lg hover:bg-white/90 transition-colors duration-300 mt-4"
-+              onClick={() => {
-+                console.log('[LOGIN BUTTON] Login button clicked explicitly by user');
-+                localStorage.setItem('explicit_login_click', 'true');
-+              }}
-+            >
-               Login
-             </button>
-           </Link>
-diff --git a/components/ui/DebugPanel.tsx b/components/ui/DebugPanel.tsx
-index a73fa72c3df9c67cff6d8e59d27ab167e78d6e01..1aeb7e9e2c1fb2364c8e8df4134f03a14f5e296b 100644
---- a/components/ui/DebugPanel.tsx
-+++ b/components/ui/DebugPanel.tsx
-@@ -3,16 +3,19 @@
- import { useState, useEffect } from 'react';
- import { usePathname, useSearchParams } from 'next/navigation';
- import { useUI, useUser, useGame, useAudio, useVocab } from '@/store/selectors'
-+import { useUserStore } from '@/store/slices/userSlice'
- 
- /* --- Constants ----- */
- const DEBUG_PARAM = 'debug'
- 
- const DebugPanel = () => {
-+  
-   /* ---- State ----- */
-   const searchParams = useSearchParams()
-   const pathname = usePathname() || ''
-   const [isDebug, setIsDebug] = useState(false)
-   
-+  
-   // Zustand state
-   const uiState = useUI()
-   const userState = useUser()
-@@ -25,7 +28,10 @@ const DebugPanel = () => {
-   useEffect(() => {
-     const debugValue = searchParams?.get(DEBUG_PARAM)
-     
--    if (debugValue === 'true') {
-+    // Add a direct check for the debug parameter in URL
-+    const urlContainsDebug = typeof window !== 'undefined' && window.location.href.includes('debug=true');
-+    
-+    if (debugValue === 'true' || urlContainsDebug) {
-       setIsDebug(true)
-       document.body.classList.add('debug-mode')
-     } else {
-@@ -33,7 +39,8 @@ const DebugPanel = () => {
-       setIsDebug(false)
-       document.body.classList.remove('debug-mode')
-     }
--  }, [searchParams, pathname])
-+  }, [searchParams])
-+
- 
-   // Create a safe version of audio state for display (without functions)
-   const displayAudioState = {
-@@ -69,38 +76,161 @@ const DebugPanel = () => {
-     }
-   };
- 
-+  // Function to stringify with sorted keys - using a custom serialization approach
-+  const stringifySorted = (obj: any) => {
-+    // First, build a clean object removing functions and preserving order
-+    const prepareObject = (input: any): any => {
-+      // Handle primitives, null and undefined
-+      if (input === null || input === undefined || typeof input !== 'object') {
-+        return input;
-+      }
-+      
-+      // Handle arrays
-+      if (Array.isArray(input)) {
-+        return input.map(item => prepareObject(item));
-+      }
-+      
-+      // Create an object without functions, sorting keys alphabetically
-+      const result: any = {};
-+      
-+      // Get sorted keys
-+      const keys = Object.keys(input).sort((a, b) => 
-+        a.localeCompare(b, 'en', { sensitivity: 'base' })
-+      );
-+      
-+      // Add keys in sorted order
-+      keys.forEach(key => {
-+        if (typeof input[key] !== 'function') {
-+          result[key] = prepareObject(input[key]);
-+        }
-+      });
-+      
-+      return result;
-+    };
-+    
-+    // Manually handle JSON string creation with sorted keys
-+    const toSortedJSONString = (input: any, indent = 0): string => {
-+      // Handle primitives, null and undefined
-+      if (input === null) return 'null';
-+      if (input === undefined) return 'undefined';
-+      if (typeof input !== 'object') {
-+        if (typeof input === 'string') return `"${input.replace(/"/g, '\\"')}"`;
-+        return String(input);
-+      }
-+      
-+      // Handle arrays
-+      if (Array.isArray(input)) {
-+        if (input.length === 0) return '[]';
-+        let result = '[\n';
-+        const spaces = ' '.repeat(indent + 2);
-+        
-+        input.forEach((item, index) => {
-+          result += spaces + toSortedJSONString(item, indent + 2);
-+          if (index < input.length - 1) result += ',';
-+          result += '\n';
-+        });
-+        
-+        result += ' '.repeat(indent) + ']';
-+        return result;
-+      }
-+      
-+      // Handle objects - keys should already be sorted by prepareObject
-+      const keys = Object.keys(input);
-+      
-+      if (keys.length === 0) return '{}';
-+      
-+      let result = '{\n';
-+      const spaces = ' '.repeat(indent + 2);
-+      
-+      keys.forEach((key, index) => {
-+        result += spaces + `"${key}": ` + toSortedJSONString(input[key], indent + 2);
-+        if (index < keys.length - 1) result += ',';
-+        result += '\n';
-+      });
-+      
-+      result += ' '.repeat(indent) + '}';
-+      return result;
-+    };
-+    
-+    try {
-+      // Clean the object (removes functions and sorts keys)
-+      const preparedObj = prepareObject(obj);
-+      
-+      // Generate the sorted JSON string
-+      return toSortedJSONString(preparedObj, 0);
-+    } catch (err) {
-+      // Fall back to standard JSON
-+      return JSON.stringify(obj, (key, value) => {
-+        if (typeof value === 'function') return undefined;
-+        return value;
-+      }, 2);
-+    }
-+  };
-+
-   // Don't render anything if not in debug mode
--  if (!isDebug) return null;
-+  if (!isDebug) {
-+    return null;
-+  }
-+  
-+  // Create a custom version of userState for display
-+  const userStateForDisplay = (() => {
-+    // If userInfo doesn't exist, just return the original state
-+    if (!userState.userInfo) return userState;
-+    
-+    // Extract onboardingInfo from userInfo if it exists
-+    const onboardingInfo = userState.userInfo.onboardingInfo || null;
-+    
-+    // Create a clean copy, explicitly excluding any root-level onboardingComplete
-+    const { onboardingComplete: _, ...cleanState } = userState as any;
-+    
-+    return {
-+      ...cleanState,
-+      // Move onboardingInfo to top level for better visibility
-+      onboardingInfo
-+    };
-+  })();
- 
-   // Debug panel UI
-   return (
-     <div className="fixed bottom-4 right-4 z-[9999] bg-black/80 text-white p-4 rounded-lg max-w-[400px] max-h-[80vh] overflow-auto text-xs">
-       <h3 className="text-lg font-bold mb-2">Debug Panel</h3>
-+      
-       <div className="grid grid-cols-1 gap-2">
-         <div>
--          <h4 className="font-bold">Audio State</h4>
--          <pre>{JSON.stringify(displayAudioState, null, 2)}</pre>
-+          <h4 className="font-bold">UI State</h4>
-+          <pre>{stringifySorted({
-+            theme: uiState.theme,
-+            window: uiState.window,
-+            currentRoute: uiState.currentRoute
-+          })}</pre>
-         </div>
-         
-         <hr className="border-white/30 my-2" />
-+        
-         <div>
--          <h4 className="font-bold">Game State</h4>
--          <pre>{JSON.stringify(gameState, null, 2)}</pre>
-+          <h4 className="font-bold">User State</h4>
-+          <pre>{stringifySorted(userStateForDisplay)}</pre>
-         </div>
-+        
-         <hr className="border-white/30 my-2" />
-+        
-         <div>
--          <h4 className="font-bold">UI State</h4>
--          <pre>{JSON.stringify(uiState, null, 2)}</pre>
-+          <h4 className="font-bold">Audio State</h4>
-+          <pre>{stringifySorted(displayAudioState)}</pre>
-         </div>
-+        
-         <hr className="border-white/30 my-2" />
-+        
-         <div>
--          <h4 className="font-bold">User State</h4>
--          <pre>{JSON.stringify(userState, null, 2)}</pre>
-+          <h4 className="font-bold">Game State</h4>
-+          <pre>{stringifySorted(gameState)}</pre>
-         </div>
-+        
-         <hr className="border-white/30 my-2" />
-+        
-         <div>
-           <h4 className="font-bold">Vocab State</h4>
--          <pre>{JSON.stringify(vocabState, null, 2)}</pre>
-+          <pre>{stringifySorted(vocabState)}</pre>
-         </div>
-       </div>
-     </div>
-diff --git a/hooks/useOnboardingInfo.ts b/hooks/useOnboardingInfo.ts
-index a75b7ee2a4f4ac0f3bc5dac1f938ed2e2a904f1c..8c30303b97e9ca1b2a31be074a0c175495401cb5 100644
---- a/hooks/useOnboardingInfo.ts
-+++ b/hooks/useOnboardingInfo.ts
-@@ -22,16 +22,48 @@ function isValidStep(step: number): step is OnboardingStep {
-   return step >= 1 && step <= 7;
- }
- 
-+// Type for tracking request state
-+type RequestState = {
-+  loading: boolean;
-+  error: Error | null;
-+  success: boolean;
-+};
-+
-+// Initial request state
-+const initialRequestState: RequestState = {
-+  loading: false,
-+  error: null,
-+  success: false,
-+};
-+
- export function useOnboardingInfo() {
-   const [onboardingInfo, setOnboardingInfo] = useState<OnboardingInfo | null>(null);
-   const [currentStep, setCurrentStep] = useState<OnboardingStep>(ONBOARDING_STEPS.NAME);
-   const router = useRouter();
--  const { setOnboardingComplete, onboardingComplete } = useUser();
-+  const { setOnboardingComplete, onboardingComplete, userInfo, refreshUserInfo } = useUser();
-+  
-+  // Request states for all operations
-+  const [fetchState, setFetchState] = useState<RequestState>({...initialRequestState});
-+  const [updateState, setUpdateState] = useState<RequestState>({...initialRequestState});
-+  const [nameSubmitState, setNameSubmitState] = useState<RequestState>({...initialRequestState});
-+  const [collegeSubmitState, setCollegeSubmitState] = useState<RequestState>({...initialRequestState});
-+  const [academicsSubmitState, setAcademicsSubmitState] = useState<RequestState>({...initialRequestState});
-+  const [goalsSubmitState, setGoalsSubmitState] = useState<RequestState>({...initialRequestState});
-+  const [kalypsoCompleteState, setKalypsoCompleteState] = useState<RequestState>({...initialRequestState});
-+  const [referralCompleteState, setReferralCompleteState] = useState<RequestState>({...initialRequestState});
-+
-+  // Reset a request state
-+  const resetRequestState = (stateSetter: React.Dispatch<React.SetStateAction<RequestState>>) => {
-+    stateSetter({...initialRequestState});
-+  };
- 
-   // Fetch initial onboarding info
-   useEffect(() => {
-     const fetchOnboardingInfo = async () => {
-       try {
-+        // Set loading state
-+        setFetchState({ loading: true, error: null, success: false });
-+        
-         // If we already know onboarding is complete from Zustand store, redirect immediately
-         if (onboardingComplete) {
-           if (isMobileButNotIpad()) {
-@@ -39,6 +71,7 @@ export function useOnboardingInfo() {
-           } else {
-             router.push('/home');
-           }
-+          setFetchState({ loading: false, error: null, success: true });
-           return;
-         }
- 
-@@ -55,6 +88,7 @@ export function useOnboardingInfo() {
-           } else {
-             router.push('/home');
-           }
-+          setFetchState({ loading: false, error: null, success: true });
-           return;
-         }
- 
-@@ -74,8 +108,17 @@ export function useOnboardingInfo() {
- 
-         // Set the step once we've determined the correct one
-         setCurrentStep(targetStep);
-+        
-+        // Update request state to success
-+        setFetchState({ loading: false, error: null, success: true });
-       } catch (error) {
-         console.error('Error fetching onboarding info:', error);
-+        // Set error state
-+        setFetchState({ 
-+          loading: false, 
-+          error: error instanceof Error ? error : new Error('Unknown error fetching onboarding info'),
-+          success: false
-+        });
-       }
-     };
- 
-@@ -85,6 +128,9 @@ export function useOnboardingInfo() {
-   // Update onboarding info in the database
-   const updateOnboardingInfo = async (updates: Partial<OnboardingInfo>) => {
-     try {
-+      // Set loading state
-+      setUpdateState({ loading: true, error: null, success: false });
-+      
-       const response = await fetch('/api/user-info/onboarding', {
-         method: 'PUT',
-         headers: { 'Content-Type': 'application/json' },
-@@ -100,16 +146,28 @@ export function useOnboardingInfo() {
-       if (updates.currentStep && isValidStep(updates.currentStep)) {
-         setCurrentStep(updates.currentStep);
-       }
-+      
-+      // Set success state
-+      setUpdateState({ loading: false, error: null, success: true });
- 
-       return updatedInfo;
-     } catch (error) {
-       console.error('[updateOnboardingInfo] Error:', error);
-+      // Set error state
-+      setUpdateState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error updating onboarding info'),
-+        success: false
-+      });
-       throw error;
-     }
-   };
- 
-   const handleNameSubmit = async (firstName: string) => {
-     try {
-+      // Set loading state
-+      setNameSubmitState({ loading: true, error: null, success: false });
-+      
-       // Force create a new user info record
-       const response = await fetch("/api/user-info", {
-         method: "POST",
-@@ -129,9 +187,18 @@ export function useOnboardingInfo() {
-         firstName,
-         currentStep: ONBOARDING_STEPS.COLLEGE as OnboardingStep,
-       });
-+      
-+      // Set success state
-+      setNameSubmitState({ loading: false, error: null, success: true });
-     } catch (error) {
-       console.error("Error saving name:", error);
-       toast.error("Failed to save your information");
-+      // Set error state
-+      setNameSubmitState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error saving name'),
-+        success: false
-+      });
-     }
-   };
- 
-@@ -141,13 +208,25 @@ export function useOnboardingInfo() {
-     isCanadian: boolean;
-   }) => {
-     try {
-+      // Set loading state
-+      setCollegeSubmitState({ loading: true, error: null, success: false });
-+      
-       await updateOnboardingInfo({
-         ...data,
-         currentStep: ONBOARDING_STEPS.ACADEMICS as OnboardingStep,
-       });
-+      
-+      // Set success state
-+      setCollegeSubmitState({ loading: false, error: null, success: true });
-     } catch (error) {
-       console.error("Error saving college info:", error);
-       toast.error("Failed to save your information");
-+      // Set error state
-+      setCollegeSubmitState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error saving college info'),
-+        success: false
-+      });
-     }
-   };
- 
-@@ -158,13 +237,25 @@ export function useOnboardingInfo() {
-     mcatAttemptNumber: string;
-   }) => {
-     try {
-+      // Set loading state
-+      setAcademicsSubmitState({ loading: true, error: null, success: false });
-+      
-       await updateOnboardingInfo({
-         ...data,
-         currentStep: ONBOARDING_STEPS.GOALS as OnboardingStep,
-       });
-+      
-+      // Set success state
-+      setAcademicsSubmitState({ loading: false, error: null, success: true });
-     } catch (error) {
-       console.error("Error saving academic info:", error);
-       toast.error("Failed to save your information");
-+      // Set error state
-+      setAcademicsSubmitState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error saving academic info'),
-+        success: false
-+      });
-     }
-   };
- 
-@@ -173,61 +264,173 @@ export function useOnboardingInfo() {
-     targetMedSchool: string;
-   }) => {
-     try {
--      // Update database first
-+      // Set loading state
-+      setGoalsSubmitState({ loading: true, error: null, success: false });
-+      
-+      // Update database first - REMOVED setting onboardingComplete here
-       await updateOnboardingInfo({
-         ...data,
--        onboardingComplete: true
-+        currentStep: ONBOARDING_STEPS.KALYPSO_DIALOGUE as OnboardingStep,
-       });
- 
--      // Update Zustand store state
--      setOnboardingComplete(true);
--
--      // Now redirect
--      if (isMobileButNotIpad()) {
--        router.push('/redirect');
--      } else {
--        router.push('/home');
--      }
-+      // Continue to the next step without setting onboardingComplete
-+      // Now redirect happens in the component based on current step
-+      
-+      // Set success state
-+      setGoalsSubmitState({ loading: false, error: null, success: true });
-     } catch (error) {
-       console.error("[handleGoalsSubmit] Error:", error);
-       toast.error("Failed to save your information");
-+      // Set error state
-+      setGoalsSubmitState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error saving goals'),
-+        success: false
-+      });
-     }
-   };
- 
-   const handleKalypsoComplete = async () => {
-     try {
-+      // Set loading state
-+      setKalypsoCompleteState({ loading: true, error: null, success: false });
-+      
-       await updateOnboardingInfo({
-         currentStep: ONBOARDING_STEPS.REFERRAL as OnboardingStep,
-       });
-+      
-+      // Set success state
-+      setKalypsoCompleteState({ loading: false, error: null, success: true });
-     } catch (error) {
-       console.error("Error completing Kalypso dialogue:", error);
-       toast.error("Failed to proceed to next step");
-+      // Set error state
-+      setKalypsoCompleteState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error completing Kalypso dialogue'),
-+        success: false
-+      });
-     }
-   };
- 
-   const handleReferralComplete = async (skipReferral: boolean = false) => {
-     try {
-+      // Set loading state
-+      setReferralCompleteState({ loading: true, error: null, success: false });
-+      
-+      console.log('[DEBUG][handleReferralComplete] Starting onboarding completion process');
-+      
-+      // First, validate that we have all required data
-+      if (!onboardingInfo) {
-+        const error = new Error("Cannot complete onboarding: No onboarding info exists");
-+        console.error(error.message);
-+        toast.error("Missing profile information. Please try again.");
-+        setReferralCompleteState({ 
-+          loading: false, 
-+          error: error,
-+          success: false
-+        });
-+        return false;
-+      }
-+      
-+      // Validate that target score exists and is valid
-+      if (!onboardingInfo.targetScore || onboardingInfo.targetScore <= 0) {
-+        const error = new Error("Cannot complete onboarding: Invalid target score");
-+        console.error(`${error.message}: ${onboardingInfo.targetScore}`);
-+        toast.error("Please set a valid target score before completing onboarding.");
-+        setReferralCompleteState({ 
-+          loading: false, 
-+          error: error,
-+          success: false
-+        });
-+        return false;
-+      }
-+      
-+      // Check other critical fields
-+      if (!onboardingInfo.firstName || !onboardingInfo.college) {
-+        const error = new Error("Cannot complete onboarding: Missing required personal information");
-+        console.error(error.message);
-+        toast.error("Please complete all required steps before continuing.");
-+        setReferralCompleteState({ 
-+          loading: false, 
-+          error: error,
-+          success: false
-+        });
-+        return false;
-+      }
-+      
-+      // Now update with complete flag
-+      console.log('[DEBUG][handleReferralComplete] Updating database with onboardingComplete: true');
-       const updatedInfo = await updateOnboardingInfo({
-         currentStep: ONBOARDING_STEPS.UNLOCK as OnboardingStep,
-         onboardingComplete: true,
-       });
- 
--      // Redirect immediately after successful update
--      if (updatedInfo?.onboardingComplete) {
--        if (isMobileButNotIpad()) {
--          router.push('/redirect');
--        } else {
--          router.push('/home');
--        }
-+      // Verify update was successful
-+      if (!updatedInfo?.onboardingComplete) {
-+        const error = new Error("[handleReferralComplete] Update successful but onboardingComplete not set");
-+        console.error(error.message);
-+        toast.error("There was a problem completing your profile. Please try again.");
-+        setReferralCompleteState({ 
-+          loading: false, 
-+          error: error,
-+          success: false
-+        });
-+        return false;
-+      }
-+      
-+      console.log('[DEBUG][handleReferralComplete] Database update successful, onboardingComplete set to:', updatedInfo.onboardingComplete);
-+      
-+      // If all was successful, update the local state
-+      setOnboardingComplete(true);
-+      console.log('[DEBUG][handleReferralComplete] Local state updated with setOnboardingComplete(true)');
-+      
-+      // IMPROVEMENT: Add a full refreshUserInfo call to ensure complete synchronization
-+      console.log('[DEBUG][handleReferralComplete] Performing full refreshUserInfo() for complete synchronization');
-+      try {
-+        await refreshUserInfo();
-+        console.log('[DEBUG][handleReferralComplete] refreshUserInfo() completed successfully');
-+      } catch (refreshError) {
-+        console.error('[DEBUG][handleReferralComplete] Error during refreshUserInfo():', refreshError);
-+        // We continue with the redirect even if refresh fails, as the database update was successful
-+      }
-+      
-+      // Redirect based on device
-+      console.log('[DEBUG][handleReferralComplete] Redirecting to:', isMobileButNotIpad() ? '/redirect' : '/home');
-+      if (isMobileButNotIpad()) {
-+        router.push('/redirect');
-       } else {
--        console.error('[handleReferralComplete] Update successful but onboardingComplete not set');
-+        router.push('/home');
-       }
-+      
-+      // Set success state
-+      setReferralCompleteState({ loading: false, error: null, success: true });
-+      return true;
-     } catch (error) {
-       console.error("[handleReferralComplete] Error:", error);
--      toast.error("Failed to proceed to next step");
-+      toast.error("Failed to complete your profile setup");
-+      // Set error state
-+      setReferralCompleteState({ 
-+        loading: false, 
-+        error: error instanceof Error ? error : new Error('Unknown error completing onboarding'),
-+        success: false
-+      });
-+      return false;
-     }
-   };
- 
-+  // Function to check if any request is currently loading
-+  const isLoading = (): boolean => {
-+    return fetchState.loading || 
-+           updateState.loading || 
-+           nameSubmitState.loading || 
-+           collegeSubmitState.loading || 
-+           academicsSubmitState.loading || 
-+           goalsSubmitState.loading || 
-+           kalypsoCompleteState.loading || 
-+           referralCompleteState.loading;
-+  };
-+
-   return {
-     onboardingInfo,
-     updateOnboardingInfo,
-@@ -238,6 +441,18 @@ export function useOnboardingInfo() {
-     handleGoalsSubmit,
-     handleKalypsoComplete,
-     handleReferralComplete,
--    ONBOARDING_STEPS
-+    ONBOARDING_STEPS,
-+    // Request states
-+    isLoading: isLoading(),
-+    fetchState,
-+    updateState,
-+    nameSubmitState,
-+    collegeSubmitState,
-+    academicsSubmitState,
-+    goalsSubmitState,
-+    kalypsoCompleteState,
-+    referralCompleteState,
-+    // Utility
-+    resetRequestState
-   };
- } 
-\ No newline at end of file
-diff --git a/store/index.ts b/store/index.ts
-deleted file mode 100644
-index 8e8adb1872c497be8b2031834636aa3a762928ef..0000000000000000000000000000000000000000
---- a/store/index.ts
-+++ /dev/null
-@@ -1,127 +0,0 @@
--// Re-export all slice stores
--export { useAudioStore } from './slices/audioSlice';
--export { useUIStore } from './slices/uiSlice';
--export { useGameStore } from './slices/gameSlice';
--export { useUserStore } from './slices/userSlice';
--export { useVocabStore } from './slices/vocabSlice';
--
--// Re-export all types
--export * from './types';
--export type { ThemeType, WindowSize } from './slices/uiSlice';
--
--// For backward compatibility with existing code
--import { useAudioStore } from './slices/audioSlice';
--import { useUIStore } from './slices/uiSlice';
--import { useGameStore } from './slices/gameSlice';
--import { useUserStore } from './slices/userSlice';
--import { useVocabStore } from './slices/vocabSlice';
--
--// Flag to track global initialization
--let isStoreInitialized = false;
--
--type StoreUpdates = Record<string, any>;
--
--export const useStore = {
--  getState: () => ({
--    ...useAudioStore.getState(),
--    ...useUIStore.getState(),
--    ...useGameStore.getState(),
--    ...useUserStore.getState(),
--    ...useVocabStore.getState(),
--  }),
--  
--  setState: (updates: StoreUpdates) => {
--    // Determine which slice each update belongs to and apply accordingly
--    const audioKeys = new Set(Object.keys(useAudioStore.getState()));
--    const uiKeys = new Set(Object.keys(useUIStore.getState()));
--    const gameKeys = new Set(Object.keys(useGameStore.getState()));
--    const userKeys = new Set(Object.keys(useUserStore.getState()));
--    const vocabKeys = new Set(Object.keys(useVocabStore.getState()));
--    
--    // Extract updates for each slice
--    const audioUpdates: StoreUpdates = {};
--    const uiUpdates: StoreUpdates = {};
--    const gameUpdates: StoreUpdates = {};
--    const userUpdates: StoreUpdates = {};
--    const vocabUpdates: StoreUpdates = {};
--    
--    // Sort updates into appropriate slices
--    Object.entries(updates).forEach(([key, value]) => {
--      if (audioKeys.has(key)) {
--        audioUpdates[key] = value;
--      } else if (uiKeys.has(key)) {
--        uiUpdates[key] = value;
--      } else if (gameKeys.has(key)) {
--        gameUpdates[key] = value;
--      } else if (userKeys.has(key)) {
--        userUpdates[key] = value;
--      } else if (vocabKeys.has(key)) {
--        vocabUpdates[key] = value;
--      }
--    });
--    
--    // Apply updates to each slice
--    if (Object.keys(audioUpdates).length > 0) {
--      useAudioStore.setState(audioUpdates);
--    }
--    if (Object.keys(uiUpdates).length > 0) {
--      useUIStore.setState(uiUpdates);
--    }
--    if (Object.keys(gameUpdates).length > 0) {
--      useGameStore.setState(gameUpdates);
--    }
--    if (Object.keys(userUpdates).length > 0) {
--      useUserStore.setState(userUpdates);
--    }
--    if (Object.keys(vocabUpdates).length > 0) {
--      useVocabStore.setState(vocabUpdates);
--    }
--  },
--  
--  subscribe: (callback: (state: any, prevState: any) => void) => {
--    // Subscribe to all slice stores
--    const unsubAudio = useAudioStore.subscribe(callback);
--    const unsubUI = useUIStore.subscribe(callback);
--    const unsubGame = useGameStore.subscribe(callback);
--    const unsubUser = useUserStore.subscribe(callback);
--    const unsubVocab = useVocabStore.subscribe(callback);
--    
--    // Return a function to unsubscribe from all
--    return () => {
--      unsubAudio();
--      unsubUI();
--      unsubGame();
--      unsubUser();
--      unsubVocab();
--    };
--  }
--};
--
--// Export a function to initialize the store at the app level
--export const initializeGlobalStore = async (options?: { forceOnboarding?: boolean }): Promise<void> => {
--  if (typeof window !== 'undefined' && !isStoreInitialized) {
--    console.debug('[DEBUG][Store] Initializing global store from exported function');
--    try {
--      // Initialize audio context
--      await useAudioStore.getState().initializeAudioContext();
--      
--      // Initialize UI state
--      const savedTheme = localStorage.getItem('theme');
--      if (savedTheme && ['cyberSpace', 'sakuraTrees', 'sunsetCity', 'mykonosBlue'].includes(savedTheme)) {
--        useUIStore.getState().setTheme(savedTheme as any);
--      }
--      
--      // Process debug options
--      if (options?.forceOnboarding) {
--        console.debug('[DEBUG][Store] DEBUG MODE: Forcing onboardingComplete to true for testing');
--        useUserStore.getState().setOnboardingComplete(true);
--      }
--      
--      isStoreInitialized = true;
--      console.debug('[DEBUG][Store] Store initialization complete');
--    } catch (error) {
--      console.error('[DEBUG][Store] Store initialization failed:', error);
--      throw error;
--    }
--  }
--}; 
-\ No newline at end of file
-diff --git a/store/selectors.ts b/store/selectors.ts
-index fbeb875883ff68209558b34ea6f41890f0da7ae5..cc599cbee4507950afc476dfaa08c86930d04aec 100644
---- a/store/selectors.ts
-+++ b/store/selectors.ts
-@@ -40,7 +40,7 @@ export const useUser = () => {
-   const studyPreferences = useUserStore((state) => state.studyPreferences)
-   const interfaceSettings = useUserStore((state) => state.interfaceSettings)
-   const tutorialProgress = useUserStore((state) => state.tutorialProgress)
--  const onboardingComplete = useUserStore((state) => state.onboardingComplete)
-+  const onboardingComplete = useUserStore((state) => state.userInfo?.onboardingInfo?.onboardingComplete ?? false)
-   const lastVisitedRoute = useUserStore((state) => state.lastVisitedRoute)
-   
-   // Profile actions
-diff --git a/store/slices/userSlice.ts b/store/slices/userSlice.ts
-index 0a53e749246881204b699b72b1519c0c0d207061..1698ea72e5af158bde027a9e4240846f7f063a76 100644
---- a/store/slices/userSlice.ts
-+++ b/store/slices/userSlice.ts
-@@ -13,6 +13,14 @@ const isWithin14Days = (date: Date): boolean => {
- };
- 
- //========================= Types ===============================
-+/**
-+ * Options for batch updating profile properties
-+ */
-+interface BatchUpdateOptions {
-+  showToast?: boolean;
-+  rollbackOnError?: boolean;
-+}
-+
- interface UserProfile {
-   userId?: string;
-   firstName?: string;
-@@ -33,14 +41,12 @@ interface UserProfile {
-     completedRoutes?: string[];
-   };
-   completedSteps?: string[];
--  onboardingComplete?: boolean;
-   lastVisitedRoute?: string;
- }
- 
- interface UserState {
-   // Version tracking
-   version: number;
--  isHydrated: boolean;
-   
-   // Profile state
-   profile: UserProfile | null;
-@@ -59,7 +65,6 @@ interface UserState {
-     currentStep: number;
-     completedRoutes: string[];
-   };
--  onboardingComplete: boolean;
-   lastVisitedRoute: string;
-   
-   // User info state
-@@ -94,6 +99,9 @@ interface UserActions {
-   // Stats actions
-   updateCoins: (amount: number) => Promise<void>;
-   updateCoinsDisplay: (newAmount: number) => void;
-+  
-+  // Batch update function
-+  batchUpdateProfile: (updates: Partial<UserProfile & { onboardingInfo?: Partial<OnboardingInfo> }>, options?: BatchUpdateOptions) => Promise<UserProfile | null>;
- }
- 
- //========================= Store Creation ===============================
-@@ -101,7 +109,6 @@ export const useUserStore = create<UserState & UserActions>()(
-   devtools((set, get) => ({
-     // Version tracking
-     version: 1,
--    isHydrated: false,
-     
-     // Profile state
-     profile: null,
-@@ -120,7 +127,6 @@ export const useUserStore = create<UserState & UserActions>()(
-       currentStep: 0,
-       completedRoutes: []
-     },
--    onboardingComplete: false,
-     lastVisitedRoute: '/',
-     
-     // User info state
-@@ -186,7 +192,6 @@ export const useUserStore = create<UserState & UserActions>()(
-           ...(updatedProfileFromServer.studyPreferences && { studyPreferences: updatedProfileFromServer.studyPreferences }),
-           ...(updatedProfileFromServer.interfaceSettings && { interfaceSettings: updatedProfileFromServer.interfaceSettings }),
-           ...(updatedProfileFromServer.tutorialProgress && { tutorialProgress: updatedProfileFromServer.tutorialProgress }),
--          ...(updatedProfileFromServer.onboardingComplete !== undefined && { onboardingComplete: updatedProfileFromServer.onboardingComplete }),
-           ...(updatedProfileFromServer.lastVisitedRoute && { lastVisitedRoute: updatedProfileFromServer.lastVisitedRoute }),
-           isProfileComplete: isProfileComplete(updatedProfileFromServer)
-         });
-@@ -200,17 +205,10 @@ export const useUserStore = create<UserState & UserActions>()(
-     },
-     
-     setCompletedSteps: (steps) => {
--      set({ completedSteps: steps });
--      set({ isProfileComplete: steps.length >= 3 });
-+      console.log('[DEBUG][userSlice] setCompletedSteps called with', steps.length, 'steps');
-       
--      // Also update the profile object for consistency
--      const profile = get().profile;
--      if (profile) {
--        set({ profile: { ...profile, completedSteps: steps } });
--      }
--      
--      // Persist to backend if possible
--      get().updateProfile({ completedSteps: steps });
-+      // Use the new batch update function instead of multiple set calls
-+      get().batchUpdateProfile({ completedSteps: steps });
-     },
-     
-     addCompletedStep: (step) => {
-@@ -277,16 +275,80 @@ export const useUserStore = create<UserState & UserActions>()(
-     },
-     
-     setOnboardingComplete: (completed) => {
--      set({ onboardingComplete: completed });
-+      console.log('[DEBUG][userSlice] setOnboardingComplete called with value:', completed);
-       
--      // Also update the profile object for consistency
--      const profile = get().profile;
--      if (profile) {
--        set({ profile: { ...profile, onboardingComplete: completed } });
-+      // Get the current userInfo state
-+      const { userInfo } = get();
-+      
-+      if (!userInfo) {
-+        console.error('Cannot set onboardingComplete: No user info available');
-+        return;
-       }
-       
--      // Persist to backend if possible
--      get().updateProfile({ onboardingComplete: completed });
-+      // Create a typed version of onboardingInfo to ensure all required fields are present
-+      const currentOnboardingInfo = userInfo.onboardingInfo || {
-+        currentStep: 0,
-+        onboardingComplete: false,
-+        firstName: null,
-+        college: null,
-+        isNonTraditional: null,
-+        isCanadian: null,
-+        gpa: null,
-+        currentMcatScore: null,
-+        hasNotTakenMCAT: null,
-+        mcatAttemptNumber: null,
-+        targetMedSchool: null,
-+        targetScore: null,
-+        referralEmail: null
-+      };
-+      
-+      // Create updated userInfo with the new onboardingComplete value
-+      const updatedUserInfo = {
-+        ...userInfo,
-+        onboardingInfo: {
-+          ...currentOnboardingInfo,
-+          onboardingComplete: completed
-+        }
-+      };
-+      
-+      // Store original state for potential rollback
-+      const originalState = {
-+        userInfo: userInfo
-+      };
-+      
-+      console.log('[DEBUG][userSlice] Updating local state with onboardingComplete:', completed);
-+      
-+      // Update only the userInfo property in a single atomic operation
-+      set({ userInfo: updatedUserInfo });
-+      
-+      // Persist to backend with error handling and rollback capability
-+      (async () => {
-+        try {
-+          console.log('[DEBUG][userSlice] Persisting onboardingComplete to backend');
-+          const response = await fetch('/api/user-info/profile', {
-+            method: 'PATCH',
-+            headers: { 'Content-Type': 'application/json' },
-+            body: JSON.stringify({ 
-+              onboardingInfo: updatedUserInfo.onboardingInfo 
-+            })
-+          });
-+          
-+          if (!response.ok) {
-+            throw new Error(`Backend update failed: ${response.status} ${response.statusText}`);
-+          }
-+          
-+          const responseData = await response.json();
-+          console.log('[DEBUG][userSlice] Backend update successful:', responseData);
-+        } catch (error) {
-+          console.error('[DEBUG][userSlice] Error updating onboardingComplete on backend:', error);
-+          // Roll back to original state if backend update fails
-+          console.log('[DEBUG][userSlice] Rolling back to original state');
-+          set({ userInfo: originalState.userInfo });
-+          // Show error to user
-+          // We'd ideally use a toast here, but to avoid circular dependencies
-+          // just log to console for now
-+        }
-+      })();
-     },
-     
-     setLastVisitedRoute: (route) => {
-@@ -304,45 +366,36 @@ export const useUserStore = create<UserState & UserActions>()(
-     
-     refreshUserInfo: async () => {
-       try {
--        // Only set loading if not already loading
--        const currentState = get();
--        if (!currentState.statsLoading && !currentState.profileLoading) {
--          set({ statsLoading: true, profileLoading: true, error: null });
--        }
--
--        // Add loading timeout
--        const loadingTimeout = setTimeout(() => {
--          const state = get();
--          if (state.statsLoading || state.profileLoading) {
--            set({ 
--              statsLoading: false,
--              profileLoading: false,
--              error: 'Loading timeout - please try again'
--            });
--          }
--        }, 10000);
--
-+        // Set detailed loading states
-+        set({ 
-+          profileLoading: true, 
-+          statsLoading: true, 
-+          error: null 
-+        });
-+        
-+        // Track fetch start time for performance monitoring
-+        const fetchStartTime = performance.now();
-+        
-         // Batch all fetch requests together
-         const [userInfoResponse, profileResponse] = await Promise.all([
-           fetch('/api/user-info'),
-           fetch('/api/user-info/profile')
-         ]);
- 
--        clearTimeout(loadingTimeout);
-+        // Handle failed user info response
-+        if (!userInfoResponse.ok) {
-+          throw new Error(`Failed to fetch user info: ${userInfoResponse.status} ${userInfoResponse.statusText}`);
-+        }
- 
--        if (!userInfoResponse.ok) throw new Error('Failed to fetch user info');
-         const userInfo = await userInfoResponse.json();
-         
-         // Check if user is in 14-day free trial period
-         const isNewUserTrial = userInfo.createdAt ? isWithin14Days(new Date(userInfo.createdAt)) : false;
- 
--        // Prepare single state update with only changed values
-+        // Prepare atomic state update with only changed values
-         const updates: Partial<UserState> = {
-           userInfo,
--          statsLoading: false,
--          profileLoading: false,
-           error: null,
--          isHydrated: true,
-           version: CURRENT_VERSION
-         };
- 
-@@ -365,33 +418,7 @@ export const useUserStore = create<UserState & UserActions>()(
-           updates.isSubscribed = newSubStatus;
-         }
- 
--        // IMPORTANT: Check onboarding status from userInfo.onboardingInfo
--        if (userInfo.onboardingInfo && typeof userInfo.onboardingInfo === 'object') {
--          // Check if targetScore exists (main branch logic)
--          const targetScore = userInfo.onboardingInfo.targetScore;
--          const isOnboardingComplete = targetScore !== undefined && 
--                                targetScore !== null && 
--                                targetScore > 0;
--          
--          // Set onboardingComplete based on targetScore criteria to match main branch
--          if (isOnboardingComplete !== get().onboardingComplete) {
--            // Apply this update immediately and separately from the batch update
--            set({ onboardingComplete: isOnboardingComplete });
--            
--            // Remove from batch updates to avoid overwriting
--            delete updates.onboardingComplete;
--            
--            // Sync with database if there's a mismatch
--            const dbOnboardingComplete = userInfo.onboardingInfo.onboardingComplete === true;
--            if (dbOnboardingComplete !== isOnboardingComplete) {
--              // Queue an update to sync the database value
--              setTimeout(() => {
--                get().updateProfile({ onboardingComplete: isOnboardingComplete });
--              }, 0);
--            }
--          }
--        }
--
-+        // Handle profile data if available
-         if (profileResponse.ok) {
-           const profileData = await profileResponse.json();
-           const currentProfile = get().profile;
-@@ -417,19 +444,36 @@ export const useUserStore = create<UserState & UserActions>()(
-               isProfileComplete: (profileData.completedSteps || []).length >= 3
-             });
-           }
-+        } else {
-+          console.warn(`[UserStore] Profile fetch failed: ${profileResponse.status} ${profileResponse.statusText}`);
-         }
--
--        // Apply all updates in a single state update
-+        
-+        // Check if we're about to set onboardingComplete at root level (bug prevention)
-+        if ('onboardingComplete' in updates) {
-+          // @ts-ignore - Intentionally modifying object to prevent a bug
-+          delete updates.onboardingComplete;
-+        }
-+        
-+        // Complete the loading states
-+        updates.statsLoading = false;
-+        updates.profileLoading = false;
-+        
-+        // Finally, apply all updates in a single atomic state update
-         set(updates);
--
-+        
-+        return userInfo;
-       } catch (error) {
--        console.error('Error in refreshUserInfo:', error);
-+        console.error('[UserStore] Error in refreshUserInfo:', error);
-+        
-+        // Set detailed error state
-         set({ 
-           error: error instanceof Error ? error.message : 'Failed to refresh user info',
-           statsLoading: false,
--          profileLoading: false,
--          isHydrated: false
-+          profileLoading: false
-         });
-+        
-+        // Re-throw to allow handling by callers
-+        throw error;
-       }
-     },
-     
-@@ -455,6 +499,158 @@ export const useUserStore = create<UserState & UserActions>()(
-     
-     updateCoinsDisplay: (newAmount) => {
-       set({ coins: newAmount });
-+    },
-+
-+    /**
-+     * Batch update multiple profile properties in a single operation
-+     * @param updates Object containing all properties to update
-+     * @param options Optional settings for the update operation
-+     */
-+    batchUpdateProfile: async (
-+      updates: Partial<UserProfile & { onboardingInfo?: Partial<OnboardingInfo> }>, 
-+      options: BatchUpdateOptions = { showToast: true, rollbackOnError: true }
-+    ): Promise<UserProfile | null> => {
-+      console.log('[DEBUG][userSlice] batchUpdateProfile called with updates:', Object.keys(updates));
-+      
-+      // Get current state for potential rollback
-+      const currentState = {
-+        profile: get().profile,
-+        completedSteps: get().completedSteps,
-+        studyPreferences: get().studyPreferences,
-+        interfaceSettings: get().interfaceSettings,
-+        tutorialProgress: get().tutorialProgress,
-+        lastVisitedRoute: get().lastVisitedRoute,
-+        userInfo: get().userInfo
-+      };
-+      
-+      try {
-+        // First update local state
-+        const updatedState: Partial<UserState> = {};
-+        
-+        // Process profile updates
-+        if (updates.profile) {
-+          updatedState.profile = updates.profile;
-+        }
-+        
-+        // Process completedSteps updates
-+        if (updates.completedSteps) {
-+          updatedState.completedSteps = updates.completedSteps;
-+          updatedState.isProfileComplete = updates.completedSteps.length >= 3;
-+          
-+          // Also update in profile if it exists
-+          if (currentState.profile && !updates.profile) {
-+            updatedState.profile = { 
-+              ...currentState.profile, 
-+              completedSteps: updates.completedSteps 
-+            };
-+          }
-+        }
-+        
-+        // Process studyPreferences updates
-+        if (updates.studyPreferences) {
-+          updatedState.studyPreferences = { 
-+            ...currentState.studyPreferences, 
-+            ...updates.studyPreferences 
-+          };
-+          
-+          // Also update in profile if it exists
-+          if (currentState.profile && !updates.profile) {
-+            updatedState.profile = { 
-+              ...updatedState.profile || currentState.profile, 
-+              studyPreferences: updatedState.studyPreferences 
-+            };
-+          }
-+        }
-+        
-+        // Process interfaceSettings updates
-+        if (updates.interfaceSettings) {
-+          updatedState.interfaceSettings = { 
-+            ...currentState.interfaceSettings, 
-+            ...updates.interfaceSettings 
-+          };
-+          
-+          // Also update in profile if it exists
-+          if (currentState.profile && !updates.profile) {
-+            updatedState.profile = { 
-+              ...updatedState.profile || currentState.profile, 
-+              interfaceSettings: updatedState.interfaceSettings 
-+            };
-+          }
-+        }
-+        
-+        // Process tutorialProgress updates
-+        if (updates.tutorialProgress) {
-+          updatedState.tutorialProgress = { 
-+            ...currentState.tutorialProgress, 
-+            ...updates.tutorialProgress 
-+          };
-+          
-+          // Also update in profile if it exists
-+          if (currentState.profile && !updates.profile) {
-+            updatedState.profile = { 
-+              ...updatedState.profile || currentState.profile, 
-+              tutorialProgress: updatedState.tutorialProgress 
-+            };
-+          }
-+        }
-+        
-+        // Process lastVisitedRoute updates
-+        if (updates.lastVisitedRoute) {
-+          updatedState.lastVisitedRoute = updates.lastVisitedRoute;
-+          
-+          // Also update in profile if it exists
-+          if (currentState.profile && !updates.profile) {
-+            updatedState.profile = { 
-+              ...updatedState.profile || currentState.profile, 
-+              lastVisitedRoute: updates.lastVisitedRoute 
-+            };
-+          }
-+        }
-+        
-+        // Process onboardingInfo updates
-+        if (updates.onboardingInfo && currentState.userInfo) {
-+          updatedState.userInfo = {
-+            ...currentState.userInfo,
-+            onboardingInfo: {
-+              ...currentState.userInfo.onboardingInfo || {},
-+              ...updates.onboardingInfo
-+            }
-+          };
-+        }
-+        
-+        console.log('[DEBUG][userSlice] Applying batch updates to local state:', Object.keys(updatedState));
-+        
-+        // Apply all updates in a single atomic operation
-+        set(updatedState);
-+        
-+        // Then persist to backend
-+        console.log('[DEBUG][userSlice] Persisting batch updates to backend');
-+        const response = await fetch('/api/user-info/profile', {
-+          method: 'PATCH',
-+          headers: { 'Content-Type': 'application/json' },
-+          body: JSON.stringify(updates)
-+        });
-+        
-+        if (!response.ok) {
-+          throw new Error(`Backend update failed: ${response.status} ${response.statusText}`);
-+        }
-+        
-+        const responseData = await response.json();
-+        console.log('[DEBUG][userSlice] Backend batch update successful:', responseData);
-+        
-+        return responseData;
-+      } catch (error) {
-+        console.error('[DEBUG][userSlice] Error in batchUpdateProfile:', error);
-+        
-+        // Roll back to original state if specified
-+        if (options.rollbackOnError) {
-+          console.log('[DEBUG][userSlice] Rolling back to original state');
-+          set(currentState);
-+        }
-+        
-+        // Return the error to allow callers to handle it
-+        throw error;
-+      }
-     }
-   }))
- );
-@@ -655,104 +851,5 @@ const isProfileComplete = (profile: UserProfile | null): boolean => {
-   );
- };
- 
--// State update utility with optimistic updates and rollback
--const updateState = async (
--  set: (state: Partial<UserState> | ((state: UserState) => Partial<UserState>)) => void,
--  get: () => UserState,
--  updates: Partial<UserState>,
--  options: { sync?: boolean } = {}
--) => {
--  try {
--    // Store previous state for rollback
--    const previousState = get();
--    
--    // Optimistically update local state
--    set((state) => ({
--      ...state,
--      ...updates,
--      error: null
--    }));
--
--    // If sync is requested, update database
--    if (options.sync) {
--      try {
--        const response = await fetch('/api/user-info', {
--          method: 'PATCH',
--          headers: { 'Content-Type': 'application/json' },
--          body: JSON.stringify(updates)
--        });
--
--        if (!response.ok) {
--          throw new Error('Failed to sync with database');
--        }
--
--        // Update local state with server response
--        const serverState = await response.json();
--        set((state) => ({
--          ...state,
--          ...serverState
--        }));
--      } catch (error) {
--        // Rollback on sync failure
--        console.error('Sync failed, rolling back:', error);
--        set(previousState);
--        throw error;
--      }
--    }
--  } catch (error) {
--    set((state) => ({
--      ...state,
--      error: error instanceof Error ? error.message : 'Update failed'
--    }));
--    throw error;
--  }
--};
--
- // Constants for state management
- const CURRENT_VERSION = 1;
--
--const initialState: UserState = {
--  // Version tracking
--  version: CURRENT_VERSION,
--  isHydrated: false,
--  
--  // Profile state
--  profile: null,
--  profileLoading: true,
--  isProfileComplete: false,
--  completedSteps: [],
--  studyPreferences: {
--    dailyGoal: 30,
--    reminderTime: '09:00'
--  },
--  interfaceSettings: {
--    darkMode: false,
--    fontSize: 'medium'
--  },
--  tutorialProgress: {
--    currentStep: 0,
--    completedRoutes: []
--  },
--  onboardingComplete: false,
--  lastVisitedRoute: '/',
--  
--  // User info state
--  userInfo: null,
--  isSubscribed: false,
--  
--  // Stats state
--  coins: 0,
--  statsLoading: false,
--  error: null
--};
--
--// Hydration check utility
--const isStateHydrated = (state: UserState): boolean => {
--  return state.isHydrated && state.version === CURRENT_VERSION;
--};
--
--// State reset utility
--const resetState = (): UserState => ({
--  ...initialState,
--  version: CURRENT_VERSION
--});
diff --git a/README_Docs/tasks/user-dennis/4-PR-Notes.md b/README_Docs/tasks/user-dennis/4-PR-Notes.md
index e7f2a293b5a08d6503146993f5d1319d1bf7dee9..ebec7a41207e635cfd311d0a3a4d0d960dd049c6 100644
--- a/README_Docs/tasks/user-dennis/4-PR-Notes.md
+++ b/README_Docs/tasks/user-dennis/4-PR-Notes.md
@@ -1,151 +1,73 @@
-# PR Analysis Notes
-
-## Summary of Key Changes
-
-This PR addresses several critical bugs and implements significant improvements in the onboarding and user authentication flows. The primary focus has been eliminating race conditions, improving state management, and ensuring a more reliable user experience.
-
-### 1. Fixed Core Navigation Bug
-- Resolved the issue where users were inappropriately redirected from the root URL (`localhost:3000` or `mymcat.ai`).
-- Implemented proper logic to ensure redirects only occur when users explicitly click the login button.
-- Added specific handling for various user flows (new users, returning users, post-login, post-logout).
-
-### 2. Eliminated Race Conditions
-- Replaced arbitrary timeouts (1-second delay in `StoreInitializer`) with dependency-based approaches.
-- Implemented comprehensive loading state management:
-  - Added detailed tracking of async operations
-  - Created proper state transition handling
-  - Eliminated cascading and redundant data fetches
-- Fixed the "duplicate onboardingComplete" bug by implementing defensive programming patterns.
-
-### 3. Improved State Management
-- Enhanced the Zustand store implementation with better error handling and loading states.
-- Implemented atomic state updates to prevent UI inconsistencies.
-- Added safeguards against root-level `onboardingComplete` property bug.
-- Improved data synchronization patterns between the client and server.
-
-### 4. Enhanced Developer Experience
-- Removed redundant debug statements and console logs.
-- Simplified logging to focus on critical events and errors.
-- Organized code with clearer structure and proper section headers.
-- Improved documentation with detailed notes on implementation patterns.
-
-### 5. Code Quality Improvements
-- Refactored `StoreInitializer` component to use dependency-based refreshes.
-- Enhanced `RouteTracker` with better loading state detection and management.
-- Improved `useOnboardingInfo` hook with proper request state tracking.
-- Implemented defensive coding patterns to prevent data inconsistencies.
-
-## Impact Areas
-
-1. **User Authentication Flow**
-   - Landing page behavior
-   - Login/registration process
-   - Session management
-   - Post-authentication redirects
-
-2. **Onboarding Process**
-   - Step progression
-   - Data persistence
-   - State synchronization
-   - Validation checks
-
-3. **Global State Management**
-   - User data handling
-   - Loading states
-   - Error handling
-   - Data fetching patterns
-
-## Testing Recommendations
-
-1. **Core Navigation Scenarios**
-   - Verify root URL (`localhost:3000`) behavior when:
-     - A new user visits the site
-     - A returning user (who completed onboarding) visits
-     - A user with incomplete onboarding visits
-     - A user manually navigates to root after being logged in
-     - A user returns to the site after logging out
-
-2. **Onboarding Flow**
-   - Test all onboarding steps, especially:
-     - Incomplete onboarding resumption
-     - Final step completion
-     - Validation of required fields
-     - Proper redirects after completion
-
-3. **Edge Cases**
-   - Interrupted network connections during onboarding
-   - Multiple concurrent sessions
-   - Browser refresh during critical state transitions
-
-## Questions for Review
-
-1. Should we implement the suggested `refreshUserInfo()` call in `handleReferralComplete` for complete synchronization?
-2. Are there any remaining edge cases in the navigation flow that should be addressed?
-3. Should we consider adopting React Query or SWR for data fetching in future updates?
-
-## Next Steps
-
-If this PR is approved, we should consider the following future improvements:
-
-1. ✅ Implemented critical state synchronization improvements:
-   - Added a full `refreshUserInfo()` call after setting `onboardingComplete: true` in `handleReferralComplete()`
-   - Implemented atomic updates for related state changes with the new `batchUpdateProfile` function
-   - Added error handling with rollback capabilities for failed API operations
-   - Replaced individual property updates with batch updates for related changes
-
-2. Additional recommended improvements:
-   - Reduce API calls through batching and caching
-   - Enhance error handling with retry logic
-   - Further streamline state management
-   - Improve auth flow with session persistence
-
-3. Add comprehensive automated tests for all critical user flows
-
-4. Consider performance optimizations:
-   - Caching strategies for user data
-   - Optimistic UI updates
-   - Lazy loading of non-critical components
-
-## Potential Impact Areas
-
-1. **Onboarding Completion Flow**
-   - The modifications primarily affect the final step of the onboarding process
-   - Users completing onboarding should experience more reliable state transitions
-   - The changes ensure consistent state between client and server during critical transitions
-
-2. **Error Recovery**
-   - Failed API operations now have proper rollback, preventing inconsistent application state
-   - Users should experience fewer stuck states or partial updates if network issues occur
-
-3. **Developer Experience**
-   - Enhanced debug logging makes it easier to diagnose state-related issues
-   - Consistent patterns for state updates improve code maintainability
-
-## Recommendations for PR Review
+# Dynamic Kalypso Welcome Message Feature
 
-1. **Thorough Testing Needed For**:
-   - Complete onboarding flow from start to finish
-   - Error scenarios (network interruptions during onboarding completion)
-   - Edge cases with partially completed onboarding data
-   - Verify both the direct `onboardingComplete` flag and the fallback `targetScore` logic work as expected
+**User Story:** As a student using the MCAT prep platform, I want to be greeted by Kalypso (the AI cat tutor) with personalized messages that acknowledge my recent activity and upcoming tests, so I feel motivated and stay informed about my progress.
 
-2. **Code Quality Improvements**:
-   - The PR follows good practices with atomic updates and error handling
-   - The implementation of rollback capabilities is well-structured and enhances reliability
+**Key Files:**
+- `app/api/kalypso/welcome/route.ts`: New API endpoint that generates personalized welcome messages
+- `components/chatgpt/ChatContainer.tsx`: Updated to fetch and display welcome messages
+- `lib/ai-completion.ts`: Integration with GPT-4o Mini for message generation
 
-3. **Future Considerations**:
-   - While this PR addresses the immediate state synchronization concerns, there are additional improvements that could be made in future PRs:
-     - Further reducing API calls through batching and caching
-     - Enhancing error handling with retry logic
-     - Further streamlining state management
-     - Improving auth flow with session persistence
+**Implementation:**
+- First-time users get a special introduction video and are tracked via `hasSeenIntroVideo` flag
+- Returning users receive a personalized welcome message that includes:
+  - Days since last activity
+  - Latest test score and name
+  - Notification about upcoming test dates with motivation
+- Messages are cached to improve performance and reduce API calls
+- Fallback messages are provided in case of errors
 
-## Questions to Address Before Merging
+# Global UI Navigation Tracking
 
-1. Should we reconsider the fallback logic that uses `targetScore > 0` as an indicator of completed onboarding? This can lead to users being routed to /home when their onboarding isn't actually complete.
+**User Story:** As a developer, I want to track user navigation centrally to provide contextual awareness to Kalypso and ensure consistent UI state across the application.
 
-2. Are there any specific performance concerns with adding the additional `refreshUserInfo()` call after completing onboarding?
+**Key Files:**
+- `store/slices/uiSlice.ts`: Enhanced with navigation tracking capabilities
+- `store/selectors.ts`: Added selectors for accessing navigation state
+- `components/RouteTracker.tsx`: Updated to handle navigation tracking
+- `app/(dashboard)/(routes)/home/page.tsx`: Integrated with new navigation system
 
-3. Have we considered how these changes might affect mobile users with potentially unstable connections?
+**Implementation:**
+- Navigation state is now stored in a central location with:
+  - Current page/route 
+  - Sub-section details (for nested navigation)
+  - Context data specific to the current page
+- New hooks and selectors for components to access and update navigation
+- Better logging and debugging capabilities
 
-4. Is there a need for additional integration tests to ensure these state management improvements are preserved in future changes?
\ No newline at end of file
+# Performance Optimizations
+
+**User Story:** As a user, I want the application to load quickly and respond to my actions without delays.
+
+**Key Files:**
+- `components/RouteTracker.tsx`: Added caching for study plan data
+- `app/api/study-plan/route.ts`: Enhanced with better logging
+- `app/api/user-info/route.ts`: Improved error handling
+
+**Implementation:**
+- Local caching of API responses to reduce redundant calls
+- Rate limiting to prevent API abuse
+- Improved error handling with detailed logs
+- Better loading states and fallbacks
+
+# Introduction Video Feature
+
+**User Story:** As a new user, I want to be introduced to the platform with a helpful video that explains key features, and not see it again once I've watched it.
+
+**Key Files:**
+- `components/home/IntroVideoPlayer.tsx`: New component for displaying intro video
+- `prisma/migrations/20230815123456_add_hasSeenIntroVideo.sql`: Database schema update
+- `app/(dashboard)/(routes)/home/page.tsx`: Logic to show/hide intro video
+
+**Implementation:**
+- First-time users see an introduction video in place of the ChatContainer
+- Video includes controls and accessibility features
+- Confirmation button appears after watching
+- User preference is stored in database to prevent showing again
+
+# Elevenlabs Integration (Planned)
+
+**User Story:** As a user, I want Kalypso to have a more realistic and engaging voice when speaking to me.
+
+**Implementation:**
+- Plans to integrate ElevenLabs for more natural Kalypso voice interactions
+- Mentioned in tasks but implementation pending
diff --git a/README_Docs/tasks/user-dennis/4-PR-SquashCommand.md b/README_Docs/tasks/user-dennis/4-PR-SquashCommand.md
new file mode 100644
index 0000000000000000000000000000000000000000..a5d5bcc3a73c2baa4c27ecf776f1b2e0c0bd11e9
--- /dev/null
+++ b/README_Docs/tasks/user-dennis/4-PR-SquashCommand.md
@@ -0,0 +1,89 @@
+# Squashing a Branch into a Single Commit
+
+This guide explains how to squash multiple commits in a feature branch into a single clean commit before creating a pull request.
+
+## Ready for PR: Squashing Your Feature Branch
+
+Assuming you're on your feature branch and have completed your work, follow these steps to squash your commits:
+
+1. First, make sure your branch is up to date with main:
+   ```bash
+   git fetch origin
+   git rebase origin/main
+   ```
+
+2. Resolve any conflicts if they occur, then continue with one of these methods:
+
+## Method 1: Interactive Rebase (Recommended)
+
+1. Find out how many commits you need to squash:
+   ```bash
+   git log --oneline origin/main..HEAD
+   ```
+   This shows all commits that are in your branch but not in main.
+
+2. Start an interactive rebase:
+   ```bash
+   git rebase -i origin/main
+   ```
+
+3. In the text editor that opens, change all but the first "pick" to "squash" or "s":
+   ```
+   pick abc1234 First commit message
+   s def5678 Second commit message
+   s ghi9101 Third commit message
+   ```
+
+4. Save and close the editor. Another editor will open to combine the commit messages.
+
+5. Edit the final commit message, save, and close.
+
+6. Force push your branch:
+   ```bash
+   git push --force-with-lease origin your-feature-branch
+   ```
+
+## Method 2: Soft Reset and Recommit
+
+If you find interactive rebase confusing, use this simpler method:
+
+1. Reset to the main branch while keeping your changes:
+   ```bash
+   git reset origin/main
+   ```
+
+2. Stage all changes:
+   ```bash
+   git add .
+   ```
+
+3. Create a single commit with a descriptive message:
+   ```bash
+   git commit -m "Feature: Add comprehensive description of your changes"
+   ```
+
+4. Force push your branch:
+   ```bash
+   git push --force-with-lease origin your-feature-branch
+   ```
+
+## Method 3: GitHub UI (Easiest)
+
+If you've already created a pull request:
+
+1. Navigate to your pull request on GitHub
+2. Click the "Merge pull request" button dropdown
+3. Select "Squash and merge"
+4. Edit the commit message if desired
+5. Click "Confirm squash and merge"
+
+## ⚠️ Important Warning
+
+Force pushing rewrites git history. Only force push to your personal feature branches that aren't being used by others.
+
+## Quick Reference
+
+One-liner to squash all commits since branching from main:
+```bash
+git reset --soft origin/main && git commit -m "Feature: Your comprehensive commit message"
+```
\ No newline at end of file
diff --git a/README_Docs/tasks/user-dennis/3-TestData-PrismaInstructions.md b/README_Docs/tasks/user-dennis/4-TestData-PrismaInstructions.md
similarity index 100%
rename from README_Docs/tasks/user-dennis/3-TestData-PrismaInstructions.md
rename to README_Docs/tasks/user-dennis/4-TestData-PrismaInstructions.md
diff --git a/README_Docs/tasks/user-dennis/5-cursor-notes.md b/README_Docs/tasks/user-dennis/5-cursor-notes.md
index fe351b945000e48f239c50fa54d09644e02e1d40..cd4772d64811afcdaf725c156116e96e78f46c89 100644
--- a/README_Docs/tasks/user-dennis/5-cursor-notes.md
+++ b/README_Docs/tasks/user-dennis/5-cursor-notes.md
@@ -24,4 +24,8 @@ Evaluate whether our branch behaves and acts functionally the SAME as main.
 
 Having the worktree available provides:
 - Direct access to main branch files for inspection
-- The ability to verify functional equivalence with confidence
\ No newline at end of file
+- The ability to verify functional equivalence with confidence
+
+
+
+Take a look at this check container component that's in the branch to folder. This existed in a separate branch where we styled it differently. Please note any differences between this file and the one we have for our check container and match the styling of the branch to. So therefore refactor our check container to match the styling. It also attaches a photo of what it should look like.
\ No newline at end of file
diff --git a/app/(dashboard)/(routes)/ankiclinic/page.tsx b/app/(dashboard)/(routes)/ankiclinic/page.tsx
index 1e667635ad44857abb6f36294092a984b2a70350..3c56fc871a392f19927534bd18ea64a01553de41 100644
--- a/app/(dashboard)/(routes)/ankiclinic/page.tsx
+++ b/app/(dashboard)/(routes)/ankiclinic/page.tsx
@@ -971,7 +971,6 @@ const DoctorsOfficePage = () => {
         largeDialogQuit={largeDialogQuit}
         setLargeDialogQuit={setLargeDialogQuit}
       />}
-      
       {/* Add HoverSidebar instead of FloatingButton */}
       <HoverSidebar
         activities={activities}
diff --git a/app/(dashboard)/(routes)/home/FloatingButton.tsx b/app/(dashboard)/(routes)/home/FloatingButton.tsx
deleted file mode 100644
index b388574f9d4aad834bc5d30e6c2a50192153f662..0000000000000000000000000000000000000000
--- a/app/(dashboard)/(routes)/home/FloatingButton.tsx
+++ /dev/null
@@ -1,375 +0,0 @@
-//app/(dashboard)/(routes)/home/FloatingButton.tsx
-"use client";
-
-import React, { useState, useRef, useEffect, useCallback, memo } from "react";
-import { useRouter } from 'next/navigation';
-import Image from "next/image";
-import { AnimatePresence } from "framer-motion";
-import clsx from "clsx";
-import { toast } from "react-hot-toast";
-import FloatingTaskList from './FloatingTaskList';
-
-/* ------------------------------------------ Constants ----------------------------------------- */
-const HOVER_TIMEOUT = 300;
-const TAB_CHANGE_TIMEOUT = 3000;
-
-const buttonPositions = [
-  { top: 0, left: 0, tab: "Tests", icon: "/icons/exam.svg" },
-  { top: 0, left: 0, tab: "ankiclinic", icon: "/icons/gamecontroller.svg" },
-  { top: 0, left: 0, tab: "CARS", icon: "/icons/book.svg" },
-  { top: 0, left: 0, tab: "AdaptiveTutoringSuite", icon: "/graduationcap.svg" },
-] as const;
-
-const inactivePositions = [
-  { top: -70, left: 10 },
-  { top: -40, left: 80 },
-  { top: 30, left: 100 },
-] as const;
-
-const labelTexts = {
-  "Tests": "Practice Tests",
-  "ankiclinic": "The Anki Clinic",
-  "CARS": "Daily CARs Suite",
-  "AdaptiveTutoringSuite": "Tutoring Suite",
-} as const;
-
-const PROTECTED_ROUTES = ['/pricing', '/onboarding'];
-
-/* -------------------------------------------- Types ------------------------------------------- */
-interface FloatingButtonProps {
-  activities?: any[];
-  onTasksUpdate?: (tasks: any[]) => void;
-  onTabChange: (tab: string) => void;
-  currentPage: string;
-  initialTab: string;
-  className?: string;
-  isSubscribed?: boolean;
-}
-
-interface ButtonPosition {
-  top: number;
-  left: number;
-  tab: string;
-  icon: string;
-}
-
-interface TypewriterProps {
-  text: string;
-  delay?: number;
-}
-
-/* ---------------------------------------- Components ------------------------------------------ */
-const Typewriter = memo<TypewriterProps>(({ text, delay = 0 }) => {
-  const [displayedText, setDisplayedText] = useState('');
-
-  useEffect(() => {
-    const timeout = setTimeout(() => {
-      let currentIndex = 0;
-      const interval = setInterval(() => {
-        if (currentIndex <= text.length) {
-          setDisplayedText(text.slice(0, currentIndex));
-          currentIndex++;
-        } else {
-          clearInterval(interval);
-        }
-      }, 10);
-
-      return () => clearInterval(interval);
-    }, delay);
-
-    return () => clearTimeout(timeout);
-  }, [text, delay]);
-
-  return <span>{displayedText}</span>;
-});
-Typewriter.displayName = 'Typewriter';
-
-const FloatingButton = memo<FloatingButtonProps>(({ 
-  onTabChange, 
-  currentPage, 
-  initialTab, 
-  className,
-  activities = [],
-  onTasksUpdate,
-  isSubscribed = false
-}) => {
-  /* ------------------------------------------- State -------------------------------------------- */
-  const [isHovered, setIsHovered] = useState(false);
-  const [activeTab, setActiveTab] = useState<string>(initialTab);
-  const [recentlyChangedTab, setRecentlyChangedTab] = useState(false);
-  const [showTutoringMessage, setShowTutoringMessage] = useState(false);
-
-  /* ------------------------------------------- Refs --------------------------------------------- */
-  const hoverTimeout = useRef<number | null>(null);
-  const tabChangeTimeout = useRef<number | null>(null);
-  const router = useRouter();
-
-  /* ----------------------------------------- Callbacks ------------------------------------------ */
-  const getLabelPosition = useCallback((index: number) => {
-    switch (index) {
-      case 0: return { top: '-5.5rem', left: '10rem' };
-      case 1: return { top: '-1.2rem', left: '15.5rem' };
-      case 2: return { top: '4rem', left: '16.5rem' };
-      default: return { top: '2rem', left: '12.5rem' };
-    }
-  }, []);
-
-  /* ---------------------------------------- Event Handlers -------------------------------------- */
-  const handleMouseEnter = useCallback(() => {
-    if (hoverTimeout.current) {
-      clearTimeout(hoverTimeout.current);
-    }
-    setIsHovered(true);
-  }, []);
-
-  const handleMouseLeave = useCallback(() => {
-    if (hoverTimeout.current) {
-      clearTimeout(hoverTimeout.current);
-    }
-    hoverTimeout.current = window.setTimeout(() => {
-      setIsHovered(false);
-    }, HOVER_TIMEOUT);
-  }, []);
-
-  const handleTaskListHover = useCallback((hovering: boolean) => {
-    if (hoverTimeout.current) {
-      clearTimeout(hoverTimeout.current);
-    }
-    if (hovering) {
-      setIsHovered(true);
-    } else {
-      hoverTimeout.current = window.setTimeout(() => {
-        setIsHovered(false);
-      }, 500);
-    }
-  }, []);
-
-  // Used to direct free user (isSubscribed = false) to /pricing
-  const handleButtonClick = async (tab: string) => {
-
-    // Check if current path is protected from auto-redirect
-    // Allow useres to stay on offer page, preents auto-redirect to /ankiclinic when on offer page
-    const currentPath = window.location.pathname;
-    if (PROTECTED_ROUTES.some(route => currentPath.startsWith(route))) {
-      return;
-    }
-
-    if (!isSubscribed && tab !== 'ankiclinic') {
-      router.push('/pricing');
-      return;
-    }
-
-    try {
-      const response = await fetch("/api/user-info");
-      if (!response.ok) throw new Error("Failed to fetch user info");
-      const data = await response.json();
-      const unlocks = Array.isArray(data.unlocks) ? data.unlocks : [];
-
-      const tabActions = {
-        Tests: () => {
-          if (currentPage === 'ankiclinic') {
-            router.push('/home');
-          }
-          setActiveTab(tab);
-          setRecentlyChangedTab(true);
-          onTabChange(tab);
-          if (tabChangeTimeout.current) {
-            clearTimeout(tabChangeTimeout.current);
-          }
-          tabChangeTimeout.current = window.setTimeout(() => {
-            setRecentlyChangedTab(false);
-          }, TAB_CHANGE_TIMEOUT);
-        },
-        AdaptiveTutoringSuite: () => {
-          router.push('/home');
-          setActiveTab(tab);
-          setRecentlyChangedTab(true);
-          onTabChange(tab);
-          if (tabChangeTimeout.current) {
-            clearTimeout(tabChangeTimeout.current);
-          }
-          tabChangeTimeout.current = window.setTimeout(() => {
-            setRecentlyChangedTab(false);
-          }, TAB_CHANGE_TIMEOUT);
-        },
-        ankiclinic: () => {
-          if (currentPage === 'home') {
-            router.push('/ankiclinic');
-          } else {
-            router.push('/home');
-          }
-          setActiveTab(tab);
-          onTabChange(tab);
-        },
-        CARS: () => {
-          if (currentPage === 'ankiclinic') {
-            router.push('/home');
-          }
-          setActiveTab(tab);
-          setRecentlyChangedTab(true);
-          onTabChange(tab);
-          if (tabChangeTimeout.current) {
-            clearTimeout(tabChangeTimeout.current);
-          }
-          tabChangeTimeout.current = window.setTimeout(() => {
-            setRecentlyChangedTab(false);
-          }, TAB_CHANGE_TIMEOUT);
-        },
-        default: () => {
-          if (currentPage === 'ankiclinic') {
-            router.push('/home');
-          }
-          setActiveTab(tab);
-          setRecentlyChangedTab(true);
-          onTabChange(tab);
-          if (tabChangeTimeout.current) {
-            clearTimeout(tabChangeTimeout.current);
-          }
-          tabChangeTimeout.current = window.setTimeout(() => {
-            setRecentlyChangedTab(false);
-          }, TAB_CHANGE_TIMEOUT);
-        }
-      };
-
-      const action = tabActions[tab as keyof typeof tabActions] || tabActions.default;
-      action();
-    } catch (error) {
-      console.error("Error checking unlocks:", error);
-      toast.error("Failed to check feature access");
-    }
-  };
-
-  /* ---------------------------------------- Effects -------------------------------------------- */
-  useEffect(() => {
-    return () => {
-      if (tabChangeTimeout.current) {
-        clearTimeout(tabChangeTimeout.current);
-      }
-      if (hoverTimeout.current) {
-        clearTimeout(hoverTimeout.current);
-      }
-    };
-  }, []);
-
-  /* ---------------------------------------- Render -------------------------------------------- */
-  return (
-    <>
-      {/* Overlay */}
-      {isHovered && (
-        <div className="fixed inset-0 bg-black bg-opacity-50 z-40" />
-      )}
-
-      {/* Task List */}
-      <AnimatePresence>
-        {isHovered && currentPage === "ankiclinic" && !recentlyChangedTab && (
-          <FloatingTaskList 
-            activities={activities}
-            onTasksUpdate={() => onTasksUpdate?.([])}
-            onHover={handleTaskListHover}
-          />
-        )}
-      </AnimatePresence>
-
-      {/* Main Button Group */}
-      <span className="fixed bottom-[8rem] left-[0.625rem] z-50">
-        <div
-          className="relative group"
-          onMouseEnter={handleMouseEnter}
-          onMouseLeave={handleMouseLeave}
-        >
-          {buttonPositions.map((pos, index) => {
-            const isActive = activeTab === pos.tab;
-            const activeIndex = buttonPositions.findIndex(
-              (p) => p.tab === activeTab
-            );
-            const inactiveIndex = buttonPositions
-              .filter((p) => p.tab !== activeTab)
-              .findIndex((p) => p.tab === pos.tab);
-
-            const isDisabled = !isSubscribed && pos.tab !== 'ankiclinic';
-
-            const top = isActive
-              ? 0
-              : isHovered
-              ? inactivePositions[inactiveIndex]?.top
-              : inactivePositions[activeIndex]?.top;
-
-            const left = isActive
-              ? 0
-              : isHovered
-              ? inactivePositions[inactiveIndex]?.left
-              : inactivePositions[activeIndex]?.left;
-
-            const labelPosition = getLabelPosition(inactiveIndex);
-            const labelText = labelTexts[pos.tab] || pos.tab;
-
-            return (
-              <div key={index} className="relative">
-                <button
-                  className={clsx(
-                    "w-16 h-16 bg-[var(--theme-navbutton-color)] border-2 border-white text-white rounded-full shadow-lg focus:outline-none transition-all transform hover:scale-110 absolute flex justify-center items-center",
-                    {
-                      "w-24 h-24": isActive,
-                      "opacity-100": isHovered || isActive,
-                      "opacity-0 pointer-events-none": !isHovered && !isActive,
-                    }
-                  )}
-                  style={{
-                    top,
-                    left,
-                    transitionDelay: `${index * 50}ms`,
-                    color: 'var(--theme-navbutton-color)',
-                  }}
-                  onClick={() => handleButtonClick(pos.tab)}
-                >
-                  <Image 
-                    src={pos.icon} 
-                    alt={pos.tab} 
-                    width={isActive ? 44 : 32} 
-                    height={isActive ? 44 : 32} 
-                    className={isDisabled ? "opacity-50" : ""}
-                  />
-                  {isDisabled && isHovered && (
-                    <div className="absolute -top-2 -right-2">
-                      <svg className="w-4 h-4 text-amber-500" fill="currentColor" viewBox="0 0 20 20">
-                        <path fillRule="evenodd" d="M5 9V7a5 5 0 0110 0v2a2 2 0 012 2v5a2 2 0 01-2 2H5a2 2 0 01-2-2v-5a2 2 0 012-2zm8-2v2H7V7a3 3 0 016 0z" clipRule="evenodd" />
-                      </svg>
-                    </div>
-                  )}
-                </button>
-                <span
-                  className="absolute"
-                  style={{
-                    top: labelPosition.top,
-                    left: labelPosition.left,
-                    transform: 'translate(-50%, -50%)',
-                    zIndex: 60,
-                  }}
-                >
-                  {isHovered && !isActive && (
-                    <span
-                      className="bg-transparent text-white text-2xl px-2 py-1 rounded overflow-hidden"
-                      style={{
-                        display: 'inline-block',
-                        width: '150px',
-                        textAlign: 'left',
-                        whiteSpace: 'nowrap',
-                        overflow: 'visible',
-                      }}
-                    >
-                      <Typewriter text={labelText} delay={0} />
-                    </span>
-                  )}
-                </span>
-              </div>
-            );
-          })}
-        </div>
-      </span>
-    </>
-  );
-});
-
-FloatingButton.displayName = 'FloatingButton';
-
-export default FloatingButton;
\ No newline at end of file
diff --git a/app/(dashboard)/(routes)/home/SideBar.tsx b/app/(dashboard)/(routes)/home/SideBar.tsx
index 90c66eaef524395dd93a697207604a842efd6131..acd550af9bcce5495b22d6065fde0e369e0c05d3 100644
--- a/app/(dashboard)/(routes)/home/SideBar.tsx
+++ b/app/(dashboard)/(routes)/home/SideBar.tsx
@@ -80,7 +80,7 @@ const SideBar: React.FC<SideBarProps> = ({
   
   const getInitialActiveTab = () => {
     if (!isSubscribed) {
-      return "tab5"; // Leaderboard tab
+      return "tab2"; // Default to Tasks tab even for non-subscribers
     }
 
     switch (currentPage) {
@@ -88,13 +88,13 @@ const SideBar: React.FC<SideBarProps> = ({
         return "tab2"; // Tasks tab
       case "CARS":
       case "AdaptiveTutoringSuite":
-        return "tab1"; // Insights tab
+        return "tab2"; // Default to Tasks tab
       case "Tests":
-        return "tab5"; // Update from tab4 (Help) to tab5 (Leaderboard) since we removed Help
+        return "tab2"; // Default to Tasks tab
       case "KalypsoAI":
         return "tab2"; // Tasks tab for KalypsoAI
       default:
-        return "tab1"; // Default to Insights tab
+        return "tab2"; // Default to Tasks tab
     }
   };
 
@@ -540,8 +540,8 @@ const SideBar: React.FC<SideBarProps> = ({
 
   const tabs: { id: string; label: string; content: TabContent }[] = [
     { id: "tab2", label: "Tasks", content: { type: 'tasks' } },
-    { id: "tab3", label: "Tutors", content: { type: 'tutors', schools: tutors } },
     { id: "tab5", label: "Friends", content: { type: 'leaderboard' } },
+    { id: "tab3", label: "Tutors", content: { type: 'tutors', schools: tutors } },
   ];
 
   const displayTabs = useMemo(() => {
diff --git a/app/(dashboard)/(routes)/home/page.tsx b/app/(dashboard)/(routes)/home/page.tsx
index d39a3400f770111d9711036ff4c0c30d6c757301..75a0b2502313a5e5bbd693eef854ed827677cc2d 100644
--- a/app/(dashboard)/(routes)/home/page.tsx
+++ b/app/(dashboard)/(routes)/home/page.tsx
@@ -1,11 +1,11 @@
 // app/(dashboard)/(routes)/home/page.tsx
 "use client";
 
-import React, { useState, useEffect, useRef, useCallback, memo, useMemo } from "react";
+import { useState, useEffect, useRef, useCallback, memo, useMemo } from "react";
 import { useSearchParams, useRouter, usePathname } from "next/navigation";
-import { useUserInfo } from "@/hooks/useUserInfo";
+import { useUser, useAudio, useNavigation } from "@/store/selectors";
 import { useUserActivity } from '@/hooks/useUserActivity';
-import { FetchedActivity } from "@/types";
+import type { FetchedActivity } from "@/types";
 import { isToday } from "date-fns";
 import Summary from "./Summary";
 import SideBar from "./SideBar";
@@ -18,38 +18,19 @@ import StreakPopup from "@/components/score/StreakDisplay";
 import { checkProStatus, shouldUpdateKnowledgeProfiles, updateKnowledgeProfileTimestamp } from "@/lib/utils";
 import { toast } from "react-hot-toast";
 import { shouldShowRedeemReferralModal } from '@/lib/referral';
-import { useAudio } from "@/store/selectors";
+import { useUIStore } from "@/store/slices/uiSlice";
 import RedeemReferralModal from '@/components/social/friend-request/RedeemReferralModal';
 import ChatContainer from "@/components/chatgpt/ChatContainer";
 import HoverSidebar from "@/components/navigation/HoverSidebar";
+import IntroVideoPlayer from "@/components/home/IntroVideoPlayer";
+import DraggableKalypso from "@/components/home/DraggableKalypso";
+// Import the extracted components from their new location
+import { LoadingSpinner } from "@/components/home/LoadingSpinner";
+import { ContentWrapper } from "@/components/home/ContentWrapper";
 
 /* ----------------------------------------- Types ------------------------------------------ */
-interface ContentWrapperProps {
-  children: React.ReactNode;
-}
-
-interface LoadingSpinnerProps {
-  message?: string;
-}
-
-const LoadingSpinner: React.FC<LoadingSpinnerProps> = memo(({ message = "Loading..." }) => (
-  <div className="fixed inset-0 flex justify-center items-center bg-black/50 z-[9999]">
-    <div className="text-center">
-      <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-sky-500 mx-auto mb-4" />
-      <p className="text-sky-300 text-xl">{message}</p>
-    </div>
-  </div>
-));
-LoadingSpinner.displayName = 'LoadingSpinner';
-
-const ContentWrapper: React.FC<ContentWrapperProps> = memo(({ children }) => (
-  <div className="w-full px-[2rem] lg:px-[2.7rem] xl:px-[7rem] overflow-visible">
-    <div className="text-[--theme-text-color] flex gap-[1.5rem] overflow-visible">
-      {children}
-    </div>
-  </div>
-));
-ContentWrapper.displayName = 'ContentWrapper';
+type KalypsoState = "wait" | "talk" | "end" | "start";
+type ChatbotContextType = { contentTitle: string; context: string } | null;
 
 // Memoize components that don't need frequent updates
 const MemoizedSummary = memo(Summary);
@@ -57,43 +38,62 @@ const MemoizedSideBar = memo(SideBar);
 const MemoizedAdaptiveTutoring = memo(AdaptiveTutoring);
 
 const HomePage: React.FC = () => {
+  console.log('[HomePage] Component rendering');
+  
   /* ---------------------------------------- Hooks ---------------------------------------- */
   const router = useRouter();
   const pathname = usePathname();
   const searchParams = useSearchParams();
-  const { userInfo, isLoading: isLoadingUserInfo, isSubscribed } = useUserInfo();
+  const { userInfo, refreshUserInfo, isSubscribed, setHasSeenIntroVideo } = useUser();
+  const [isLoadingUserInfo, setIsLoadingUserInfo] = useState(false);
   const { startActivity, endActivity, updateActivityEndTime } = useUserActivity();
   const { playMusic, stopMusic, volume, setVolume, isPlaying } = useAudio();
+  const { activePage, navigateHomeTab, updateSubSection } = useNavigation();
   const paymentStatus = searchParams?.get("payment");
   
-  // Debug mode check
-  const isDebugMode = searchParams?.get('debug') === 'true';
-
-  // Get the default tab from query parameters or use KalypsoAI as default
-  const defaultTab = useMemo(() => {
-    const tabParam = searchParams?.get("tab");
-    return tabParam || "KalypsoAI";
-  }, [searchParams]);
-
+  // Track renders in development only
+  useEffect(() => {
+    console.log('[HomePage] Render', { 
+      isLoadingUserInfo, 
+      loadingState: loadingState ? loadingState.isLoading : 'not initialized', 
+      userInfoExists: !!userInfo
+    });
+  });
+  
+  /* ----------------------------------------- Refs ---------------------------------------- */
+  const kalypsoRef = useRef<HTMLImageElement>(null);
+  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
+  const chatbotRef = useRef<{ sendMessage: (message: string, context?: string) => void }>({
+    sendMessage: () => {},
+  });
+  const initializationRef = useRef(false);
+  const navigationInitializedRef = useRef(false);
+  const currentTrackedTabRef = useRef<string | null>(null);
+  const safetyTimerRef = useRef<NodeJS.Timeout | null>(null);
+  
   /* ---------------------------------------- State ---------------------------------------- */
-  // Combine related states into a single object to reduce re-renders
-  const [pageState, setPageState] = useState({
-    activeTab: defaultTab, // Use the calculated default tab
-    currentPage: defaultTab, // Match current page with active tab
-    activities: [] as FetchedActivity[],
-    isInitialized: false,
-    currentStudyActivityId: null as string | null,
-    chatbotContext: null as {contentTitle: string; context: string;} | null,
-    kalypsoState: "start" as "wait" | "talk" | "end" | "start", 
-    isPro: false,
+  // Split large state object into smaller, focused states
+  const [activities, setActivities] = useState<FetchedActivity[]>([]);
+  const [isInitialized, setIsInitialized] = useState(false);
+  const [currentStudyActivityId, setCurrentStudyActivityId] = useState<string | null>(null);
+  const [chatbotContext, setChatbotContext] = useState<ChatbotContextType>(null);
+  
+  // UI state group
+  const [uiState, setUIState] = useState({
+    kalypsoState: "start" as KalypsoState,
     showScorePopup: false,
-    testScore: 0,
     showStreakPopup: false,
-    userStreak: 0,
     showReferralModal: false
   });
+  
+  // User data group
+  const [userData, setUserData] = useState({
+    isPro: false,
+    testScore: 0,
+    userStreak: 0
+  });
 
-  // Combine loading states into a single object
+  // Replace multiple loading flags with a more flexible approach
   const [loadingState, setLoadingState] = useState({
     isLoading: true,
     isUpdatingProfile: false,
@@ -101,63 +101,189 @@ const HomePage: React.FC = () => {
     isLoadingTimeout: false
   });
 
-  /* ----------------------------------------- Refs ---------------------------------------- */
-  const kalypsoRef = useRef<HTMLImageElement>(null);
-  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
-  const chatbotRef = useRef<{ sendMessage: (message: string, context?: string) => void }>({
-    sendMessage: () => {},
-  });
-  const initializationRef = useRef(false);
-
-  // Memoize state updates to prevent unnecessary re-renders
-  const updatePageState = useCallback((updates: Partial<typeof pageState>) => {
-    setPageState(prev => ({ ...prev, ...updates }));
+  // Set up global safety timer immediately
+  useEffect(() => {
+    console.log('[HomePage] Setting up safety timer');
+    
+    // Clear any existing timer
+    if (safetyTimerRef.current) {
+      clearTimeout(safetyTimerRef.current);
+    }
+    
+    // Set a global safety timer to exit loading state
+    safetyTimerRef.current = setTimeout(() => {
+      console.log('[HomePage] Safety timer triggered', { loadingState });
+      
+      if (loadingState.isLoading) {
+        console.log('[HomePage] FORCING EXIT from loading state via safety timer');
+        setLoadingState(prev => ({ ...prev, isLoading: false }));
+      }
+    }, 5000); // Force exit loading after 5 seconds
+    
+    return () => {
+      if (safetyTimerRef.current) {
+        clearTimeout(safetyTimerRef.current);
+      }
+    };
   }, []);
 
+  // Add this after the loading state declaration
+  const isPageLoading = useMemo(() => 
+    loadingState.isUpdatingProfile || loadingState.isGeneratingActivities || loadingState.isLoadingTimeout,
+    [loadingState.isUpdatingProfile, loadingState.isGeneratingActivities, loadingState.isLoadingTimeout]
+  );
+
+  // Update functions for new state structure
   const updateLoadingState = useCallback((newState: Partial<typeof loadingState>) => {
-    setLoadingState(prev => ({ ...prev, ...newState }));
+    console.log('[HomePage] updateLoadingState called with', newState, 'current state:', loadingState);
+    
+    setLoadingState(prev => {
+      // Only update if values actually changed
+      const hasChanges = Object.entries(newState).some(
+        ([key, value]) => prev[key as keyof typeof prev] !== value
+      );
+      
+      const newLoadingState = hasChanges ? { ...prev, ...newState } : prev;
+      console.log('[HomePage] Loading state updated to:', newLoadingState);
+      return newLoadingState;
+    });
+  }, [loadingState]);
+
+  const updateUIState = useCallback((updates: Partial<typeof uiState>) => {
+    setUIState(prev => {
+      // Only update if values actually changed
+      const hasChanges = Object.entries(updates).some(
+        ([key, value]) => prev[key as keyof typeof prev] !== value
+      );
+      
+      return hasChanges ? { ...prev, ...updates } : prev;
+    });
+  }, []);
+
+  const updateUserData = useCallback((updates: Partial<typeof userData>) => {
+    setUserData(prev => {
+      // Only update if values actually changed
+      const hasChanges = Object.entries(updates).some(
+        ([key, value]) => prev[key as keyof typeof prev] !== value
+      );
+      
+      return hasChanges ? { ...prev, ...updates } : prev;
+    });
   }, []);
+  
+  // Log when component is fully loaded (dev only)
+  useEffect(() => {
+    console.log('[HomePage] Loading state check:', { isLoadingUserInfo, loadingState });
+    
+    if (!isLoadingUserInfo && !loadingState.isLoading) {
+      console.log('[HomePage] Fully loaded and ready to display content');
+    }
+  }, [isLoadingUserInfo, loadingState.isLoading]);
+  
+  // Check if intro video has been seen from userInfo.onboardingInfo
+  const hasSeenIntroVideo = useMemo(() => {
+    const seen = userInfo?.onboardingInfo?.hasSeenIntroVideo || false;
+    console.log('[HomePage] hasSeenIntroVideo calculated:', seen);
+    return seen;
+  }, [userInfo]);
+
+  // Debug mode check
+  const isDebugMode = searchParams?.get('debug') === 'true';
+
+  // Get the default tab from query parameters or use KalypsoAI as default
+  const defaultTab = useMemo(() => {
+    const tabParam = searchParams?.get("tab");
+    return tabParam || "KalypsoAI";
+  }, [searchParams]);
 
   /* ---- Memoized Values ---- */
   const shouldInitialize = useMemo(() => {
-    return !pageState.isInitialized && userInfo && !isLoadingUserInfo;
-  }, [pageState.isInitialized, userInfo, isLoadingUserInfo]);
+    const shouldInit = !isInitialized && userInfo && !isLoadingUserInfo;
+    console.log('[HomePage] shouldInitialize check:', { shouldInit, isInitialized, hasUserInfo: !!userInfo, isLoadingUserInfo });
+    return shouldInit;
+  }, [isInitialized, userInfo, isLoadingUserInfo]);
 
-  /* ---- Callbacks & Event Handlers ---- */
-  // Memoize chatbot context update
-  const updateChatbotContext = useCallback((context: {contentTitle: string; context: string;}) => {
-    updatePageState({ chatbotContext: context });
-  }, [updatePageState]);
-
-  const initializePage = useCallback(async () => {
-    if (!shouldInitialize) return;
+  // Prefetch data as soon as possible - prioritize critical data
+  useEffect(() => {
+    console.log('[HomePage] Prefetch effect triggered', { 
+      initializationRef: initializationRef.current,  
+      hasUserInfo: !!userInfo, 
+      isLoadingUserInfo 
+    });
     
-    try {
-      const [activities, proStatus] = await Promise.all([
-        fetch("/api/calendar-activity").then(res => res.json()),
-        checkProStatus()
-      ]);
-
-      // Batch all state updates
-      updatePageState({
-        activities,
-        isPro: proStatus,
-        isInitialized: true
-      });
+    if (initializationRef.current || !userInfo || isLoadingUserInfo) return;
+    
+    const initializeData = async () => {
+      console.log('[HomePage] Starting initializeData');
+      
+      try {
+        // Prioritize API calls - run them in parallel
+        const [activitiesPromise, proStatusPromise] = [
+          fetch("/api/calendar-activity").then(res => res.json()),
+          checkProStatus()
+        ];
+        
+        // Start navigation setup while data is loading
+        if (!navigationInitializedRef.current && defaultTab) {
+          navigateHomeTab(defaultTab);
+          navigationInitializedRef.current = true;
+        }
+        
+        // Wait for data to load
+        const [fetchedActivities, proStatus] = await Promise.all([
+          activitiesPromise,
+          proStatusPromise
+        ]);
+        
+        console.log('[HomePage] Data loaded successfully', { 
+          activitiesCount: fetchedActivities?.length, 
+          proStatus 
+        });
+        
+        // Update state with all fetched data to prevent cascading renders
+        setActivities(fetchedActivities);
+        setIsInitialized(true);
+        updateUserData({ isPro: proStatus });
+        updateUIState({ showReferralModal: shouldShowRedeemReferralModal() });
+        
+        console.log('[HomePage] Setting loading state to false');
+        setLoadingState(prev => ({ ...prev, isLoading: false }));
+        console.log('[HomePage] Loading state should now be false');
+        
+        initializationRef.current = true;
+      } catch (error) {
+        console.error('[HOME_PAGE] Error during data prefetching:', error);
+        toast.error("Failed to load some data. Please refresh if you experience issues.");
+        
+        // Ensure we still mark loading as complete
+        console.log('[HomePage] Setting loading to false after error');
+        setLoadingState(prev => ({ ...prev, isLoading: false }));
+      }
+    };
+    
+    initializeData();
+  }, [userInfo, isLoadingUserInfo, defaultTab, navigateHomeTab, updateUserData, updateUIState]);
 
-      updateLoadingState({
-        isLoading: false
-      });
+  // Skip useEffect for the original initializePage since we now use the prefetch approach
+  const initializePage = useCallback(async () => {
+    // This is kept for compatibility but doesn't need to do anything anymore
+    if (initializationRef.current) return;
+  }, []);
 
-    } catch (error) {
-      console.error('[HOME_PAGE] Error during initialization:', error);
-      toast.error("Failed to initialize page. Please refresh.");
-      
-      updateLoadingState({
-        isLoading: false
-      });
+  // Update the navigation initialization effect to respect user navigation
+  useEffect(() => {
+    // Only initialize the navigation once, not after user has clicked on sidebar items
+    if (!navigationInitializedRef.current && defaultTab) {
+      navigateHomeTab(defaultTab);
+      navigationInitializedRef.current = true;
     }
-  }, [shouldInitialize, updatePageState, updateLoadingState]);
+  }, [defaultTab, navigateHomeTab]);
+
+  /* ---- Callbacks & Event Handlers ---- */
+  // Memoize chatbot context update
+  const updateChatbotContext = useCallback((context: ChatbotContextType) => {
+    setChatbotContext(context);
+  }, []);
 
   const updateCalendarChatContext = useCallback((currentActivities: FetchedActivity[]) => {
     const today = new Date();
@@ -229,17 +355,17 @@ const HomePage: React.FC = () => {
 
     try {
       const activities = await fetch("/api/calendar-activity").then(res => res.json());
-      updatePageState({ activities });
+      setActivities(activities);
     } catch (error) {
       console.error('[HOME_PAGE] Error fetching activities:', error);
     }
-  }, [loadingState.isLoading, updatePageState]);
+  }, [loadingState.isLoading]);
 
   // Handle activity tracking for user engagement
   const handleActivityChange = useCallback(async (type: string, location: string) => {
-    if (pageState.currentStudyActivityId) {
+    if (currentStudyActivityId) {
       try {
-        await endActivity(pageState.currentStudyActivityId);
+        await endActivity(currentStudyActivityId);
       } catch (error) {
         console.error('Error ending previous activity:', error);
       }
@@ -255,29 +381,29 @@ const HomePage: React.FC = () => {
       });
 
       if (activity) {
-        updatePageState({ currentStudyActivityId: activity.id });
+        setCurrentStudyActivityId(activity.id);
       }
     } catch (error) {
       console.error('Error starting new activity:', error);
     }
-  }, [endActivity, startActivity, pageState.currentStudyActivityId, updatePageState]);
+  }, [endActivity, startActivity, currentStudyActivityId]);
 
-  // Tab change handler with navigation logic
+  // Tab change handler - now only handles special cases (backward compatibility)
   const handleTabChange = useCallback(async (newTab: string) => {
     // Handle special navigation cases
     if (newTab === 'AnkiClinic') {
-        try {
-            // Clean up current activity first
-            if (pageState.currentStudyActivityId) {
-                await endActivity(pageState.currentStudyActivityId);
-            }
-            await router.push('/ankiclinic');
-            return; // Important: return immediately after navigation
-        } catch (error) {
-            console.error('Navigation error:', error);
-            toast.error('Failed to navigate to Anki Clinic');
+      try {
+        // Clean up current activity first
+        if (currentStudyActivityId) {
+          await endActivity(currentStudyActivityId);
         }
-        return; // Return in case of error too
+        await router.push('/ankiclinic');
+        return; // Important: return immediately after navigation
+      } catch (error) {
+        console.error('Navigation error:', error);
+        toast.error('Failed to navigate to Anki Clinic');
+      }
+      return; // Return in case of error too
     }
 
     // Handle tab with view parameter
@@ -285,43 +411,73 @@ const HomePage: React.FC = () => {
     const searchParams = new URLSearchParams(params);
     const view = searchParams.get('view');
 
-    // Batch state updates
-    const updates: Partial<typeof pageState> = {
-        activeTab: tab,
-        currentPage: tab
-    };
+    // Use global navigation
+    navigateHomeTab(tab);
 
     if (tab === "Summary" && view) {
-        router.push(`/home?tab=Summary&view=${view}`);
+      // Add context for the view
+      updateSubSection({ currentView: view });
+      router.push(`/home?tab=Summary&view=${view}`);
     }
+    
+    // REMOVED: Activity tracking is now handled by the effect triggered by activePage changes
+  }, [router, navigateHomeTab, updateSubSection, currentStudyActivityId, endActivity]);
 
-    updatePageState(updates);
+  // Add an effect for activity tracking that responds to global state changes
+  useEffect(() => {
+    // Skip during initial render/loading
+    if (isLoadingUserInfo || !isInitialized) return;
+    
+    // Don't create a new activity if we're on the special cases
+    if (activePage === 'ankiclinic') return;
+    
+    // Skip if we're already tracking this tab
+    if (currentTrackedTabRef.current === activePage) {
+      return;
+    }
+    
+    // Handle activity tracking based on tab
+    const activityType = activePage === "AdaptiveTutoringSuite" ? 'tutoring' : 'studying';
+    
+    // Async function to update activity
+    const updateActivity = async () => {
+      try {
+        await handleActivityChange(activityType, activePage);
+        // Update ref to current tracked tab
+        currentTrackedTabRef.current = activePage;
+      } catch (error) {
+        console.error(`[HomePage] Error updating activity for ${activePage}:`, error);
+      }
+    };
+    
+    updateActivity();
+    
+  }, [activePage, handleActivityChange, isLoadingUserInfo, isInitialized]);
 
-    // Handle activity changes
-    if (tab !== "AdaptiveTutoringSuite") {
-        await handleActivityChange('studying', tab);
+  // When activity changes, update the tracked tab ref
+  useEffect(() => {
+    if (currentStudyActivityId) {
+      currentTrackedTabRef.current = activePage;
     } else {
-        // For AdaptiveTutoringSuite, track with a different activity type
-        // This ensures we still have consistent state tracking
-        await handleActivityChange('tutoring', 'AdaptiveTutoringSuite');
+      currentTrackedTabRef.current = null;
     }
-  }, [router, handleActivityChange, updatePageState, pageState.currentStudyActivityId, endActivity]);
+  }, [currentStudyActivityId, activePage]);
 
-  const switchKalypsoState = (newState: "wait" | "talk" | "end" | "start") => {
-    setPageState(prev => ({ ...prev, kalypsoState: newState }));
+  const switchKalypsoState = useCallback((newState: KalypsoState) => {
+    updateUIState({ kalypsoState: newState });
     if (kalypsoRef.current) {
       kalypsoRef.current.src = `/kalypso${newState}.gif`;
     }
-  };
+  }, [updateUIState]);
 
-  const toggleChatBot = () => {
-    // Implement chatbot toggling functionality
-    updatePageState({ activeTab: "KalypsoAI" });
-  };
+  const toggleChatBot = useCallback(() => {
+    // Use global navigation instead of local state
+    navigateHomeTab("KalypsoAI");
+  }, [navigateHomeTab]);
 
   /* ---------------------------------------- Memoized Values ---------------------------------------- */
   const pageTitle = useMemo(() => {
-    switch (pageState.activeTab) {
+    switch (activePage) {
       case "Summary": return "Statistics";
       case "Tests": return "Testing Suite";
       case "AdaptiveTutoringSuite": return "Adaptive Tutoring Suite";
@@ -330,25 +486,23 @@ const HomePage: React.FC = () => {
       case "KalypsoAI": return "Kalypso";
       default: return "Home";
     }
-  }, [pageState.activeTab]);
-
-  const isPageLoading = useMemo(() => 
-    loadingState.isUpdatingProfile || loadingState.isGeneratingActivities || loadingState.isLoadingTimeout,
-    [loadingState.isUpdatingProfile, loadingState.isGeneratingActivities, loadingState.isLoadingTimeout]
-  );
+  }, [activePage]);
 
   /* ---------------------------------------- Effects ---------------------------------------- */
   // Track component lifecycle - simplified
   useEffect(() => {
-    // Mark initialization to prevent double initialization
-    if (initializationRef.current) return;
-    initializationRef.current = true;
+    console.log('[HomePage] Component lifecycle effect');
     
-    // Add a safety timeout to ensure loading completes
-    const safetyTimeout = setTimeout(() => {
+    // Reset the safety timer to ensure it runs from component mount
+    if (safetyTimerRef.current) {
+      clearTimeout(safetyTimerRef.current);
+    }
+    
+    safetyTimerRef.current = setTimeout(() => {
+      console.log('[HomePage] Lifecycle safety timer triggered');
       if (loadingState.isLoading) {
-        // Force loading to complete after timeout
-        updateLoadingState({ isLoading: false });
+        console.log('[HomePage] FORCING EXIT from loading state via lifecycle safety timer');
+        setLoadingState(prev => ({ ...prev, isLoading: false }));
       }
     }, 3000); // 3 second safety timeout
     
@@ -356,9 +510,11 @@ const HomePage: React.FC = () => {
       if (timeoutRef.current) {
         clearTimeout(timeoutRef.current);
       }
-      clearTimeout(safetyTimeout);
+      if (safetyTimerRef.current) {
+        clearTimeout(safetyTimerRef.current);
+      }
     };
-  }, [loadingState.isLoading, updateLoadingState]);
+  }, []);
 
   // Combine initialization effects
   useEffect(() => {
@@ -368,13 +524,13 @@ const HomePage: React.FC = () => {
   }, [shouldInitialize, initializePage]);
 
   useEffect(() => {
-    updateCalendarChatContext(pageState.activities);
-  }, [pageState.activities, updateCalendarChatContext]);
+    updateCalendarChatContext(activities);
+  }, [activities, updateCalendarChatContext]);
 
   useEffect(() => {
     const handleScroll = () => {
       const remToPixels = (rem: number) =>
-        rem * parseFloat(getComputedStyle(document.documentElement).fontSize);
+        rem * Number.parseFloat(getComputedStyle(document.documentElement).fontSize);
       const scrollToPosition = remToPixels(7.125);
 
       window.scrollTo({
@@ -389,7 +545,7 @@ const HomePage: React.FC = () => {
     }, 100); // Small delay to ensure content is rendered
 
     return () => clearTimeout(timer);
-  }, [pageState.activities, pageState.activeTab]); // Re-run when content changes
+  }, []); // No dependencies needed as the effect only runs once
 
   useEffect(() => {
     switchKalypsoState("start"); // Start with talking animation to encourage engagement
@@ -398,7 +554,7 @@ const HomePage: React.FC = () => {
         clearTimeout(timeoutRef.current);
       }
     };
-  }, []);
+  }, [switchKalypsoState]);
 
   // Payment status effect
   useEffect(() => {
@@ -414,10 +570,10 @@ const HomePage: React.FC = () => {
   // Activity tracking effects
   useEffect(() => {
     const initializeActivity = async () => {
-      if (pathname && pathname.startsWith('/home') && !pageState.currentStudyActivityId && !isLoadingUserInfo) {
+      if (pathname?.startsWith('/home') && !currentStudyActivityId && !isLoadingUserInfo) {
         const activity = await startActivity({
           type: 'studying',
-          location: pageState.activeTab,
+          location: activePage,
           metadata: {
             initialLoad: true,
             timestamp: new Date().toISOString()
@@ -425,72 +581,96 @@ const HomePage: React.FC = () => {
         });
 
         if (activity) {
-          setPageState(prev => ({ ...prev, currentStudyActivityId: activity.id }));
+          setCurrentStudyActivityId(activity.id);
         }
       }
     };
 
     initializeActivity();
-  }, [isLoadingUserInfo, pathname, pageState.activeTab, startActivity, pageState.currentStudyActivityId]);
+  }, [isLoadingUserInfo, pathname, activePage, startActivity, currentStudyActivityId]);
 
-  // Handle URL without tab parameter - ensure we show Kalypso AI
   useEffect(() => {
-    if (pathname === '/home' && !searchParams?.has('tab')) {
-      // Ensure we're showing Kalypso AI when user navigates directly to /home
-      updatePageState({
-        activeTab: 'KalypsoAI',
-        currentPage: 'KalypsoAI'
-      });
-    }
-  }, [pathname, searchParams, updatePageState]);
-
-  useEffect(() => {
-    if (!pageState.currentStudyActivityId) return;
+    if (!currentStudyActivityId) return;
 
     const intervalId = setInterval(() => {
-      updateActivityEndTime(pageState.currentStudyActivityId);
+      updateActivityEndTime(currentStudyActivityId);
     }, 300000);
 
     return () => clearInterval(intervalId);
-  }, [pageState.currentStudyActivityId, updateActivityEndTime]);
+  }, [currentStudyActivityId, updateActivityEndTime]);
 
   useEffect(() => {
-    setPageState(prev => ({ ...prev, showReferralModal: shouldShowRedeemReferralModal() }));
-  }, []);
+    updateUIState({ showReferralModal: shouldShowRedeemReferralModal() });
+  }, [updateUIState]);
 
   // Cleanup effect
   useEffect(() => {
     return () => {
       // Cleanup any pending activities
-      if (pageState.currentStudyActivityId) {
-        endActivity(pageState.currentStudyActivityId);
+      if (currentStudyActivityId) {
+        endActivity(currentStudyActivityId);
       }
       if (timeoutRef.current) {
         clearTimeout(timeoutRef.current);
       }
+      if (safetyTimerRef.current) {
+        clearTimeout(safetyTimerRef.current);
+      }
     };
-  }, [endActivity, pageState.currentStudyActivityId]);
+  }, [endActivity, currentStudyActivityId]);
+
+  // Handle when the intro video is completed
+  const handleIntroVideoComplete = useCallback(async () => {
+    try {
+      // Update the user's hasSeenIntroVideo status in global state and database
+      await setHasSeenIntroVideo(true);
+      toast.success("Introduction video completed!");
+    } catch (error) {
+      console.error("[HomePage] Failed to update intro video status:", error);
+      toast.error("Failed to update your profile. Please try again.");
+    }
+  }, [setHasSeenIntroVideo]);
+
+  // Add the missing navigation effect back without the console.log
+  // Update URL parameter effect to respect user navigation 
+  useEffect(() => {
+    // Only set default page if we're on the home page without a tab parameter
+    // AND navigation hasn't been initialized yet
+    if (pathname === '/home' && !searchParams?.has('tab') && !navigationInitializedRef.current) {
+      navigateHomeTab('KalypsoAI');
+      navigationInitializedRef.current = true;
+    }
+  }, [pathname, searchParams, navigateHomeTab]);
 
   /* -------------------------------------- Rendering ------------------------------------- */
   const content = useMemo(() => {
+    console.log('[HomePage] Rendering content with states:', { 
+      isLoadingUserInfo, 
+      loading: loadingState.isLoading, 
+      showingContent: !isLoadingUserInfo && !loadingState.isLoading 
+    });
+    
     if (isLoadingUserInfo) {
+      console.log('[HomePage] Showing user info loading spinner');
       return <LoadingSpinner message="Loading user info..." />;
     }
 
-    if (isPageLoading) {
+    if (loadingState.isLoading) {
+      console.log('[HomePage] Showing page initialization loading spinner');
       return <LoadingSpinner message="Initializing page..." />;
     }
-
+    
+    console.log('[HomePage] Rendering main content');
     return (
       <>
         {/* Hover Sidebar - positioned outside ContentWrapper to be fixed */}
         <HoverSidebar
-          activities={pageState.activities as any[]}
+          activities={activities}
           onTasksUpdate={(tasks) => {
-            updatePageState({ activities: tasks as FetchedActivity[] });
+            setActivities(tasks as FetchedActivity[]);
           }}
           onTabChange={handleTabChange}
-          currentPage={pageState.currentPage}
+          currentPage={activePage}
           isSubscribed={isSubscribed}
         />
         
@@ -498,32 +678,39 @@ const HomePage: React.FC = () => {
           <div className="w-3/4 relative overflow-visible">
             <div className="flex justify-between items-center">
               <div className="flex items-center gap-4">
-                <h2
-                  className="text-white text-2xl ml-3 font-thin leading-normal shadow-text cursor-pointer"
+                <button
+                  type="button"
+                  className="text-white text-2xl ml-3 font-thin leading-normal shadow-text cursor-pointer bg-transparent border-none"
                   onClick={() => router.push("/home")}
                 >
                   {pageTitle}
-                </h2>
+                </button>
                 <ThemeSwitcher />
               </div>
             </div>
             <div className="relative overflow-visible">
               <div className="p-3 pb-6 gradientbg h-[calc(100vh-5.5rem)] rounded-lg mb-4">
-                {/* Set KalypsoAI as the main component to show */}
-                {(pageState.activeTab === 'KalypsoAI' || !pageState.activeTab) && (
+                {/* Main content area - conditional rendering based on active page */}
+                {(activePage === 'KalypsoAI' || !activePage) && (
                   <div className="h-full overflow-hidden">
-                    <ChatContainer chatbotRef={chatbotRef} />
+                    {!hasSeenIntroVideo ? (
+                      <IntroVideoPlayer 
+                        onComplete={handleIntroVideoComplete}
+                      />
+                    ) : (
+                      <ChatContainer chatbotRef={chatbotRef} />
+                    )}
                   </div>
                 )}
-                {pageState.activeTab === 'Summary' && (
+                {activePage === 'Summary' && (
                   <MemoizedSummary 
                     handleSetTab={handleTabChange}
-                    isActive={pageState.activeTab === 'Summary'}
+                    isActive={true}
                     chatbotRef={chatbotRef}
                     userInfo={userInfo}
                   />
                 )}
-                {pageState.activeTab === 'AdaptiveTutoringSuite' && (
+                {activePage === 'AdaptiveTutoringSuite' && (
                   <div className="h-full overflow-hidden">
                     <MemoizedAdaptiveTutoring 
                       toggleChatBot={toggleChatBot}
@@ -533,9 +720,9 @@ const HomePage: React.FC = () => {
                     />
                   </div>
                 )}
-                {pageState.activeTab === 'CARS' && <TestingSuit />}
-                {pageState.activeTab === 'flashcards' && <FlashcardDeck />}
-                {pageState.activeTab === 'Tests' && (
+                {activePage === 'CARS' && <TestingSuit />}
+                {activePage === 'flashcards' && <FlashcardDeck />}
+                {activePage === 'Tests' && (
                   <PracticeTests 
                     handleSetTab={handleTabChange} 
                     chatbotRef={chatbotRef}
@@ -552,9 +739,9 @@ const HomePage: React.FC = () => {
             </h2>
             <div className="gradientbg p-3 pb-6 h-[calc(100vh-5.5rem)] rounded-lg knowledge-profile-component mb-4">
               <MemoizedSideBar 
-                activities={pageState.activities}
-                currentPage={pageState.currentPage}
-                chatbotContext={pageState.chatbotContext}
+                activities={activities}
+                currentPage={activePage}
+                chatbotContext={chatbotContext}
                 chatbotRef={chatbotRef}
                 handleSetTab={handleTabChange}
                 onActivitiesUpdate={fetchActivities}
@@ -565,46 +752,53 @@ const HomePage: React.FC = () => {
           </div>
 
           {/* Modals and Popups */}
-          {pageState.showReferralModal && (
+          {uiState.showReferralModal && (
             <RedeemReferralModal 
-              isOpen={pageState.showReferralModal} 
-              onClose={() => updatePageState({ showReferralModal: false })}
+              isOpen={uiState.showReferralModal} 
+              onClose={() => updateUIState({ showReferralModal: false })}
             />
           )}
-          {pageState.showStreakPopup && (
+          {uiState.showStreakPopup && (
             <StreakPopup 
-              isOpen={pageState.showStreakPopup}
-              onClose={() => updatePageState({ showStreakPopup: false })}
-              streak={pageState.userStreak}
+              isOpen={uiState.showStreakPopup}
+              onClose={() => updateUIState({ showStreakPopup: false })}
+              streak={userData.userStreak}
             />
           )}
         </ContentWrapper>
+
+        {/* Draggable Kalypso at page level - only visible when KalypsoAI tab is active */}
+        {(activePage === 'KalypsoAI' || !activePage) && hasSeenIntroVideo && (
+          <DraggableKalypso buttonSize="25rem" />
+        )}
       </>
     );
   }, [
+    // Keep only the dependencies that actually affect rendering
     isLoadingUserInfo,
-    isPageLoading,
-    pageState.activeTab,
-    pageState.activities,
-    pageState.currentPage,
-    pageState.chatbotContext,
+    loadingState.isLoading,
+    activePage,
+    activities,
+    chatbotContext,
     chatbotRef,
     handleTabChange,
-    fetchActivities,
     isSubscribed,
     userInfo,
-    toggleChatBot,
-    updatePageState,
-    handleActivityChange,
-    pageTitle,
-    pageState.showReferralModal,
-    pageState.showStreakPopup,
-    pageState.userStreak,
     router,
-    updateChatbotContext
+    handleIntroVideoComplete,
+    hasSeenIntroVideo,
+    // Add dependencies for new state structure
+    uiState.showReferralModal,
+    uiState.showStreakPopup,
+    userData.userStreak,
+    uiState.kalypsoState,
+    updateUIState,
+    fetchActivities,
+    setActivities
   ]);
 
   return content;
 };
 
+// Use memo to prevent unnecessary renders of the entire component
 export default memo(HomePage);
\ No newline at end of file
diff --git a/app/(landingpage)/page.tsx b/app/(landingpage)/page.tsx
index 0dd671c50a2a4b95e1ff865736b5cf6034a45521..689e9255abafc65b3dd38471e536d9e01b849023 100644
--- a/app/(landingpage)/page.tsx
+++ b/app/(landingpage)/page.tsx
@@ -11,12 +11,21 @@ const LandingHero = dynamic(
   }
 );
 
-// Second fold - load when approaching viewport
+// Second fold - load tutors section with high priority
+const TutorSlider = dynamic(
+  () => import("@/components/landingpage/TutorSlider"),
+  {
+    ssr: true,
+    loading: () => <div className="h-[600px] bg-[#12233c]" />
+  }
+);
+
+// Third fold - load when approaching viewport
 const ProductWrapper = dynamic(
   () => import("@/components/landingpage/ProductWrapper"),
   {
     loading: () => <div className="h-screen bg-[#12233c]" />,
-    ssr: false // Client-side only since it has animations
+    ssr: false
   }
 );
 
@@ -57,14 +66,21 @@ const LandingPage = () => {
         <LandingHero />
       </Suspense>
 
-      {/* Second fold - load when approaching */}
+      {/* Second fold - Tutor section */}
+      <div className="relative z-10">
+        <Suspense fallback={<div className="h-[600px] bg-[#12233c]" />}>
+          <TutorSlider />
+        </Suspense>
+      </div>
+
+      {/* Third fold - Product section */}
       <div className="relative z-10">
         <Suspense fallback={<div className="h-screen bg-[#12233c]" />}>
           <ProductWrapper />
         </Suspense>
       </div>
 
-      {/* Third fold */}
+      {/* Rest of the content */}
       <div id="mission" className="relative z-20">
         <Suspense fallback={<div className="h-screen bg-[#12233c]" />}>
           <Mission />
diff --git a/app/api/study-plan/route.ts b/app/api/study-plan/route.ts
index d60b6a949ab9af1ca1c1495e2ff6cf7521971499..3d8037ff007398ed4228ccd5a3de6c52db6bd080 100644
--- a/app/api/study-plan/route.ts
+++ b/app/api/study-plan/route.ts
@@ -4,12 +4,21 @@ import { auth } from "@clerk/nextjs/server";
 import prisma from "@/lib/prismadb";
 
 export async function GET(req: NextRequest) {
+  console.log('[STUDY_PLAN_API] GET request received at', new Date().toISOString());
+  const requestUrl = req.url;
+  const referrer = req.headers.get('referer') || 'unknown';
+  console.log('[STUDY_PLAN_API] Request URL:', requestUrl);
+  console.log('[STUDY_PLAN_API] Referrer:', referrer);
+  
   const { userId } = auth();
   if (!userId) {
+    console.log('[STUDY_PLAN_API] Unauthorized request - no userId');
     return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
   }
 
   try {
+    console.log('[STUDY_PLAN_API] Fetching study plan for user:', userId);
+    
     const studyPlan = await prisma.studyPlan.findFirst({
       where: { userId },
       orderBy: {
@@ -17,9 +26,11 @@ export async function GET(req: NextRequest) {
       }
     });
 
+    console.log('[STUDY_PLAN_API] Study plan fetch result:', studyPlan ? 'Found' : 'Not found');
+    
     return NextResponse.json({ studyPlan });
   } catch (error) {
-    console.error('Error fetching study plan:', error);
+    console.error('[STUDY_PLAN_API] Error fetching study plan:', error);
     return NextResponse.json({ error: "Internal server error" }, { status: 500 });
   }
 }
diff --git a/app/api/user-info/route.ts b/app/api/user-info/route.ts
index d0f51a97a7f2fae7370ed949e6d764139ada51ea..113f946b2488d4de7de627cd61efde5919fbbd50 100644
--- a/app/api/user-info/route.ts
+++ b/app/api/user-info/route.ts
@@ -109,7 +109,8 @@ export async function POST(req: Request) {
           mcatAttemptNumber: null,
           targetMedSchool: null,
           targetScore: null,
-          referralEmail: null
+          referralEmail: null,
+          hasSeenIntroVideo: false
         }
       }
     });
@@ -190,7 +191,27 @@ export async function PUT(req: Request) {
     }
 
     const body = await req.json();
-    const { bio, unlockGame, amount, incrementScore, decrementScore, notificationPreference } = body;
+    const { bio, unlockGame, amount, incrementScore, decrementScore, notificationPreference, onboardingInfo } = body;
+
+    // Handle onboardingInfo update
+    if (onboardingInfo) {
+      console.log('[USER_INFO_PUT] Updating onboardingInfo:', onboardingInfo);
+      const updatedInfo = await prismadb.userInfo.update({
+        where: { userId },
+        data: { 
+          onboardingInfo: {
+            ...onboardingInfo
+          }
+        },
+        include: { patientRecord: true }
+      });
+
+      return NextResponse.json({
+        ...updatedInfo,
+        coins: updatedInfo.score,
+        patientsCount: updatedInfo.patientRecord?.patientsTreated || 0
+      });
+    }
 
     // Handle bio update
     if (bio !== undefined) {
@@ -207,6 +228,16 @@ export async function PUT(req: Request) {
       });
     }
 
+    // Handle score update with amount
+    if (amount !== undefined) {
+      if (typeof amount !== 'number' || Number.isNaN(amount)) {
+        return NextResponse.json({ error: "Invalid amount" }, { status: 400 });
+      }
+
+      const updatedInfo = await incrementUserScore(amount);
+      return NextResponse.json({ score: updatedInfo.score });
+    }
+
     if (unlockGame) {
       const userInfo = await prismadb.userInfo.findUnique({
         where: { userId }
@@ -240,16 +271,6 @@ export async function PUT(req: Request) {
       return NextResponse.json(updatedInfo);
     }
 
-    // Handle score update with amount
-    if (amount !== undefined) {
-      if (typeof amount !== 'number' || isNaN(amount)) {
-        return NextResponse.json({ error: "Invalid amount" }, { status: 400 });
-      }
-
-      const updatedInfo = await incrementUserScore(amount);
-      return NextResponse.json({ score: updatedInfo.score });
-    }
-
     // Handle increment/decrement score
     if (incrementScore !== undefined || decrementScore !== undefined) {
       let scoreChange = 1; // Default increment
diff --git a/components/RouteTracker.tsx b/components/RouteTracker.tsx
index 88e9bc9de73074fe0dea66adf054a04bd6e0f9a2..e5db8e3659bff2cdf2f529d2dea0f51f56a04b0a 100644
--- a/components/RouteTracker.tsx
+++ b/components/RouteTracker.tsx
@@ -188,6 +188,26 @@ const RouteTracker = () => {
     setLoadingState(prev => ({ ...prev, studyPlan: true }));
     
     try {
+      // Check localStorage cache first
+      const cachedPlan = localStorage.getItem('study_plan_cache');
+      const cacheTimestamp = localStorage.getItem('study_plan_cache_timestamp');
+      const cacheAge = cacheTimestamp ? Date.now() - Number.parseInt(cacheTimestamp) : null;
+      
+      // Use cache if it exists and is less than 10 minutes old
+      if (cachedPlan && cacheAge && cacheAge < 10 * 60 * 1000) {
+        debugLog('STUDY_PLAN', 'Using cached study plan, cache age:', Math.round(cacheAge/1000), 'seconds');
+        
+        // Update states
+        setStudyPlanCheckState({ loading: false, error: null, complete: true });
+        setLoadingState(prev => ({ ...prev, studyPlan: false }));
+        
+        // Return whether study plan exists based on cache
+        const data = JSON.parse(cachedPlan);
+        return !!data.studyPlan;
+      }
+      
+      // If no valid cache, fetch from API
+      debugLog('STUDY_PLAN', 'Fetching fresh study plan data');
       const response = await fetch('/api/study-plan');
       
       if (!response.ok) {
@@ -196,6 +216,10 @@ const RouteTracker = () => {
       
       const data = await response.json();
       
+      // Cache the response
+      localStorage.setItem('study_plan_cache', JSON.stringify(data));
+      localStorage.setItem('study_plan_cache_timestamp', Date.now().toString());
+      
       // Update states
       setStudyPlanCheckState({ loading: false, error: null, complete: true });
       setLoadingState(prev => ({ ...prev, studyPlan: false }));
@@ -204,6 +228,7 @@ const RouteTracker = () => {
       return !!data.studyPlan;
     } catch (error) {
       debugLog('STUDY_PLAN', 'Error checking study plan:', error);
+      console.error('Error checking study plan:', error);
       
       // Set error state
       const typedError = error instanceof Error ? error : new Error('Unknown error checking study plan');
@@ -212,7 +237,7 @@ const RouteTracker = () => {
       
       return false;
     }
-  }, [debugLog]);
+  }, [debugLog, pathname]);
 
   // Update current route in the store
   useEffect(() => {
@@ -255,13 +280,6 @@ const RouteTracker = () => {
     
     // Decide where to redirect based on onboarding status
     if (isSignedIn) {
-      console.log('[CRITICAL_DEBUG] Login Redirect Decision:', {
-        onboardingFlag: userInfo?.onboardingInfo?.onboardingComplete,
-        targetScore: userInfo?.onboardingInfo?.targetScore,
-        effectiveOnboardingComplete: effectiveOnboardingComplete,
-        willRedirectTo: effectiveOnboardingComplete ? '/home' : '/onboarding'
-      });
-      
       if (effectiveOnboardingComplete) {
         debugLog('ROOT_PATH', 'Redirecting to /home - onboarding complete');
         const fallback = performRedirect('/home', 'Login with onboarding complete');
diff --git a/components/calendar/SettingContent.tsx b/components/calendar/SettingContent.tsx
index 88ddc6f571e4cd39369182aff80763ce25b52ade..85bfb06ccb63024f9d4806a2fae2e9033c202bf5 100644
--- a/components/calendar/SettingContent.tsx
+++ b/components/calendar/SettingContent.tsx
@@ -210,6 +210,7 @@ const SettingContent: React.FC<SettingContentProps> = ({
       if (diff < smallestDiff) {
         smallestDiff = diff;
         closestDate = date;
+        
       }
     });
 
@@ -232,14 +233,21 @@ const SettingContent: React.FC<SettingContentProps> = ({
   }, []);
 
   const fetchExistingStudyPlan = async () => {
+    console.log('[SETTING_CONTENT] Fetching existing study plan...');
+    // console.log('[SETTING_CONTENT] Component stack trace:', new Error().stack);
+    
     try {
+      console.log('[SETTING_CONTENT] Making API request to /api/study-plan');
       const response = await fetch("/api/study-plan");
       const data = await response.json();
+      console.log('[SETTING_CONTENT] Study plan API response received');
+      
       if (!response.ok) {
         throw new Error(data.error || "Failed to fetch study plan");
       }
 
       if (data.studyPlan) {
+        console.log('[SETTING_CONTENT] Study plan found, updating component state');
         const plan = data.studyPlan;
         setExistingStudyPlan(plan);
 
diff --git a/components/chatgpt/ChatContainer.css b/components/chatgpt/ChatContainer.css
new file mode 100644
index 0000000000000000000000000000000000000000..9dfc5ed17fbe5fbe10d29a921c7fe6e39a5bbb9b
--- /dev/null
+++ b/components/chatgpt/ChatContainer.css
@@ -0,0 +1,317 @@
+/* Chat container styles */
+.chat-input-container {
+  display: flex;
+  flex-direction: column;
+  align-items: stretch;
+  padding: 1rem;
+  gap: 0.5rem;
+  background-color: transparent !important;
+  border-top: 1px solid var(--theme-border-color);
+  margin-bottom: 0 !important;
+}
+
+.chat-input-container textarea {
+  width: 100%;
+  min-height: 44px;
+  max-height: 200px;
+  padding: 0.75rem 1rem;
+  border-radius: 0.5rem;
+  border: 1px solid var(--theme-border-color);
+  background-color: rgba(0, 0, 0, 0.2) !important;
+  color: var(--theme-text-color);
+  font-size: 0.875rem;
+  line-height: 1.25rem;
+  resize: none;
+  transition: all 0.2s ease-in-out;
+  backdrop-filter: blur(10px);
+}
+
+.chat-input-container textarea:focus {
+  outline: none;
+  border-color: var(--theme-hover-color);
+  box-shadow: 0 0 0 2px var(--theme-hover-color-alpha);
+}
+
+.button-container {
+  display: flex;
+  justify-content: flex-end;
+  gap: 0.5rem;
+}
+
+.input-area {
+  position: relative;
+  width: 100%;
+}
+
+/* Theme-specific styles */
+.theme-cyberSpace-chat {
+  background: linear-gradient(180deg, rgba(0, 18, 38, 0.95) 0%, rgba(0, 18, 38, 0.85) 100%);
+  backdrop-filter: blur(10px);
+}
+
+.theme-sakuraTrees-chat {
+  background: linear-gradient(180deg, rgba(251, 240, 248, 0.95) 0%, rgba(251, 240, 248, 0.85) 100%);
+  backdrop-filter: blur(10px);
+}
+
+.theme-sunsetCity-chat {
+  background: linear-gradient(180deg, rgba(36, 23, 58, 0.95) 0%, rgba(36, 23, 58, 0.85) 100%);
+  backdrop-filter: blur(10px);
+}
+
+.theme-mykonosBlue-chat {
+  background: linear-gradient(180deg, rgba(231, 250, 251, 0.95) 0%, rgba(231, 250, 251, 0.85) 100%);
+  backdrop-filter: blur(10px);
+}
+
+/* Welcome banner animation */
+@keyframes slide-in {
+  from {
+    opacity: 0;
+    transform: translateX(20px);
+  }
+  to {
+    opacity: 1;
+    transform: translateX(0);
+  }
+}
+
+.animate-slide-in {
+  animation: slide-in 0.3s ease-out forwards;
+}
+
+/* Button hover effects */
+.button-container button {
+  transition: all 0.2s ease-in-out;
+}
+
+.button-container button:hover {
+  transform: translateY(-1px);
+  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
+}
+
+.button-container button:active {
+  transform: translateY(0);
+  box-shadow: 0 1px 4px rgba(0, 0, 0, 0.1);
+}
+
+/* Fix chat bubble margins */
+.rcb-message-bubble {
+  margin: 0.5rem 1rem !important;
+  max-width: 80% !important;
+  background-color: transparent !important;
+  border: none !important;
+  box-shadow: none !important;
+}
+
+/* Target the chat input container */
+.rcb-chat-input {
+  display: flex !important;
+  align-items: center !important;
+  justify-content: center !important;
+  min-height: 60px !important;
+  padding: 0.5rem 1rem !important;
+  background-color: rgba(0, 0, 0, 0.3) !important;
+  backdrop-filter: blur(10px) !important;
+  border-top: 2px solid rgba(59, 130, 246, 0.5) !important;
+  box-shadow: rgba(0, 123, 255, 0.2) 0px -5px 15px -5px !important;
+  width: 100% !important;
+  position: fixed !important;
+  bottom: 0 !important;
+  z-index: 100 !important;
+}
+
+/* Theme-specific chat input containers */
+.theme-cyberSpace-chat .rcb-chat-input {
+  background-color: rgba(0, 0, 0, 0.3) !important;
+  border-top: 2px solid rgba(59, 130, 246, 0.5) !important;
+  box-shadow: rgba(0, 123, 255, 0.2) 0px -5px 15px -5px !important;
+}
+
+.theme-sakuraTrees-chat .rcb-chat-input {
+  background-color: rgba(250, 238, 244, 0.3) !important;
+  border-top: 2px solid rgba(235, 128, 176, 0.5) !important;
+  box-shadow: rgba(255, 0, 89, 0.2) 0px -5px 15px -5px !important;
+}
+
+.theme-sunsetCity-chat .rcb-chat-input {
+  background-color: rgba(36, 23, 58, 0.3) !important;
+  border-top: 2px solid rgba(255, 99, 71, 0.5) !important;
+  box-shadow: rgba(255, 99, 71, 0.2) 0px -5px 15px -5px !important;
+}
+
+.theme-mykonosBlue-chat .rcb-chat-input {
+  background-color: rgba(231, 250, 251, 0.3) !important;
+  border-top: 2px solid rgba(76, 181, 230, 0.5) !important;
+  box-shadow: rgba(30, 129, 176, 0.2) 0px -5px 15px -5px !important;
+}
+
+/* Target the textarea directly */
+textarea.rcb-chat-input-textarea {
+  box-sizing: content-box !important;
+  min-height: 0px !important;
+  padding: 8px 15px !important;
+  height: auto !important;
+  line-height: 1.2 !important;
+  margin: auto !important;
+  background-color: rgba(255, 255, 255, 0.1) !important;
+  border: 1px solid rgba(59, 130, 246, 0.7) !important;
+  border-radius: 12px !important;
+  color: var(--theme-text-color) !important;
+  font-size: 14px !important;
+  backdrop-filter: blur(5px) !important;
+  width: 100% !important;
+  box-shadow: rgba(0, 123, 255, 0.15) 0px 0px 10px 2px !important;
+}
+
+/* Theme-specific textarea styles */
+.theme-cyberSpace-chat textarea.rcb-chat-input-textarea {
+  border: 1px solid rgba(59, 130, 246, 0.7) !important;
+  box-shadow: rgba(0, 123, 255, 0.15) 0px 0px 10px 2px !important;
+}
+
+.theme-sakuraTrees-chat textarea.rcb-chat-input-textarea {
+  border: 1px solid rgba(235, 128, 176, 0.7) !important;
+  box-shadow: rgba(255, 0, 89, 0.15) 0px 0px 10px 2px !important;
+}
+
+.theme-sunsetCity-chat textarea.rcb-chat-input-textarea {
+  border: 1px solid rgba(255, 99, 71, 0.7) !important;
+  box-shadow: rgba(255, 99, 71, 0.15) 0px 0px 10px 2px !important;
+}
+
+.theme-mykonosBlue-chat textarea.rcb-chat-input-textarea {
+  border: 1px solid rgba(76, 181, 230, 0.7) !important;
+  box-shadow: rgba(30, 129, 176, 0.15) 0px 0px 10px 2px !important;
+}
+
+/* Fix the button container alignment */
+.rcb-chat-input-button-container {
+  display: flex !important;
+  align-items: center !important;
+}
+
+/* Override any inline styles */
+.rcb-chat-input-area {
+  display: flex !important;
+  align-items: center !important;
+  background-color: transparent !important;
+  padding: 0 !important;
+}
+
+/* Chat message container */
+.rcb-message-container {
+  background-color: transparent !important;
+  padding: 0 !important;
+  margin: 0 !important;
+  width: 100% !important;
+  display: flex !important;
+}
+
+/* Bot message bubbles */
+.rcb-message-bubble[data-sender="bot"] {
+  background-color: rgba(0, 18, 38, 0.95) !important;
+  color: var(--theme-text-color) !important;
+  border-radius: 0.75rem 0.75rem 0.75rem 0.25rem !important;
+  padding: 0.75rem 1rem !important;
+  margin: 0.75rem 1rem !important;
+  max-width: 70% !important;
+  width: auto !important;
+  backdrop-filter: blur(10px) !important;
+  box-shadow: 0 0 10px 4px rgba(0, 123, 255, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1) !important;
+  border: none !important;
+  border-left: 3px solid rgb(59, 130, 246) !important;
+}
+
+/* User message bubbles */
+.rcb-message-bubble[data-sender="user"] {
+  background-color: rgba(0, 122, 252, 0.75) !important;
+  color: white !important;
+  border-radius: 0.75rem 0.75rem 0.25rem 0.75rem !important;
+  padding: 0.75rem 1rem !important;
+  margin: 0.75rem 1rem !important;
+  max-width: 80% !important;
+  width: auto !important;
+  backdrop-filter: blur(8px) !important;
+  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1) !important;
+  border: none !important;
+  border-right: 3px solid var(--theme-hover-color) !important;
+}
+
+/* Chat window */
+.rcb-chat-window {
+  background-color: transparent !important;
+  height: 100% !important;
+  padding: 0 !important;
+  margin: 0 !important;
+  width: 100% !important;
+  display: flex !important;
+  flex-direction: column !important;
+}
+
+/* Chat body */
+.rcb-chat-body-container {
+  flex-grow: 1 !important;
+  overflow-y: auto !important;
+  background-color: transparent !important;
+  padding: 0 !important;
+  margin: 0 0 70px 0 !important; /* Add margin bottom to prevent overlap with fixed input */
+  width: 100% !important;
+  scrollbar-width: none !important;
+}
+
+/* Header */
+.rcb-header {
+  background: rgba(0, 18, 38, 0.3) !important;
+  backdrop-filter: blur(8px) !important;
+  border-bottom: 1px solid var(--theme-border-color) !important;
+  padding: 0.75rem 1rem !important;
+  margin: 0 !important;
+  width: 100% !important;
+}
+
+/* Headers for different themes */
+.theme-cyberSpace-chat .rcb-header {
+  background: rgba(0, 18, 38, 0.3) !important;
+}
+
+.theme-sakuraTrees-chat .rcb-header {
+  background: rgba(251, 240, 248, 0.3) !important;
+}
+
+.theme-sunsetCity-chat .rcb-header {
+  background: rgba(36, 23, 58, 0.3) !important;
+}
+
+.theme-mykonosBlue-chat .rcb-header {
+  background: rgba(231, 250, 251, 0.3) !important;
+}
+
+/* Message wrapper */
+.rcb-message-wrapper {
+  display: flex !important;
+  width: 100% !important;
+  padding: 0 !important;
+  margin: 0 !important;
+}
+
+/* Fix alignment for bot messages */
+.rcb-message-wrapper[data-sender="bot"] {
+  justify-content: flex-start !important;
+}
+
+/* Fix alignment for user messages */
+.rcb-message-wrapper[data-sender="user"] {
+  justify-content: flex-end !important;
+}
+
+/* Add hover effects to buttons */
+.rcb-chat-input-button {
+  transition: all 0.2s ease-in-out !important;
+  opacity: 0.8 !important;
+}
+
+.rcb-chat-input-button:hover {
+  opacity: 1 !important;
+  transform: scale(1.05) !important;
+} 
\ No newline at end of file
diff --git a/components/chatgpt/ChatContainer.tsx b/components/chatgpt/ChatContainer.tsx
index f5d89973e7e6250c9f019041a3f41ce03b521255..25bb0957e47cef653c42164fe51ad624faabc62c 100644
--- a/components/chatgpt/ChatContainer.tsx
+++ b/components/chatgpt/ChatContainer.tsx
@@ -1,20 +1,24 @@
 "use client"
 
-import { useState, useEffect, useRef } from "react";
+import { useState, useEffect, useRef, useCallback } from "react";
 import { v4 as uuidv4 } from "uuid";
 import { cn } from "@/lib/utils";
 import { Button } from "@/components/ui/button";
 import dynamic from "next/dynamic";
-import { Styles } from "react-chatbotify";
-import { useAudio } from '@/store/selectors';
+import type { Styles } from "react-chatbotify";
+import { useAudio, useTheme } from '@/store/selectors';
 import { useAllCalendarActivities } from "@/hooks/useCalendarActivities";
 import { useExamActivities } from "@/hooks/useCalendarActivities";
 import TestCalendar from '@/components/calendar/TestCalendar';
 import { X } from "lucide-react";
-import { CalendarEvent } from "@/types/calendar";
+import type { CalendarEvent } from "@/types/calendar";
+// import TutorReportModal from "./TutorReportModal";
 // Import required CSS for the calendar
 import "react-big-calendar/lib/css/react-big-calendar.css";
 import "@/components/styles/CustomCalendar.css";
+import { useUser, useUI } from "@/store/selectors";
+import { generateWelcomeMessage } from "@/components/chatgpt/ChatContainerInitialMesage";
+import { useGame } from "@/store/selectors";
 
 // Dynamically import the chatbot component
 const DynamicChatBot = dynamic(() => import("react-chatbotify"), {
@@ -23,8 +27,9 @@ const DynamicChatBot = dynamic(() => import("react-chatbotify"), {
 
 /* --- Constants ----- */
 const QUICK_ACTIONS = [
-  { id: "schedule", text: "Schedule", prompt: "What's my Schedule" },
-  { id: "knowledge", text: "Knowledge Profile", prompt: "Show me my Knowledge Profile" }
+  { id: "schedule", text: "What's my schedule?", prompt: "What's on my schedule today?" },
+  { id: "knowledge", text: "What was in my tutor's last report?", prompt: "Show me my tutor's last report" },
+  // { id: "next-exam", text: "Next exam?", prompt: "When is my next practice exam?" }
 ];
 
 /* ----- Types ---- */
@@ -48,35 +53,174 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   const [lastToggleTime, setLastToggleTime] = useState<number>(0);
   const [isCalendarModalOpen, setIsCalendarModalOpen] = useState(false);
   const [calendarDate, setCalendarDate] = useState<Date>(new Date());
+  const [isBotResponding, setIsBotResponding] = useState(false);
+  const [welcomeVisible, setWelcomeVisible] = useState(true);
+  const [welcomeMessage, setWelcomeMessage] = useState<string | null>(null);
+  const [isTutorReportOpen, setIsTutorReportOpen] = useState(false);
+  const [isWelcomeMessageTemporary, setIsWelcomeMessageTemporary] = useState(false);
+  
+  // Add game state
+  const { streakDays, testScore, userLevel, totalPatients } = useGame();
   
   // Get both exam and study activities
   const { activities: examActivities, loading: examLoading, fetchExamActivities } = useExamActivities();
   const { activities: studyActivities, loading: studyLoading, refetch: refetchStudyActivities } = useAllCalendarActivities();
   const [calendarEvents, setCalendarEvents] = useState<CalendarEvent[]>([]);
   
+  // Get current theme
+  const currentTheme = useTheme();
+  
+  // Get theme-specific styles
+  const getThemeStyles = () => {
+    switch(currentTheme) {
+      case 'sakuraTrees':
+        return {
+          botBubbleBg: 'rgba(251, 240, 248, 0.85)',
+          userBubbleBg: 'rgba(196, 122, 155, 0.85)',
+          overlayBg: 'rgba(250, 238, 244, 0.3)',
+          inputBg: 'rgba(251, 240, 248, 0.6)'
+        };
+      case 'sunsetCity':
+        return {
+          botBubbleBg: 'rgba(36, 23, 58, 0.85)',
+          userBubbleBg: 'rgba(255, 99, 71, 0.85)',
+          overlayBg: 'rgba(36, 23, 58, 0.3)',
+          inputBg: 'rgba(36, 23, 58, 0.6)'
+        };
+      case 'mykonosBlue':
+        return {
+          botBubbleBg: 'rgba(231, 250, 251, 0.85)',
+          userBubbleBg: 'rgba(30, 129, 176, 0.85)',
+          overlayBg: 'rgba(231, 250, 251, 0.3)',
+          inputBg: 'rgba(231, 250, 251, 0.6)'
+        };
+      default:
+        return {
+          botBubbleBg: 'rgba(0, 18, 38, 0.85)',
+          userBubbleBg: 'rgba(0, 122, 252, 0.85)',
+          overlayBg: 'rgba(0, 18, 38, 0.3)',
+          inputBg: 'rgba(0, 18, 38, 0.6)'
+        };
+    }
+  };
+  
+  const themeStyles = getThemeStyles();
+  
   /* ---- Refs --- */
-  const scrollAreaRef = useRef<HTMLDivElement>(null);
   const cmdPressedRef = useRef(false);
   const cmdPressedTime = useRef<number | null>(null);
   const cmdReleaseTimer = useRef<NodeJS.Timeout | null>(null);
   const audio = useAudio();
   
-  /* --- Animations & Effects --- */
+  // Get user data from store to pass to the API
+  const { userInfo } = useUser();
+  const { isSubscribed } = useUser();
+  
+  // Prefetch welcome message as soon as the component mounts
   useEffect(() => {
-    if (!isMounted) {
-      setIsMounted(true);
+    // Define keys once to ensure consistency
+    const localStorageKey = `welcome-message-${userInfo?.userId || 'anonymous'}`;
+    const lastApiCallTimeKey = `welcome-api-last-call-${userInfo?.userId || 'anonymous'}`;
+    const prefetchKey = `prefetch-${userInfo?.userId || 'anonymous'}`;
+    
+    // Check if we already have a welcome message in state
+    if (welcomeMessage && !isWelcomeMessageTemporary) {
+      return;
+    }
+    
+    // Only fetch once per session check
+    if (sessionStorage.getItem(prefetchKey)) {
+      return;
+    }
+    
+    // Mark this fetch as attempted for this session
+    sessionStorage.setItem(prefetchKey, 'true');
+    
+    const prefetchWelcomeMessage = async () => {
+      // Wait for activities to load
+      if (examLoading || studyLoading) {
+        // Set a fallback message if we need to show something immediately
+        const loadingMessage = `Hello ${userInfo?.firstName || 'there'}! I'm loading your recent activities...`;
+        setWelcomeMessage(loadingMessage);
+        setIsWelcomeMessageTemporary(true);  // Mark this message as temporary
+        return;
+      }
+
+      // If we had a temporary message and now activities are loaded, update it
+      if (isWelcomeMessageTemporary) {
+        // Generate template welcome message with user context
+        const gameState = {
+          streakDays,
+          testScore,
+          userLevel,
+          totalPatients
+        };
+
+        // Generate the welcome message using our template function
+        const templateMessage = generateWelcomeMessage({
+          userInfo,
+          examActivities,
+          studyActivities,
+          gameState
+        });
+        
+        // Use the template message
+        setWelcomeMessage(templateMessage);
+        setIsWelcomeMessageTemporary(false); // No longer temporary
+        
+        // Cache the message with timestamp for future use
+        localStorage.setItem(localStorageKey, JSON.stringify({
+          message: templateMessage,
+          timestamp: Date.now()
+        }));
+        
+        return;
+      }
 
-      const timer = setTimeout(() => {
-        const botMessage = "Hello! I'm Kalypso AI, your medical education assistant. How can I help with your studies today?";
-        window.dispatchEvent(
-          new CustomEvent("chatbot-event", {
-            detail: { message: botMessage },
-          })
-        );
-      }, 1000);
+      // Generate template welcome message with user context
+      const gameState = {
+        streakDays,
+        testScore,
+        userLevel,
+        totalPatients
+      };
 
-      return () => clearTimeout(timer);
+      // Generate the welcome message using our template function
+      const templateMessage = generateWelcomeMessage({
+        userInfo,
+        examActivities,
+        studyActivities,
+        gameState
+      });
+      
+      // Use the template message
+      setWelcomeMessage(templateMessage);
+      
+      // Cache the message with timestamp for future use
+      localStorage.setItem(localStorageKey, JSON.stringify({
+        message: templateMessage,
+        timestamp: Date.now()
+      }));
+    };
+    
+    prefetchWelcomeMessage();
+    
+    return () => {
+      // Cleanup
+    };
+  }, [userInfo, welcomeMessage, examActivities, studyActivities, streakDays, testScore, userLevel, totalPatients, examLoading, studyLoading, isWelcomeMessageTemporary]);
+  
+  useEffect(() => {
+    if (!isMounted) {
+      setIsMounted(true);
     }
+    
+    // Hide welcome message after 10 seconds
+    const welcomeTimer = setTimeout(() => {
+      setWelcomeVisible(false);
+    }, 10000);
+    
+    return () => clearTimeout(welcomeTimer);
   }, [isMounted]);
   
   useEffect(() => {
@@ -114,38 +258,31 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
 
   useEffect(() => {
     const handleKeyDown = (event: KeyboardEvent) => {
-      console.log('[ChatContainer] KeyDown:', event.key, 'repeat:', event.repeat, 'cmdPressedRef:', cmdPressedRef.current);
       if ((event.key === 'Meta' || event.key === 'Control') && !event.repeat) {
         // Only set command pressed if no other keys are already pressed
         if (!cmdPressedRef.current) {
-          console.log('[ChatContainer] Setting cmdPressedRef to true');
           cmdPressedRef.current = true;
           cmdPressedTime.current = Date.now();
         }
       } else if (cmdPressedRef.current) {
         // If any other key is pressed while Command is down, mark it as a combo
         // This prevents toggling audio when Command is used for shortcuts
-        console.log('[ChatContainer] Combo detected, clearing cmdPressedTime');
         cmdPressedTime.current = null;
       }
     };
 
     const handleKeyUp = (event: KeyboardEvent) => {
-      console.log('[ChatContainer] KeyUp:', event.key, 'cmdPressedRef:', cmdPressedRef.current, 'cmdPressedTime:', cmdPressedTime.current);
       if (event.key === 'Meta' || event.key === 'Control') {
         // Only toggle if it was a standalone Command press (not part of a combo)
         if (cmdPressedRef.current && cmdPressedTime.current) {
           const pressDuration = Date.now() - cmdPressedTime.current;
-          console.log('[ChatContainer] Command press duration:', pressDuration, 'ms');
           if (pressDuration < 500) { // Only toggle if pressed for less than 500ms
             // Clear any existing timer to prevent multiple toggles
             if (cmdReleaseTimer.current) {
               clearTimeout(cmdReleaseTimer.current);
             }
             
-            console.log('[ChatContainer] Setting up toggleAudio timer');
             cmdReleaseTimer.current = setTimeout(() => {
-              console.log('[ChatContainer] Executing toggleAudio from timer');
               toggleAudio();
               cmdReleaseTimer.current = null;
             }, 50); // Small delay to ensure no other keys were pressed
@@ -239,19 +376,57 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   }, [isCalendarModalOpen, fetchExamActivities, refetchStudyActivities]);
   
   /* ---- Event Handlers ----- */
-  const handleSendMessage = async (userInput: string, messageContext?: string) => {
+  const handleSendMessage = async (message: string, messageContext?: string) => {
     setIsLoading(true);
     setError(null);
+    setIsBotResponding(true);
+    
+    // Create a comprehensive user context object
+    const userProfileContext = {
+      user: {
+        id: userInfo?.userId || 'anonymous',
+        name: userInfo?.firstName || 'User',
+        subscription: isSubscribed ? 'premium' : 'free'
+      },
+      game: {
+        level: userLevel || 'Beginner',
+        streakDays: streakDays || 0,
+        totalPatients: totalPatients || 0,
+        testScore: testScore || 0,
+        anki: {
+          clinicStatus: 'PATIENT LEVEL', // Updated to use the string you mentioned for game status
+          patientsPerDay: 20, // Replace with actual data from your state if available
+          totalTreated: totalPatients || 0
+        }
+      },
+      activities: {
+        examCount: examActivities?.length || 0,
+        studyCount: studyActivities?.length || 0,
+        upcomingExam: examActivities?.length > 0 ? {
+          title: examActivities[0].activityTitle,
+          date: examActivities[0].scheduledDate
+        } : null
+      },
+      preferences: {
+        audio: audioEnabled
+      }
+    };
     
-    try {
-      // Call the API
-      const response = await fetch("/api/conversation", {
-        method: "POST",
-        headers: { "Content-Type": "application/json" },
+    // Combine any existing message context with our profile context
+    const combinedContext = messageContext ? 
+      messageContext + "\n\nUser Profile: " + JSON.stringify(userProfileContext) :
+      "User Profile: " + JSON.stringify(userProfileContext);
+      
+    try {    
+      const response = await fetch('/api/conversation', {
+        method: 'POST',
+        headers: {
+          'Content-Type': 'application/json',
+        },
         body: JSON.stringify({
-          message: userInput,
+          message,
           threadId,
-          context: messageContext,
+          context: combinedContext,
           generateAudio: audioEnabled,
           assistantId: 'asst_7jwxyFZEYOYZlduxQrnFLZl8'
         }),
@@ -281,10 +456,15 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
         }
       }
       
+      setTimeout(() => {
+        setIsBotResponding(false);
+      }, 3000);
+      
       return data.message || "I'm sorry, I couldn't process your request.";
     } catch (error) {
       console.error("Error:", error);
       setError(`An error occurred: ${error instanceof Error ? error.message : String(error)}`);
+      setIsBotResponding(false);
       return "Sorry, there was an error processing your request. Please try again.";
     } finally {
       setIsLoading(false);
@@ -295,6 +475,8 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
     setActiveTab(tabId);
     if (tabId === "schedule") {
       setIsCalendarModalOpen(true);
+    } else if (tabId === "knowledge") {
+      setIsTutorReportOpen(true);
     } else {
       const action = QUICK_ACTIONS.find(a => a.id === tabId);
       if (action && chatbotRef) {
@@ -309,7 +491,6 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
 
   const handleSelectEvent = (event: CalendarEvent) => {
     // Optionally handle event selection
-    console.log('Selected event:', event);
   };
 
   const handleEventUpdate = async () => {
@@ -318,7 +499,6 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   };
 
   const playAudio = (audioBase64: string) => {
-    console.log('[ChatContainer] Playing audio response');
     setIsPlaying(true);
     
     // Use the voice channel instead of music channel
@@ -331,7 +511,6 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   };
 
   const stopAudio = () => {
-    console.log('[ChatContainer] Stopping audio');
     setIsPlaying(false);
     audio.stopVoice();
   };
@@ -341,21 +520,15 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
     const now = Date.now();
     const timeSinceLastToggle = now - lastToggleTime;
     
-    console.log('[ChatContainer] toggleAudio called, time since last toggle:', timeSinceLastToggle, 'ms');
-    
     // Only allow toggle if it's been at least 500ms since the last toggle
     if (timeSinceLastToggle < 500) {
-      console.log('[ChatContainer] Ignoring toggle, too soon after last toggle');
       return;
     }
     
     setLastToggleTime(now);
     
     if (!audioEnabled) {
-      console.log('[ChatContainer] Enabling audio and playing sound');
       audio.playSound('chatbot-open');
-    } else {
-      console.log('[ChatContainer] Disabling audio');
     }
     setAudioEnabled(!audioEnabled);
   };
@@ -363,7 +536,116 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   /* ---- ChatBot Settings ----- */
   const flow = {
     start: {
-      message: "Hello! I'm Kalypso AI, your medical education assistant. How can I help with your studies today?",
+      message: async () => {
+        // Define keys once to ensure consistency - same as in prefetch effect
+        const localStorageKey = `welcome-message-${userInfo?.userId || 'anonymous'}`;
+        const lastApiCallTimeKey = `welcome-api-last-call-${userInfo?.userId || 'anonymous'}`;
+        
+        // We already have the message from prefetching
+        if (welcomeMessage) {
+          return welcomeMessage;
+        }
+        
+        // As a fallback, if somehow we don't have it yet
+        
+        // Check cache in localStorage first before making any API calls 
+        const cachedData = localStorage.getItem(localStorageKey);
+        
+        if (cachedData) {
+          try {
+            const { message, timestamp } = JSON.parse(cachedData);
+            const now = Date.now();
+            const cacheAge = now - timestamp;
+            const MAX_CACHE_AGE = 24 * 60 * 60 * 1000; // 24 hours - Match prefetch cache duration
+            
+            // Use cached message if it's not too old
+            if (cacheAge < MAX_CACHE_AGE) {
+              return message;
+            }
+          } catch (err) {
+            // Silent error handling
+          }
+        }
+        
+        // Check rate limiting
+        const lastApiCallTime = localStorage.getItem(lastApiCallTimeKey);
+        if (lastApiCallTime) {
+          const now = Date.now();
+          const timeSinceLastCall = now - Number(lastApiCallTime);
+          const MIN_API_CALL_INTERVAL = 10000; // 10 seconds - Match prefetch rate limit
+          
+          if (timeSinceLastCall < MIN_API_CALL_INTERVAL) {
+            // Try to use cached message even if older
+            if (cachedData) {
+              try {
+                const { message } = JSON.parse(cachedData);
+                return message;
+              } catch (err) {
+                // Silent error - we'll use fallback below
+              }
+            }
+            
+            // Return a fallback message if no cache
+            const fallbackMessage = "Meow there, I'm Kalypso! It's great to see you again. How can I help with your MCAT study today?";
+            return fallbackMessage;
+          }
+        }
+        
+        // Making the API call directly without rate limiting check, since this is the fallback
+        // Record API call time
+        localStorage.setItem(lastApiCallTimeKey, Date.now().toString());
+        
+        setIsBotResponding(true);
+        const fallbackFetchStartTime = Date.now();
+        try {
+          // Using a longer timeout since this is our last attempt
+          const controller = new AbortController();
+          const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout (longer than prefetch)
+          
+          const response = await fetch("/api/kalypso/welcome", {
+            method: "GET", 
+            cache: 'no-cache',
+            headers: {
+              'Cache-Control': 'max-age=300' // Cache for 5 minutes
+            },
+            signal: controller.signal
+          });
+          
+          clearTimeout(timeoutId);
+          
+          if (!response.ok) {
+            throw new Error(`Failed to fetch welcome message: ${response.status}`);
+          }
+          
+          const data = await response.json();
+          
+          // Cache the successful response - SAME AS IN PREFETCH
+          localStorage.setItem(localStorageKey, JSON.stringify({
+            message: data.message,
+            timestamp: Date.now()
+          }));
+          
+          setIsBotResponding(false);
+          return data.message;
+        } catch (error) {
+          setIsBotResponding(false);
+          
+          // Check for stale cache as last resort before using hardcoded fallback
+          const staleCachedData = localStorage.getItem(localStorageKey);
+          if (staleCachedData) {
+            try {
+              const { message } = JSON.parse(staleCachedData);
+              return message;
+            } catch (err) {
+              // Silent error handling
+            }
+          }
+          
+          // Return a fallback message if the API call fails
+          const fallbackMessage = "Meow there, I'm Kalypso! It's great to see you again. How can I help with your MCAT study today?";
+          return fallbackMessage;
+        }
+      },
       path: "loop",
     },
     loop: {
@@ -403,24 +685,19 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
       showAvatar: false,
       title: (
         <div className="flex items-center justify-between w-full">
-          <div className="text-[--theme-text-color]">
-          </div>
           <div className="flex text-[--theme-text-color] items-center gap-3">
             <div className="flex items-center">
               <button
                 onClick={toggleAudio}
-                className="px-2 py-1 text-xs bg-transparent hover:bg-[--theme-hover-color] transition-colors"
-                style={{
-                  color: audioEnabled
-                    ? "var(--theme-hover-color)"
-                    : "var(--gray-600)",
-                }}
+                className={cn(
+                  "px-2 py-1 text-xs rounded-full transition-colors",
+                  audioEnabled ? "text-[--theme-hover-color]" : "text-[--theme-text-color] hover:text-[--theme-hover-color]"
+                )}
               >
                 {audioEnabled ? "🔊" : "🔇"}
               </button>
               <span
-                className="text-[9px] ml-1"
-                style={{ color: "var(--gray-600)" }}
+                className="text-[9px] ml-1 text-[--theme-text-color]"
               >
                 {audioEnabled ? "speak with the mic" : "toggle voice with 'cmd' key"}
               </span>
@@ -430,9 +707,10 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
                 key={action.id}
                 className={cn(
                   "px-3 py-1 rounded-full text-xs font-medium transition-colors duration-300", 
-                  "bg-[--theme-leaguecard-color] text-[--theme-text-color] border border-[--theme-border-color]", 
-                  "hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]",
-                  activeTab === action.id && "bg-[--theme-hover-color] text-[--theme-hover-text]"
+                  "border border-[--theme-border-color]", 
+                  activeTab === action.id 
+                    ? "bg-[--theme-hover-color] text-[--theme-hover-text]"
+                    : "bg-[rgba(255,255,255,0.1)] text-[--theme-text-color] hover:bg-[--theme-hover-color] hover:text-[--theme-hover-text]"
                 )}
                 onClick={() => handleTabClick(action.id)}
               >
@@ -465,49 +743,113 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
     chatWindowStyle: {
       display: "flex",
       flexDirection: "column" as const,
-      height: "calc(100vh - 8rem)",
+      height: "calc(100vh - 9rem)",
       width: "100%",
-      backgroundColor: "var(--theme-leaguecard-color)",
+      backgroundColor: "transparent",
       position: "relative",
       zIndex: 1,
     },
     bodyStyle: {
       flexGrow: 1,
       overflowY: "auto" as const,
+      backgroundColor: "transparent",
     },
     chatInputContainerStyle: {
       position: 'sticky',
       bottom: 0,
-      backgroundColor: "var(--theme-leaguecard-color)",
-      borderTop: "1px solid var(--theme-border-color)",
+      backgroundColor: 'rgba(0, 0, 0, 0.3)',
+      backdropFilter: "blur(10px)",
+      borderTop: `2px solid ${
+        currentTheme === 'cyberSpace' ? 'rgba(59, 130, 246, 0.5)' :
+        currentTheme === 'sakuraTrees' ? 'rgba(235, 128, 176, 0.5)' :
+        currentTheme === 'sunsetCity' ? 'rgba(255, 99, 71, 0.5)' :
+        currentTheme === 'mykonosBlue' ? 'rgba(76, 181, 230, 0.5)' :
+        'var(--theme-border-color)'
+      }`,
       padding: "1rem",
       width: "100%",
       zIndex: 2,
+      boxShadow: currentTheme === 'cyberSpace' ? "0 -5px 15px -5px rgba(0, 123, 255, 0.2)" :
+                currentTheme === 'sakuraTrees' ? "0 -5px 15px -5px rgba(255, 0, 89, 0.2)" :
+                currentTheme === 'sunsetCity' ? "0 -5px 15px -5px rgba(255, 99, 71, 0.2)" :
+                currentTheme === 'mykonosBlue' ? "0 -5px 15px -5px rgba(30, 129, 176, 0.2)" :
+                "0 -5px 15px -5px rgba(0, 0, 0, 0.1)",
     },
     chatInputAreaStyle: {
-      border: "1px solid var(--theme-border-color)",
-      borderRadius: "8px",
-      backgroundColor: "transparent",
+      border: `1px solid ${
+        currentTheme === 'cyberSpace' ? 'rgba(59, 130, 246, 0.7)' :
+        currentTheme === 'sakuraTrees' ? 'rgba(235, 128, 176, 0.7)' :
+        currentTheme === 'sunsetCity' ? 'rgba(255, 99, 71, 0.7)' :
+        currentTheme === 'mykonosBlue' ? 'rgba(76, 181, 230, 0.7)' :
+        'var(--theme-border-color)'
+      }`,
+      borderRadius: "12px",
+      backgroundColor: "rgba(255, 255, 255, 0.1)",
       color: "var(--theme-text-color)",
       width: "100%",
+      boxShadow: `0 0 10px 2px ${
+        currentTheme === 'cyberSpace' ? 'rgba(0, 123, 255, 0.15)' :
+        currentTheme === 'sakuraTrees' ? 'rgba(255, 0, 89, 0.15)' :
+        currentTheme === 'sunsetCity' ? 'rgba(255, 99, 71, 0.15)' :
+        currentTheme === 'mykonosBlue' ? 'rgba(30, 129, 176, 0.15)' :
+        'rgba(0, 0, 0, 0.1)'
+      }`,
+      backdropFilter: "blur(5px)",
     },
     botBubbleStyle: {
-      fontSize: ".9rem",
+      fontSize: "1rem",
+      fontWeight: "500",
       fontFamily:
         "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
       color: "var(--theme-text-color)",
-      backgroundColor: "var(--theme-botchatbox-color)",
+      backgroundColor: currentTheme === 'cyberSpace' ? 'rgba(0, 18, 38, 0.95)' :
+                     currentTheme === 'sakuraTrees' ? 'rgba(251, 240, 248, 0.95)' :
+                     currentTheme === 'sunsetCity' ? 'rgba(36, 23, 58, 0.95)' :
+                     currentTheme === 'mykonosBlue' ? 'rgba(231, 250, 251, 0.95)' :
+                     themeStyles.botBubbleBg,
+      backdropFilter: "blur(10px)",
+      // Add theme-specific glow (box-shadow) with enhanced intensity
+      boxShadow: currentTheme === 'cyberSpace' ? "0 0 10px 4px rgba(0, 123, 255, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'sakuraTrees' ? "0 0 10px 4px rgba(255, 0, 89, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'sunsetCity' ? "0 0 14px 5px rgba(255, 99, 71, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'mykonosBlue' ? "0 0 10px 8px rgba(30, 129, 176, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                "0 2px 5px rgba(0, 0, 0, 0.1)",
+      borderRadius: "0.75rem 0.75rem 0.75rem 0.25rem",
+      borderLeft: currentTheme === 'cyberSpace' ? "3px solid #3b82f6" :
+                 currentTheme === 'sakuraTrees' ? "3px solid #eb80b0" :
+                 currentTheme === 'sunsetCity' ? "3px solid #ff9baf" :
+                 currentTheme === 'mykonosBlue' ? "3px solid #4cb5e6" :
+                 "3px solid var(--theme-hover-color)",
     },
     userBubbleStyle: {
-      fontSize: ".9rem",
+      fontSize: "1rem",
+      fontWeight: "500",
       fontFamily:
         "-apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif",
       color: "white",
-      backgroundColor: "var(--theme-userchatbox-color)",
+      backgroundColor: currentTheme === 'cyberSpace' ? 'rgba(0, 122, 252, 0.95)' :
+                     currentTheme === 'sakuraTrees' ? 'rgba(196, 122, 155, 0.95)' :
+                     currentTheme === 'sunsetCity' ? 'rgba(255, 99, 71, 0.95)' :
+                     currentTheme === 'mykonosBlue' ? 'rgba(30, 129, 176, 0.95)' :
+                     themeStyles.userBubbleBg,
+      backdropFilter: "blur(10px)",
+      // Add theme-specific glow (box-shadow) with enhanced intensity
+      boxShadow: currentTheme === 'cyberSpace' ? "0 0 10px 4px rgba(0, 123, 255, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'sakuraTrees' ? "0 0 10px 4px rgba(255, 0, 89, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'sunsetCity' ? "0 0 14px 5px rgba(255, 99, 71, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                currentTheme === 'mykonosBlue' ? "0 0 10px 8px rgba(30, 129, 176, 0.4), 0 2px 5px rgba(0, 0, 0, 0.1)" :
+                "0 2px 5px rgba(0, 0, 0, 0.1)",
+      borderRadius: "0.75rem 0.75rem 0.25rem 0.75rem",
+      borderRight: currentTheme === 'cyberSpace' ? "3px solid #007afc" :
+                  currentTheme === 'sakuraTrees' ? "3px solid #b85475" :
+                  currentTheme === 'sunsetCity' ? "3px solid #ff6347" :
+                  currentTheme === 'mykonosBlue' ? "3px solid #1e81b0" :
+                  "3px solid var(--theme-hover-color)",
       textAlign: "left",
     },
     headerStyle: {
-      background: "transparent",
+      background: themeStyles.overlayBg, // Theme-specific header background
+      backdropFilter: "blur(5px)",
       borderBottom: "1px solid var(--theme-border-color)",
       padding: "0.75rem 1rem",
     },
@@ -528,7 +870,16 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
   }
 
   return (
-    <div className="flex flex-col h-full rounded-lg overflow-hidden border border-[--theme-border-color] bg-[--theme-leaguecard-color]">
+    <div className={cn(
+      `flex flex-col h-full rounded-lg overflow-hidden border theme-${currentTheme}-chat`,
+      "shadow-lg",
+      className
+    )}
+    style={{ 
+      borderColor: 'var(--theme-border-color)',
+      borderWidth: '1px',
+      boxShadow: '0 4px 20px rgba(0, 0, 0, 0.1)'
+    }}>
       {/* Chatbot container */}
       <div className="flex-1 relative">
         <DynamicChatBot
@@ -537,11 +888,28 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
           themes={themes}
           flow={flow}
         />
+        
+        {/* Themed welcome banner - only show when not responding */}
+        {!isBotResponding && welcomeVisible && (
+          <div 
+            className="absolute top-16 right-5 w-48 p-3 rounded-lg backdrop-blur-sm text-xs z-10 animate-slide-in"
+            style={{ 
+              backgroundColor: themeStyles.botBubbleBg,
+              borderLeft: `3px solid var(--theme-hover-color)`,
+              boxShadow: '0 2px 8px rgba(0, 0, 0, 0.15)'
+            }}>
+            <p className="mb-2 font-medium">Welcome to your {currentTheme === 'mykonosBlue' ? 'Mykonos retreat' 
+                                            : currentTheme === 'sakuraTrees' ? 'Sakura garden'
+                                            : currentTheme === 'sunsetCity' ? 'Sunset city'
+                                            : 'Cyber space'}</p>
+            <p>Ask Kalypso about your MCAT study plan, or try scheduling a new task.</p>
+          </div>
+        )}
       </div>
 
       {/* Audio control indicator */}
       {isPlaying && audioEnabled && (
-        <div className="absolute bottom-4 right-4 bg-[--theme-doctorsoffice-accent] text-white px-3 py-1 rounded-full text-xs flex items-center gap-2">
+        <div className="absolute bottom-4 right-4 bg-[--theme-doctorsoffice-accent] text-white px-3 py-1 rounded-full text-xs flex items-center gap-2 backdrop-blur-sm">
           <span className="animate-pulse">🔊</span>
           <button onClick={stopAudio} className="hover:underline">Stop Audio</button>
         </div>
@@ -549,7 +917,7 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
 
       {/* Error display */}
       {error && (
-        <div className="p-4 bg-red-500 bg-opacity-10 border border-red-500 text-red-500 rounded-lg m-4">
+        <div className="p-4 bg-red-500 bg-opacity-10 border border-red-500 text-red-500 rounded-lg m-4 backdrop-blur-sm">
           {error}
         </div>
       )}
@@ -590,6 +958,11 @@ const ChatContainer = ({ className, chatbotRef }: ChatContainerProps) => {
           </div>
         </div>
       )}
+
+      {/* Tutor Report Modal
+      {isTutorReportOpen && (
+        <TutorReportModal onClose={() => setIsTutorReportOpen(false)} />
+      )} */}
     </div>
   );
 };
diff --git a/components/chatgpt/ChatContainerInitialMesage.tsx b/components/chatgpt/ChatContainerInitialMesage.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..9012e05824fe84565597f14cd86fc9244038c21a
--- /dev/null
+++ b/components/chatgpt/ChatContainerInitialMesage.tsx
@@ -0,0 +1,134 @@
+// components/chatgpt/ChatContainerInitialMesage.tsx
+import type { CalendarActivity } from "@/hooks/useCalendarActivities";
+import type { UserInfo } from "@/types/user";
+import { isToday, isTomorrow, format, differenceInDays } from "date-fns";
+
+interface GameState {
+  streakDays: number;
+  testScore: number;
+  userLevel: string;
+  totalPatients: number;
+}
+
+interface GenerateWelcomeMessageProps {
+  userInfo: UserInfo | null;
+  examActivities: CalendarActivity[];
+  studyActivities: CalendarActivity[];
+  gameState: GameState;
+}
+
+/**
+ * Gets appropriate time-of-day greeting
+ */
+const getTimeGreeting = (): string => {
+  const hour = new Date().getHours();
+  
+  if (hour < 12) return "Good morning";
+  if (hour < 17) return "Good afternoon";
+  return "Good evening";
+};
+
+/**
+ * Formats a date into a user-friendly string
+ */
+const formatDateNicely = (dateString: string): string => {
+  const date = new Date(dateString);
+  
+  if (isToday(date)) {
+    return "today";
+  } 
+  if (isTomorrow(date)) {
+    return "tomorrow";
+  }
+  
+  return format(date, "EEE, MMM do"); // Returns format like "Thu, Apr 3rd"
+};
+
+/**
+ * Gets text for remaining days until a date
+ */
+const getDaysRemaining = (dateString: string): string => {
+  const date = new Date(dateString);
+  const today = new Date();
+  const days = differenceInDays(date, today);
+  
+  return days === 1 ? "(tomorrow)" : `(${days} days away)`;
+};
+
+/**
+ * Generates a personalized welcome message template with user context
+ */
+export const generateWelcomeMessage = ({ 
+  userInfo, 
+  examActivities, 
+  studyActivities,
+  gameState
+}: GenerateWelcomeMessageProps): string => {
+  // Get user's name
+  const userName = userInfo?.firstName || "there";
+  
+  // Get current time and day
+  const currentDay = format(new Date(), "EEEE");
+  const currentTime = format(new Date(), "h:mm a");
+  
+  // Extract game state information
+  const { streakDays, testScore, userLevel, totalPatients } = gameState;
+  
+  // Get upcoming exams (for full length exams)
+  const upcomingExams = examActivities
+    .filter(a => new Date(a.scheduledDate) > new Date())
+    .sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime())
+    .slice(0, 1);
+  
+  // Get recent activities for today's tasks
+  const todayActivities = studyActivities
+    .filter(a => isToday(new Date(a.scheduledDate)))
+    .sort((a, b) => new Date(a.scheduledDate).getTime() - new Date(b.scheduledDate).getTime());
+    
+  // Build the new message format that directly mirrors the example
+  let message = `${getTimeGreeting()}, ${userName}! It's ${currentTime} on ${currentDay}`;
+  
+  // Add a study session suggestion based on time of day
+  const hour = new Date().getHours();
+  if (hour < 12) {
+    message += " - perfect for a morning study session.\n\n";
+  } else if (hour < 17) {
+    message += " - great time for a focused study block.\n\n";
+  } else {
+    message += " - ideal for reviewing key concepts.\n\n";
+  }
+  
+  // Add upcoming exam info with days countdown
+  if (upcomingExams.length > 0) {
+    const exam = upcomingExams[0];
+    message += `Your next full-length practice exam is scheduled for ${format(new Date(exam.scheduledDate), "MMMM do")} ${getDaysRemaining(exam.scheduledDate)}.\n\n`;
+  }
+  
+  // Add strength/weakness info if test score exists (simplified example)
+  if (testScore > 0) {
+    // This is placeholder - in a real implementation, you would pull this data from 
+    // a user profile or analytics service that tracks subject performance
+    message += `You're consistent in CARS but could use improvement in Biochemistry, specifically in amino acid properties and enzyme kinetics.\n\n`;
+  }
+  
+  // Add today's tasks
+  const completedTasks = todayActivities.filter(a => a.status === 'completed').length;
+  if (todayActivities.length > 0) {
+    message += `Your tasks for today are: ${todayActivities.map(a => a.activityTitle).join(', ')}. `;
+    message += `You've completed ${completedTasks} so far. Check out your tasks for today!\n\n`;
+  } else {
+    message += `You don't have any specific tasks scheduled for today. Consider adding some study activities!\n\n`;
+  }
+  
+  // Add clinic and patient info
+  // Assuming 20 patients per day is the current rate - in real implementation,
+  // this would come from the game state or user profile
+  const patientsPerDay = 20; // This would ideally come from a gameState property
+  if (totalPatients > 0) {
+    message += `Your clinic currently treats ${patientsPerDay} patients a day and you've treated a total of ${totalPatients}. Make sure to visit today so that you can earn enough points!\n\n`;
+  }
+  
+  message += "What can I help you with?";
+  
+  return message;
+}; 
\ No newline at end of file
diff --git a/components/home/ContentWrapper.tsx b/components/home/ContentWrapper.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..a4e5a5058b4f56c2aa582bcf9b5ac11a266d2c15
--- /dev/null
+++ b/components/home/ContentWrapper.tsx
@@ -0,0 +1,17 @@
+// components/home/ContentWrapper.tsx
+import { memo } from "react";
+import type { ReactNode } from "react";
+
+interface ContentWrapperProps {
+  children: ReactNode;
+}
+
+export const ContentWrapper = memo(({ children }: ContentWrapperProps) => (
+  <div className="w-full px-[2rem] lg:px-[2.7rem] xl:px-[7rem] overflow-visible">
+    <div className="text-[--theme-text-color] flex gap-[1.5rem] overflow-visible">
+      {children}
+    </div>
+  </div>
+));
+
+ContentWrapper.displayName = 'ContentWrapper'; 
\ No newline at end of file
diff --git a/components/home/DraggableKalypso.tsx b/components/home/DraggableKalypso.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..e47b8bf8ae7dd8b01767f4d7518744aff3299f7e
--- /dev/null
+++ b/components/home/DraggableKalypso.tsx
@@ -0,0 +1,239 @@
+"use client"
+
+import { useState, useRef, useEffect } from 'react';
+import Draggable from 'react-draggable';
+
+type KalypsoState = 'wait' | 'talk' | 'end' | 'start' | 'floating';
+
+interface DraggableKalypsoProps {
+  buttonSize?: number | string;
+}
+
+const DraggableKalypso: React.FC<DraggableKalypsoProps> = ({ 
+  buttonSize = '24rem',
+}) => {
+  const [kalypsoState, setKalypsoState] = useState<KalypsoState>('wait');
+  const [kalypsoSrc, setKalypsoSrc] = useState('/kalypso/kalypsowait.gif');
+  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
+  // Setting initial position toward the left
+  const [position, setPosition] = useState({ x: 0, y: 0 });
+  const [isDragging, setIsDragging] = useState(false);
+  const dragTimeoutRef = useRef<NodeJS.Timeout | null>(null);
+  const meowIntervalRef = useRef<NodeJS.Timeout | null>(null);
+  const nodeRef = useRef(null);
+  const containerRef = useRef<HTMLDivElement>(null);
+  const audioRef = useRef<HTMLAudioElement | null>(null);
+  const lastMeowTimeRef = useRef<number>(0);
+  const lastPositionRef = useRef({ x: 0, y: 0 });
+  const movementThresholdRef = useRef(15); // Minimum movement in pixels to trigger a meow
+
+  // Map of state to file names (based on actual files in /public/kalypso/)
+  const stateToFile = {
+    wait: '/kalypso/kalypsowait.gif',
+    talk: '/kalypso/kalypsotalk.gif',
+    end: '/kalypso/kalypsoend.gif',
+    start: '/kalypso/kalypsostart.gif',
+    floating: '/kalypso/kalypsofloating.gif'
+  };
+
+  // Initialize audio element
+  useEffect(() => {
+    if (typeof window !== 'undefined') {
+      audioRef.current = new Audio('/audio/cat-meow.mp3');
+      audioRef.current.volume = 0.7; // Set volume to 70%
+    }
+    
+    return () => {
+      if (audioRef.current) {
+        audioRef.current.pause();
+        audioRef.current = null;
+      }
+    };
+  }, []);
+
+  // Play the meow sound with a min delay between meows
+  const playMeow = () => {
+    const now = Date.now();
+    // Don't play the sound too frequently - limit to once every 800ms
+    if (now - lastMeowTimeRef.current > 800) {
+      if (audioRef.current) {
+        audioRef.current.currentTime = 0; // Reset to start
+        audioRef.current.play().catch(err => console.error("Error playing audio:", err));
+        lastMeowTimeRef.current = now;
+      }
+    }
+  };
+
+  // Set up an interval to periodically play meow during dragging
+  const startMeowInterval = () => {
+    if (meowIntervalRef.current) {
+      clearInterval(meowIntervalRef.current);
+    }
+    
+    meowIntervalRef.current = setInterval(() => {
+      if (isDragging) {
+        playMeow();
+      }
+    }, Math.random() * 1000 + 800); // Random interval between 800-1800ms
+  };
+
+  // Clean up the meow interval
+  const stopMeowInterval = () => {
+    if (meowIntervalRef.current) {
+      clearInterval(meowIntervalRef.current);
+      meowIntervalRef.current = null;
+    }
+  };
+
+  // Calculate initial position based on window size 
+  useEffect(() => {
+    // Allow a small delay for the component to mount properly
+    const timeout = setTimeout(() => {
+      // Setting to 0,0 and letting the fixed positioning handle the rest
+      setPosition({ x: 0, y: 0 });
+    }, 100);
+    
+    return () => clearTimeout(timeout);
+  }, []);
+
+  const switchKalypsoState = (newState: KalypsoState): void => {
+    setKalypsoState(newState);
+    setKalypsoSrc(stateToFile[newState]);
+  };
+
+  const handleDragStart = () => {
+    // Play meow sound when dragging starts
+    playMeow();
+    
+    // Start the interval for periodic meows during dragging
+    startMeowInterval();
+    
+    dragTimeoutRef.current = setTimeout(() => {
+      setIsDragging(true);
+      switchKalypsoState('floating');
+    }, 200);
+  };
+
+  const handleDragStop = () => {
+    if (dragTimeoutRef.current) {
+      clearTimeout(dragTimeoutRef.current);
+    }
+    
+    // Stop the meow interval
+    stopMeowInterval();
+    
+    setIsDragging(false);
+    switchKalypsoState('wait');
+  };
+
+  // Random animations for Kalypso when idle
+  useEffect(() => {
+    const randomAnimation = () => {
+      const states: KalypsoState[] = ['wait', 'talk', 'end', 'start'];
+      const randomState = states[Math.floor(Math.random() * states.length)];
+      
+      switchKalypsoState(randomState);
+      
+      timeoutRef.current = setTimeout(() => {
+        switchKalypsoState('wait');
+        
+        // Schedule next animation
+        timeoutRef.current = setTimeout(randomAnimation, Math.random() * 15000 + 10000);
+      }, Math.random() * 3000 + 2000);
+    };
+    
+    // Start the animation cycle after a delay
+    const initialTimeout = setTimeout(randomAnimation, 5000);
+    
+    return () => {
+      if (timeoutRef.current) {
+        clearTimeout(timeoutRef.current);
+      }
+      clearTimeout(initialTimeout);
+      if (dragTimeoutRef.current) {
+        clearTimeout(dragTimeoutRef.current);
+      }
+      stopMeowInterval(); // Clean up the meow interval
+    };
+  }, []);
+
+  return (
+    <div 
+      ref={containerRef}
+      className="fixed pointer-events-none" 
+      style={{ 
+        // YOU CAN EDIT KALYPSO'S INITIAL POSITION HERE ↓
+        bottom: '-3rem', // Change this value to adjust vertical position from bottom
+        left: '55rem',  // Change this value to adjust horizontal position from left
+        // Or use 'right' instead of 'left' to position from the right side
+        // YOU CAN EDIT KALYPSO'S INITIAL POSITION HERE ↑
+        zIndex: 9999,
+        width: buttonSize,
+        height: buttonSize
+      }}
+    >
+      <Draggable
+        position={position}
+        onStart={handleDragStart}
+        onStop={(e, data) => {
+          setPosition({ x: data.x, y: data.y });
+          handleDragStop();
+        }}
+        onDrag={(e, data) => {
+          // Store the new position
+          setPosition({ x: data.x, y: data.y });
+          
+          // Calculate movement amount since last position
+          const deltaX = Math.abs(data.x - lastPositionRef.current.x);
+          const deltaY = Math.abs(data.y - lastPositionRef.current.y);
+          
+          // If significant movement, update position and possibly trigger meow
+          if (deltaX > movementThresholdRef.current || deltaY > movementThresholdRef.current) {
+            lastPositionRef.current = { x: data.x, y: data.y };
+            
+            // Randomly play meow on some movements (30% chance)
+            if (Math.random() < 0.3) {
+              playMeow();
+            }
+          }
+        }}
+        nodeRef={nodeRef}
+        // Important: adding these properties to ensure free movement
+        defaultClassName="draggable-kalypso"
+        defaultPosition={{x: 0, y: 0}}
+      >
+        <div 
+          ref={nodeRef}
+          className="cursor-grab active:cursor-grabbing pointer-events-auto absolute"
+          style={{ width: buttonSize, height: buttonSize }}
+        >
+          <div
+            className="overflow-hidden transition duration-120 ease-in-out transform hover:-translate-y-1 hover:scale-105 w-full h-full"
+          >
+            <img
+              src={kalypsoSrc}
+              alt="Kalypso"
+              className="w-full h-full object-contain"
+              draggable={false}
+              style={{ maxWidth: '100%', maxHeight: '100%' }}
+            />
+          </div>
+        </div>
+      </Draggable>
+
+      {/* Debug image to test if images can load in general */}
+      <div className="hidden">
+        <img 
+          src="/kalypso/KalypsoPicture.png" 
+          alt="Debug" 
+          width="1" 
+          height="1"
+          onLoad={() => console.log("Debug image loaded")}
+          onError={() => console.error("Debug image failed to load")}
+        />
+      </div>
+    </div>
+  );
+};
+
+export default DraggableKalypso; 
\ No newline at end of file
diff --git a/components/home/IntroVideoPlayer.tsx b/components/home/IntroVideoPlayer.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..4db13d31e84996d935a20c4734c52c809b1566cd
--- /dev/null
+++ b/components/home/IntroVideoPlayer.tsx
@@ -0,0 +1,63 @@
+"use client";
+
+import { useRef, useState, type FC } from 'react';
+
+// Define demo video URL directly in this component
+const firstTimeDemoVideo = "https://my-mcat.s3.us-east-2.amazonaws.com/tutorial/MyMCAT+Software+and+Mission-VEED.mp4";
+
+interface IntroVideoPlayerProps {
+  onComplete: () => void;
+}
+
+const IntroVideoPlayer: FC<IntroVideoPlayerProps> = ({ 
+  onComplete
+}) => {
+  const videoRef = useRef<HTMLVideoElement>(null);
+  const [videoEnded, setVideoEnded] = useState(false);
+
+  const handleVideoEnd = () => {
+    setVideoEnded(true);
+  };
+
+  const handleWatchedClick = () => {
+    onComplete();
+  };
+
+  return (
+    <div className="h-full flex flex-col justify-center items-center text-black">
+      <h2 className="text-3xl mb-4">Welcome to MyMCAT!</h2>
+      
+      <div className="relative w-full max-w-6xl aspect-video bg-black rounded-lg overflow-hidden mb-8">
+        <video 
+          ref={videoRef}
+          className="w-full h-full"
+          src={firstTimeDemoVideo}
+          controls
+          onEnded={handleVideoEnd}
+          aria-label="MyMCAT Introduction Video"
+          // Add track for captions - this is a placeholder, replace with actual captions file
+          >
+            <track 
+              kind="captions" 
+              src="/captions/intro-video-captions.vtt" 
+              label="English" 
+              srcLang="en" 
+              default 
+            />
+        </video>
+      </div>
+      
+      <button 
+        className={`p-3 ${videoEnded ? 'bg-green-500' : 'bg-gray-500'} rounded transition-colors duration-300 text-xl`}
+        onClick={handleWatchedClick}
+        disabled={!videoEnded}
+        type="button"
+        aria-label={videoEnded ? "Mark introduction video as watched" : "Please watch the video first"}
+      >
+        {videoEnded ? "I've watched the intro video" : "Please watch the video first"}
+      </button>
+    </div>
+  );
+};
+
+export default IntroVideoPlayer; 
\ No newline at end of file
diff --git a/components/home/LoadingSpinner.tsx b/components/home/LoadingSpinner.tsx
new file mode 100644
index 0000000000000000000000000000000000000000..020bbfcc7c58bf7526823a1c7125d1be3f5a0564
--- /dev/null
+++ b/components/home/LoadingSpinner.tsx
@@ -0,0 +1,17 @@
+// components/home/LoadingSpinner.tsx
+import { memo } from "react";
+
+interface LoadingSpinnerProps {
+  message?: string;
+}
+
+export const LoadingSpinner = memo(({ message = "Loading..." }: LoadingSpinnerProps) => (
+  <div className="fixed inset-0 flex justify-center items-center bg-black/50 z-[9999]">
+    <div className="text-center">
+      <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-sky-500 mx-auto mb-4" />
+      <p className="text-sky-300 text-xl">{message}</p>
+    </div>
+  </div>
+));
+
+LoadingSpinner.displayName = 'LoadingSpinner'; 
\ No newline at end of file
diff --git a/components/landing-hero.tsx b/components/landing-hero.tsx
deleted file mode 100644
index 78eb190c35cc6d4f99ca63cdf0e035cfc582eda7..0000000000000000000000000000000000000000
--- a/components/landing-hero.tsx
+++ /dev/null
@@ -1,174 +0,0 @@
-"use client";
-import Image from "next/image";
-import Link from "next/link";
-import cat from "../public/hero.gif";
-import laptop from "../public/laptop.png";
-import { useLayoutEffect, useRef, useState, useEffect } from 'react';
-import BernieSvg from "../public/Bernie.svg";
-import { gsap } from 'gsap';
-import { ScrollTrigger } from 'gsap/ScrollTrigger';
-
-gsap.registerPlugin(ScrollTrigger);
-
-const LandingHero = () => {
-  const quoteRef = useRef(null);
-  const videoRef = useRef<HTMLVideoElement>(null);
-  const videoRef2 = useRef<HTMLVideoElement>(null);
-  const [videoLoaded, setVideoLoaded] = useState(false);
-  const [video2Loaded, setVideo2Loaded] = useState(false);
-  const catContainerRef = useRef<HTMLDivElement>(null);
-  const [isSafari, setIsSafari] = useState(false);
-  const [isFirefox, setIsFirefox] = useState(false);
-
-  useEffect(() => {
-    setIsSafari(/^((?!chrome|android).)*safari/i.test(navigator.userAgent));
-    setIsFirefox(/firefox/i.test(navigator.userAgent));
-  }, []);
-
-  useEffect(() => {
-    // Check if browser can play WebM
-    const video = document.createElement('video');
-  }, []);
-
-  useLayoutEffect(() => {
-    const video = videoRef.current;
-    if (video) {
-      video.load();
-      const handleLoadedData = () => setVideoLoaded(true);
-      video.addEventListener('loadeddata', handleLoadedData);
-      return () => {
-        video.removeEventListener('loadeddata', handleLoadedData);
-      };
-    }
-  }, []);
-
-  useLayoutEffect(() => {
-    if (videoLoaded && videoRef.current) {
-      gsap.to(videoRef.current, {
-        opacity: 1,
-        duration: 1,
-        ease: "power2.inOut"
-      });
-    }
-  }, [videoLoaded]);
-
-  useLayoutEffect(() => {
-    if (video2Loaded && videoRef2.current) {
-      gsap.to(videoRef2.current, {
-        opacity: 1,
-        duration: 1,
-        ease: "power2.inOut"
-      });
-    }
-  }, [video2Loaded]);
-
-  useLayoutEffect(() => {
-    // Animate cat container after a short delay
-    gsap.fromTo(catContainerRef.current, 
-      { y: '100%', opacity: 0 },
-      { 
-        y: '0%', 
-        opacity: 1, 
-        duration: 1.2, 
-        ease: "power2.out",
-        delay: 0.5 // Optional: small delay to let the page settle
-      }
-    );
-  }, []); // Run once on mount
-
-  return (
-    <>
-      <section 
-        className="relative h-screen overflow-hidden" 
-        style={{ backgroundColor: '#171234' }}
-        id="home"
-      >
-        <video 
-          ref={videoRef}
-          className="absolute top-0 left-0 w-full h-full object-cover transition-opacity duration-1000"
-          autoPlay
-          loop
-          muted
-          playsInline
-          style={{ opacity: videoLoaded ? 1 : 0 }}
-        >
-          <source src="https://my-mcat.s3.us-east-2.amazonaws.com/public/brush3.mp4" type="video/mp4" />
-        </video>
-        <div className="absolute inset-0 bg-black bg-opacity-50"></div>
-        <div className="relative z-10 container mx-auto px-4 h-full flex items-center justify-center">
-          <div className="grid grid-cols-1 lg:grid-cols-2 items-center gap-10 max-w-6xl w-full">
-            <div className="text-center">
-              <h1 className="text-4xl md:text-5xl font-bold text-white font-krungthep mb-4">
-                Score your <span className="text-[#f2f64f]">best.</span>
-              </h1>
-              <p className="text-2xl md:text-3xl text-white my-8">
-             Start studying with Kalypso for free.
-              </p>
-              <div className="flex justify-center">
-                <Link href="/sign-up">
-                  <button className="bg-[#ffffff] text-[#0e2247] py-4 text-xl md:text-2xl px-10 rounded-[20px]">
-                    Register
-                  </button>
-                </Link>
-              </div>
-            </div>
-            <div className="relative flex justify-center mt-6 lg:mt-0">
-              <div className="w-full">
-                <Image 
-                  src={laptop} 
-                  alt="Laptop" 
-                  className="w-full"
-                  priority
-                />
-              </div>
-              <div className="absolute top-[5%] left-[10%] w-[80%] h-[80%] overflow-hidden">
-                <div ref={catContainerRef} className="w-full h-full opacity-0">
-                  <Image 
-                    src={cat} 
-                    alt="Hero Animation" 
-                    layout="fill" 
-                    objectFit="contain"
-                    priority
-                    quality={75}
-                    sizes="(max-width: 768px) 100vw, 50vw"
-                  />
-                </div>
-              </div>
-            </div>
-          </div>
-        </div>
-      </section>
-
-      {/* Integrated Bernie Quote into the Next Background Section */}
-      <section 
-        className="w-full py-16 bg-[#000c1e] relative"
-      >
-        <div 
-          className="absolute inset-0 opacity-20"
-          style={{
-            backgroundImage: 'url("/stars.jpeg")',
-            backgroundSize: 'cover',
-            backgroundPosition: 'center',
-            backgroundRepeat: 'no-repeat',
-            mixBlendMode: 'screen',
-          }}
-        ></div>
-       <div className="flex flex-col md:flex-row items-center justify-center gap-8 ml-3 mr-3 mb-12" ref={quoteRef}>
-          <div>
-            <BernieSvg width={260} height={260} />
-          </div>
-          <div className="">
-            <h1 className="text-3xl md:text-3xl text-[#ffffff] font-bold mb-4 font-krungthep">
-              &ldquo;Higher education should be a right for all, not a privilege for the few.&rdquo;
-            </h1>
-            <p className="text-xl text-[#ffffff] font-bold">
-              Senator Bernie Sanders of Vermont
-            </p>
-          </div>
-        </div>
-      </section>
-    </>
-  );
-};
-
-export default LandingHero;
\ No newline at end of file
diff --git a/components/landingpage/LandingHero.tsx b/components/landingpage/LandingHero.tsx
index 3d132c9e4812e129f25cbdd5d478836eb249cd37..bb812282be97b8b3ecf066a61bf3ae20622fcc43 100644
--- a/components/landingpage/LandingHero.tsx
+++ b/components/landingpage/LandingHero.tsx
@@ -191,12 +191,12 @@ const LandingHero = ({ onScrollClick }: LandingHeroProps) => {
       {/* Left side - Text content */}
       <div className="text-center">
         <h1 className="text-4xl md:text-5xl font-bold text-white font-krungthep mb-4">
-           Score your <span className="text-[#f2f64f]">best.</span>
+          Learn from <span className="text-[#f2f64f]">10x MCAT Tutors</span>
         </h1>
         <p className="text-xl md:text-2xl text-white my-8">
-          High-tech MCAT software dedicated to creating the future doctors our patients deserve.
+          Elite tutors powered by cutting-edge software to maximize your score improvement.
         </p>
-        <div className="flex justify-center">
+        <div className="flex flex-col md:flex-row items-center justify-center gap-4">
           <motion.button
             onClick={handleDemoClick}
             className="bg-[#ffffff] text-[#0e2247] py-4 text-xl md:text-2xl px-10 rounded-[20px]"
@@ -216,6 +216,13 @@ const LandingHero = ({ onScrollClick }: LandingHeroProps) => {
           >
             Watch Demo
           </motion.button>
+          <motion.button
+            onClick={() => document.getElementById('tutors')?.scrollIntoView({ behavior: 'smooth' })}
+            className="bg-transparent border-2 border-white text-white py-4 text-xl md:text-2xl px-10 rounded-[20px] hover:bg-white/10"
+            whileHover={{ scale: 1.05 }}
+          >
+            Meet Our Tutors
+          </motion.button>
         </div>
       </div>
       {/* Right side - Laptop and Cat */}
diff --git a/components/landingpage/Mission.tsx b/components/landingpage/Mission.tsx
index 98f7a732fea2e051363dbf3e4879dd74190c6bac..b898f714ff02f20c9486e9d3154a5605803ea8a9 100644
--- a/components/landingpage/Mission.tsx
+++ b/components/landingpage/Mission.tsx
@@ -13,7 +13,6 @@ import dynamic from 'next/dynamic';
 import { WorldProps } from '../ui/globe';
 import { FaDiscord } from 'react-icons/fa';
 import Link from 'next/link';
-import TutorSlider from './TutorSlider';
 
 const World = dynamic(() => import('../ui/globe').then((mod) => mod.World), {
   ssr: false,
@@ -332,7 +331,7 @@ const MethodologyAndTestimonials = () => {
         }}
       >
         <div className="container mx-auto px-4">
-          <TutorSlider />
+          {/* TutorSlider component would be placed here */}
         </div>
       </section>
 
diff --git a/components/landingpage/TutorSlider.tsx b/components/landingpage/TutorSlider.tsx
index cccaacc05aad59b4924f9452b78d04f7ca770fd4..4b4d47f60158881bfe9a908e6fa78c4237c0e065 100644
--- a/components/landingpage/TutorSlider.tsx
+++ b/components/landingpage/TutorSlider.tsx
@@ -1,67 +1,129 @@
 import React from 'react';
 import Image from 'next/image';
+import { motion } from 'framer-motion';
+import Link from 'next/link';
 
 const tutors = [
   {
     name: 'Chas',
     score: '526',
     institution: 'JHU Medicine',
-    role: 'Tutor',
-    image: '/tutors/ChasB.png'
+    role: 'Lead Tutor',
+    image: '/tutors/ChasB.png',
+    hoursHelped: '500+',
+    specialty: 'CARS & B/B'
   },
   {
     name: 'Kerol',
     score: '521',
     institution: 'JHU Medicine',
-    role: 'Tutor',
-    image: '/tutors/KerolF.png'
+    role: 'Senior Tutor',
+    image: '/tutors/KerolF.png',
+    hoursHelped: '400+',
+    specialty: 'P/S & C/P'
   },
   {
     name: 'Prynce',
     score: '523',
     institution: 'Rice',
-    role: 'Instructor',
-    image: '/tutors/PrynceK.png'
+    role: 'Lead Instructor',
+    image: '/tutors/PrynceK.png',
+    hoursHelped: '600+',
+    specialty: 'All Sections'
   },
   {
     name: 'Laura',
     score: '520',
     institution: 'UCLA',
-    role: 'Tutor',
-    image: '/tutors/LauraN.png'
+    role: 'Senior Tutor',
+    image: '/tutors/LauraN.png',
+    hoursHelped: '300+',
+    specialty: 'CARS & P/S'
   },
   {
     name: 'Ethan',
     score: '519',
     institution: 'Penn Medicine',
-    role: 'Tutor',
-    image: '/tutors/EthanK.png'
+    role: 'Senior Tutor',
+    image: '/tutors/EthanK.png',
+    hoursHelped: '450+',
+    specialty: 'B/B & C/P'
   },
   {
     name: 'Vivian',
     score: '512',
     institution: 'CNU SOM',
     role: 'Tutor',
-    image: '/tutors/VivianZ.png'
+    image: '/tutors/VivianZ.png',
+    hoursHelped: '200+',
+    specialty: 'P/S & CARS'
   }
 ];
 
 const TutorSlider = () => {
   return (
-    <div className="mb-20">
-      <h2 className="text-4xl font-bold text-white text-center mb-8 font-krungthep">
-        Our Medical Students
-      </h2>
-      <div className="text-white/80 text-center text-lg mb-10 max-w-xl mx-auto">
-       We have mentored hundreds and know this test inside and out.
-      </div>
-      
-      <div className="flex justify-center">
-        <div className="flex flex-wrap justify-center gap-x-10 gap-y-8 max-w-5xl">
+    <div id="tutors" className="py-20 px-4 bg-gradient-to-b from-[#12233c] to-[#1a2f4d]">
+      <div className="max-w-7xl mx-auto">
+        {/* Header Section */}
+        <div className="text-center mb-16">
+          <h2 className="text-4xl md:text-5xl font-bold text-white mb-6 font-krungthep">
+            {"Elite Tutors + Smart Software"}
+          </h2>
+          <div className="space-y-4 text-white/80 md:text-xl mb-8 max-w-3xl mx-auto">
+            <p className="leading-relaxed">
+              {"Get started with our AI-powered study platform - free. Then supercharge your prep with a 520+ tutor who sees exactly where you need help."}
+            </p>
+            <p className="text-green-400 font-medium">
+              {"Complete prep system: Practice questions • Study plans • Analytics • Expert tutoring"}
+            </p>
+          </div>
+          
+          {/* Key Stats */}
+          <div className="grid grid-cols-2 md:grid-cols-3 gap-6 max-w-4xl mx-auto mb-16">
+            {[
+              { 
+                label: 'Tutor Scores', 
+                value: '520+',
+                subtext: '98th percentile'
+              },
+              { 
+                label: 'Score Increase', 
+                value: '12+',
+                subtext: 'Points avg.'
+              },
+              { 
+                label: 'Study Resources', 
+                value: '100%',
+                subtext: 'Free to start'
+              }
+            ].map((stat, index) => (
+              <motion.div
+                key={index}
+                initial={{ opacity: 0, y: 20 }}
+                whileInView={{ opacity: 1, y: 0 }}
+                transition={{ delay: index * 0.1 }}
+                className="p-6 rounded-lg bg-white/5 backdrop-blur-sm"
+              >
+                <div className="text-2xl md:text-3xl font-bold text-green-400 mb-2">{stat.value}</div>
+                <div className="text-white/90 text-sm md:text-base mb-1">{stat.label}</div>
+                <div className="text-white/60 text-xs">{stat.subtext}</div>
+              </motion.div>
+            ))}
+          </div>
+        </div>
+
+        {/* Tutor Grid */}
+        <div className="grid grid-cols-2 md:grid-cols-3 gap-8 max-w-5xl mx-auto">
           {tutors.map((tutor, index) => (
-            <div key={index} className="flex flex-col items-center">
+            <motion.div
+              key={index}
+              initial={{ opacity: 0, y: 20 }}
+              whileInView={{ opacity: 1, y: 0 }}
+              transition={{ delay: index * 0.1 }}
+              className="flex flex-col items-center p-6 rounded-xl bg-white/5 backdrop-blur-sm hover:bg-white/10 transition-all duration-300"
+            >
               <div className="relative w-24 h-24 sm:w-28 sm:h-28 rounded-full overflow-hidden 
-                          border-2 border-green-500/30 transition-all duration-300 mb-3">
+                          border-2 border-green-500/30 transition-all duration-300 mb-4 hover:border-green-500/60">
                 <Image
                   src={tutor.image}
                   alt={tutor.name}
@@ -70,16 +132,50 @@ const TutorSlider = () => {
                 />
               </div>
               <div className="text-center">
-                <div className="flex items-center justify-center gap-2">
-                  <span className="text-white font-medium text-sm sm:text-base">{tutor.name}</span>
-                  <span className="text-green-400 font-bold text-sm sm:text-base">{tutor.score}</span>
+                <div className="flex items-center justify-center gap-2 mb-2">
+                  <span className="text-white font-medium text-lg">{tutor.name}</span>
+                  <span className="text-green-400 font-bold text-lg">{tutor.score}</span>
+                </div>
+                <span className="text-blue-400 text-sm block mb-1">{tutor.institution}</span>
+                <div className="text-white/50 text-sm mb-3">{tutor.role}</div>
+                <div className="text-white/70 text-xs">
+                  <div className="font-medium text-green-400">{tutor.hoursHelped}</div>
+                  <div>Hours Tutored</div>
+                </div>
+                <div className="mt-3 text-xs text-white/50">
+                  <span className="font-medium">Specialty:</span> {tutor.specialty}
                 </div>
-                <span className="text-blue-400 text-xs sm:text-sm">{tutor.institution}</span>
-                <div className="text-white/50 text-xs">{tutor.role}</div>
               </div>
-            </div>
+            </motion.div>
           ))}
         </div>
+
+        {/* CTA Section */}
+        <div className="text-center mt-16 space-y-6">
+          <div className="flex flex-col md:flex-row items-center justify-center gap-4">
+            <Link href="/sign-up">
+              <motion.button
+                whileHover={{ scale: 1.05 }}
+                whileTap={{ scale: 0.95 }}
+                className="bg-green-500 text-white px-8 py-4 rounded-lg text-lg font-medium hover:bg-green-600 transition-colors duration-300"
+              >
+                Start Free
+              </motion.button>
+            </Link>
+            <Link href="/sign-up?plan=tutor">
+              <motion.button
+                whileHover={{ scale: 1.05 }}
+                whileTap={{ scale: 0.95 }}
+                className="bg-transparent border-2 border-white text-white px-8 py-4 rounded-lg text-lg font-medium hover:bg-white/10 transition-colors duration-300"
+              >
+                Get a Tutor
+              </motion.button>
+            </Link>
+          </div>
+          <p className="text-white/60 text-sm">
+            Join 500+ students improving their score. Limited tutor spots available.
+          </p>
+        </div>
       </div>
     </div>
   );
diff --git a/components/navbar/ProfileButton.tsx b/components/navbar/ProfileButton.tsx
index b17aef855f79a1ce7f2600c624018be9aa595ca6..2aea6424640e1686c7d89f42342eee8dd130edbe 100644
--- a/components/navbar/ProfileButton.tsx
+++ b/components/navbar/ProfileButton.tsx
@@ -1,4 +1,4 @@
-import React, { useState, useEffect, memo } from 'react';
+import React, { useState, useEffect, memo, useRef } from 'react';
 import { useClerk, useUser as useClerkUser } from '@clerk/nextjs';
 import { FaUser, FaUserCog, FaSignOutAlt } from 'react-icons/fa';
 import UserProfileModal from '../social/profile/UserProfileModal';
@@ -7,6 +7,7 @@ import Image from 'next/image';
 import { createPortal } from 'react-dom';
 
 const ProfileImage = memo(({ profilePhoto }: { profilePhoto: string | undefined }) => {
+  console.log('[Debug] ProfileImage rendering with photo:', profilePhoto);
   return (
     <Image
       key={profilePhoto} // Now safe to use key here since component is memoized
@@ -17,8 +18,12 @@ const ProfileImage = memo(({ profilePhoto }: { profilePhoto: string | undefined
       className="w-full h-full object-cover opacity-0 transition-opacity duration-300"
       quality={100}
       onLoad={(e) => {
+        console.log('[Debug] Profile image loaded:', profilePhoto);
         (e.target as HTMLImageElement).classList.remove('opacity-0');
       }}
+      onError={(e) => {
+        console.error('[Debug] Profile image failed to load:', profilePhoto);
+      }}
       priority
       unoptimized
     />
@@ -30,11 +35,15 @@ ProfileImage.displayName = 'ProfileImage';
 export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
   const [isMenuOpen, setIsMenuOpen] = useState(false);
   const [isProfileModalOpen, setIsProfileModalOpen] = useState(false);
+  const [forceShowProfile, setForceShowProfile] = useState(false);
   const menuRef = React.useRef<HTMLDivElement>(null);
   const buttonRef = React.useRef<HTMLButtonElement>(null);
+  const loadingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
   const { openUserProfile, signOut } = useClerk();
   const { user } = useClerkUser();
-  const { profile, profileLoading } = useUser();
+  const { profile, profileLoading, refreshUserInfo } = useUser();
+  
+  console.log('[Debug] ProfileButton render - profileLoading:', profileLoading, 'profile:', profile, 'forceShowProfile:', forceShowProfile);
 
   // Handle clicks outside menu
   useEffect(() => {
@@ -54,6 +63,48 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
     };
   }, [isMenuOpen]);
 
+  // Add a debugging effect to monitor profile loading state
+  useEffect(() => {
+    console.log('[Debug] Profile loading state changed:', profileLoading);
+    if (profileLoading) {
+      console.log('[Debug] Profile is currently loading');
+      
+      // Set a timeout to force show the profile if loading takes too long
+      if (loadingTimeoutRef.current) {
+        clearTimeout(loadingTimeoutRef.current);
+      }
+      
+      loadingTimeoutRef.current = setTimeout(() => {
+        console.log('[Debug] Profile loading timeout - forcing display of default profile');
+        setForceShowProfile(true);
+        
+        // Try to refresh the user info again
+        refreshUserInfo().catch(err => {
+          console.error('[Debug] Failed to refresh user info:', err);
+        });
+      }, 5000); // 5 seconds timeout
+    } else {
+      console.log('[Debug] Profile loaded with data:', profile);
+      // Clear the timeout if profile loaded successfully
+      if (loadingTimeoutRef.current) {
+        clearTimeout(loadingTimeoutRef.current);
+        loadingTimeoutRef.current = null;
+      }
+      
+      // Reset force show if we have a real profile
+      if (forceShowProfile) {
+        setForceShowProfile(false);
+      }
+    }
+    
+    // Cleanup timeout on unmount
+    return () => {
+      if (loadingTimeoutRef.current) {
+        clearTimeout(loadingTimeoutRef.current);
+      }
+    };
+  }, [profileLoading, profile, forceShowProfile, refreshUserInfo]);
+
   return (
     <>
       {/* Profile Button */}
@@ -61,6 +112,7 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
         ref={buttonRef}
         onClick={() => setIsMenuOpen(!isMenuOpen)}
         className="w-12 h-12 rounded-full overflow-hidden bg-[--theme-hover-color]/20 flex items-center justify-center hover:bg-[--theme-hover-color]/30 transition-colors relative group"
+        type="button"
       >
         {/* Gleam effect */}
         <div className="absolute inset-0 pointer-events-none overflow-hidden rounded-full">
@@ -68,7 +120,7 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
         </div>
         
         {/* Profile Image with Loading State */}
-        {profileLoading ? (
+        {profileLoading && !forceShowProfile ? (
           <div className="w-full h-full flex items-center justify-center">
             <div className="animate-spin rounded-full h-4 w-4 border-2 border-[--theme-hover-color] border-t-transparent" />
           </div>
@@ -95,6 +147,7 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
                 setIsMenuOpen(false);
               }}
               className="w-full px-2 py-1.5 text-left hover:bg-gray-50 flex items-center gap-2 text-gray-700"
+              type="button"
             >
               <FaUser className="w-4 h-4" />
               Customize profile
@@ -106,6 +159,7 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
               setIsMenuOpen(false);
             }}
             className="w-full px-2 py-1.5 text-left hover:bg-gray-50 flex items-center gap-2 text-gray-700"
+            type="button"
           >
             <FaUserCog className="w-4 h-4" />
             Account & Security
@@ -113,6 +167,7 @@ export const ProfileButton = ({hideProfile}: {hideProfile?: boolean}) => {
           <button
             onClick={() => signOut()}
             className="w-full px-2 py-1.5 text-left hover:bg-gray-50 flex items-center gap-2 text-gray-700"
+            type="button"
           >
             <FaSignOutAlt className="w-4 h-4" />
             Sign out
diff --git a/components/navigation/HoverSidebar.tsx b/components/navigation/HoverSidebar.tsx
index 8353837502573c49add46c4f674d52d4982dbaf5..1c1ba58d83ebd11980ee2ed3c6625e55469f9108 100644
--- a/components/navigation/HoverSidebar.tsx
+++ b/components/navigation/HoverSidebar.tsx
@@ -10,6 +10,7 @@ import { ScrollArea } from "@/components/ui/scroll-area";
 import { cn } from "@/lib/utils";
 import { toast } from "react-hot-toast";
 import HelpContentTestingSuite from "@/components/guides/HelpContentTestingSuite";
+import { useNavigation } from "@/store/selectors";
 
 /* ----- Types ---- */
 interface Task {
@@ -72,7 +73,7 @@ const NAVIGATION_ITEMS: NavigationItem[] = [
   {
     id: "ankiclinic",
     name: "Anki Clinic",
-    tab: "ankiclinic",
+    tab: "AnkiClinic",
     icon: <Clock className="w-5 h-5" />
   }
 ];
@@ -86,16 +87,20 @@ const HoverSidebar: React.FC<HoverSidebarProps> = ({
 }) => {
   /* ---- State ----- */
   const [isVisible, setIsVisible] = useState(false);
-  const [activeTab, setActiveTab] = useState<string | null>(() => {
-    // Initialize based on currentPage
-    const matchingItem = NAVIGATION_ITEMS.find(item => item.tab === currentPage);
-    return matchingItem ? matchingItem.id : "kalypso-ai";
-  });
   const [hoverTimer, setHoverTimer] = useState<NodeJS.Timeout | null>(null);
   const [currentDate, setCurrentDate] = useState(new Date());
   const [visibleSection, setVisibleSection] = useState<'nav' | 'tasks'>('nav');
   const [isMobile, setIsMobile] = useState(false);
   
+  // Use navigation selector hook
+  const { activePage, navigateHomeTab } = useNavigation();
+  
+  // Map page to nav id for UI highlighting
+  const activeTab = (() => {
+    const matchingItem = NAVIGATION_ITEMS.find(item => item.tab === activePage);
+    return matchingItem ? matchingItem.id : "kalypso-ai";
+  })();
+  
   /* ---- Refs --- */
   const sidebarRef = useRef<HTMLDivElement>(null);
   const router = useRouter();
@@ -114,12 +119,11 @@ const HoverSidebar: React.FC<HoverSidebarProps> = ({
   }, []);
   
   useEffect(() => {
-    // Update active tab when currentPage changes
-    const matchingItem = NAVIGATION_ITEMS.find(item => item.tab === currentPage);
-    if (matchingItem) {
-      setActiveTab(matchingItem.id);
+    // Update global navigation state when currentPage prop changes (for initial sync)
+    if (currentPage && currentPage !== activePage) {
+      navigateHomeTab(currentPage);
     }
-  }, [currentPage]);
+  }, [currentPage, activePage, navigateHomeTab]);
   
   useEffect(() => {
     // Handle hover detection on the edge of the screen
@@ -163,14 +167,21 @@ const HoverSidebar: React.FC<HoverSidebarProps> = ({
   };
 
   const handleNavigationClick = (item: NavigationItem) => {
-    setActiveTab(item.id);
+    console.log(`[HoverSidebar] Navigation clicked: ${item.tab}, current activePage: ${activePage}`);
+    
+    // Update global navigation state using the navigation hook
+    navigateHomeTab(item.tab);
+    console.log(`[HoverSidebar] Called navigateHomeTab with: ${item.tab}`);
     
+    // Special case for ankiclinic which requires a page navigation
     if (item.id === 'ankiclinic') {
-      console.log(`======== Anki Clinic clicked ${new Date().toISOString()} ========`);
+      console.log(`[HoverSidebar] Ankiclinic requires page navigation`);
       router.push('/ankiclinic');
-    } else {
-      onTabChange(item.tab);
     }
+    
+    // No need to call onTabChange anymore since the global state update
+    // will trigger a re-render in the HomePage component
+    // This was causing duplicate state updates and unexpected behavior
   };
 
   const handleTaskCompletion = async (activityId: string, taskIndex: number, completed: boolean) => {
diff --git a/hooks/useUserInfo.ts b/hooks/useUserInfo.ts
index 19df0c3f9318d4ad168bfd918d5ba8d7b673f32e..b70aa963656c3adc495580166c8e222ff51746f3 100644
--- a/hooks/useUserInfo.ts
+++ b/hooks/useUserInfo.ts
@@ -1,4 +1,4 @@
-import { useState, useCallback, useEffect, useRef } from "react";
+import { useState, useCallback, useEffect, useRef, useMemo } from "react";
 import toast from "react-hot-toast";
 import { useUser as useClerkUser } from "@clerk/nextjs";
 import { useUser } from "@/store/selectors";
@@ -28,27 +28,105 @@ interface UseUserInfoReturn {
   unlockGame: () => Promise<void>;
   createNewUser: (data: { firstName: string; bio?: string }) => Promise<UserInfo>;
   isSubscribed: boolean;
+  hasSeenIntroVideo: boolean;
+  setHasSeenIntroVideo: (hasSeenVideo: boolean) => Promise<void>;
 }
 
 export const useUserInfo = (): UseUserInfoReturn => {
   const { user, isSignedIn, isLoaded } = useClerkUser();
-  const { setIsSubscribed, refreshUserInfo, userInfo } = useUser();
+  const { 
+    userInfo,
+    isSubscribed,
+    setIsSubscribed,
+    refreshUserInfo,
+    setHasSeenIntroVideo
+  } = useUser();
   const [isLoading, setIsLoading] = useState(true);
   const hasInitialized = useRef(false);
+  const fetchTimeoutRef = useRef<NodeJS.Timeout | null>(null);
+  const perfTrackingRef = useRef({
+    fetchStartTime: 0,
+    lastRefreshTime: 0,
+    fetchCount: 0
+  });
   
   const [referrals, setReferrals] = useState<Referral[]>([]);
 
+  // Get hasSeenIntroVideo from userInfo.onboardingInfo
+  const hasSeenIntroVideo = useMemo(() => {
+    const value = userInfo?.onboardingInfo?.hasSeenIntroVideo || false;
+    // Only log if the value changes from the previous render
+    return value;
+  }, [userInfo]);
+
+  // Debounced fetch function to prevent multiple rapid refreshes
+  const debouncedFetchUserInfo = useCallback(async () => {
+    // Clear any existing timeout
+    if (fetchTimeoutRef.current) {
+      clearTimeout(fetchTimeoutRef.current);
+    }
+    
+    // Set a new timeout
+    fetchTimeoutRef.current = setTimeout(async () => {
+      if (!isSignedIn) {
+        setIsLoading(false);
+        return;
+      }
+      
+      try {
+        setIsLoading(true);
+        
+        // Track performance
+        perfTrackingRef.current.fetchStartTime = Date.now();
+        perfTrackingRef.current.fetchCount++;
+        console.log(`[useUserInfo] Starting debounced fetch #${perfTrackingRef.current.fetchCount}`);
+        
+        // Refresh user info in store
+        await refreshUserInfo();
+        
+        // Log performance
+        const fetchTime = Date.now() - perfTrackingRef.current.fetchStartTime;
+        console.log(`[useUserInfo] Debounced fetch completed in ${fetchTime}ms`);
+        
+        // Track time since last refresh
+        const timeSinceLastRefresh = perfTrackingRef.current.lastRefreshTime ? 
+          Date.now() - perfTrackingRef.current.lastRefreshTime : null;
+        if (timeSinceLastRefresh) {
+          console.log(`[useUserInfo] Time since last refresh: ${timeSinceLastRefresh}ms`);
+        }
+        perfTrackingRef.current.lastRefreshTime = Date.now();
+        
+      } catch (error) {
+        console.error('[useUserInfo] Failed to fetch user info:', error);
+      } finally {
+        setIsLoading(false);
+      }
+      
+      fetchTimeoutRef.current = null;
+    }, 300); // 300ms debounce
+  }, [isSignedIn, refreshUserInfo]);
+
   const fetchUserInfo = useCallback(async () => {
     if (!isSignedIn) {
       setIsLoading(false);
       return;
     }
+    
     try {
       setIsLoading(true);
+      
+      // Track performance
+      const fetchStartTime = Date.now();
+      console.log('[useUserInfo] Starting initial fetch');
+      
       // Refresh user info in store
       await refreshUserInfo();
+      
+      console.log(`[useUserInfo] Initial fetch completed in ${Date.now() - fetchStartTime}ms`);
+      perfTrackingRef.current.lastRefreshTime = Date.now();
+      
     } catch (error) {
-      console.error('Failed to fetch user info:', error);
+      console.error('[useUserInfo] Failed to fetch user info:', error);
     } finally {
       setIsLoading(false);
     }
@@ -56,11 +134,25 @@ export const useUserInfo = (): UseUserInfoReturn => {
 
   useEffect(() => {
     if (user?.id && !hasInitialized.current) {
+      console.log('[useUserInfo] Initializing with user ID:', user.id);
       hasInitialized.current = true;
-      fetchUserInfo();
+      const initializeStartTime = Date.now();
+      
+      fetchUserInfo().then(() => {
+        console.log(`[useUserInfo] Initialization completed in ${Date.now() - initializeStartTime}ms`);
+      });
     }
   }, [user?.id, fetchUserInfo]);
 
+  // Clean up timeout on unmount
+  useEffect(() => {
+    return () => {
+      if (fetchTimeoutRef.current) {
+        clearTimeout(fetchTimeoutRef.current);
+      }
+    };
+  }, []);
+
   // Check if user is in 14-day trial period directly from userInfo
   const isNewUserTrial = userInfo?.createdAt ? isWithin14Days(new Date(userInfo.createdAt)) : false;
 
@@ -74,14 +166,14 @@ export const useUserInfo = (): UseUserInfoReturn => {
 
       if (!response.ok) throw new Error();
 
-      // Refresh userInfo to update all components
-      await refreshUserInfo();
+      // Use debounced refresh
+      debouncedFetchUserInfo();
 
     } catch (error) {
       console.error('Failed to update score:', error);
       toast.error('Failed to update score');
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const updateNotificationPreference = useCallback(
     async (preference: boolean) => {
@@ -97,13 +189,13 @@ export const useUserInfo = (): UseUserInfoReturn => {
         }
 
         const data = await response.json();
-        refreshUserInfo();
+        debouncedFetchUserInfo();
       } catch (err) {
         toast.error("Failed to update notification preferences");
         throw err;
       }
     },
-    [refreshUserInfo]
+    [debouncedFetchUserInfo]
   );
 
   const updateUserProfile = useCallback(
@@ -120,13 +212,13 @@ export const useUserInfo = (): UseUserInfoReturn => {
         }
 
         const updatedData = await response.json();
-        refreshUserInfo();
+        debouncedFetchUserInfo();
       } catch (err) {
         toast.error("Failed to update profile");
         throw err;
       }
     },
-    [refreshUserInfo]
+    [debouncedFetchUserInfo]
   );
 
   const incrementScore = useCallback(async () => {
@@ -142,12 +234,12 @@ export const useUserInfo = (): UseUserInfoReturn => {
       }
 
       const data = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
     } catch (err) {
       toast.error("Failed to increment score");
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const decrementScore = useCallback(async () => {
     try {
@@ -162,24 +254,24 @@ export const useUserInfo = (): UseUserInfoReturn => {
       }
 
       const data = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
     } catch (err) {
       toast.error("Failed to decrement score");
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const fetchReferrals = useCallback(async () => {
     try {
       const response = await fetch("/api/referrals");
       if (!response.ok) throw new Error("Failed to fetch referrals");
       const data = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
     } catch (err) {
       toast.error("Failed to load referrals");
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const createReferral = useCallback(async (data: { friendEmail: string }) => {
     try {
@@ -194,14 +286,14 @@ export const useUserInfo = (): UseUserInfoReturn => {
       }
 
       const newReferral = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
 
       toast.success("Referral sent successfully");
     } catch (err) {
       toast.error("Failed to create referral");
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const checkHasReferrals = useCallback(async () => {
     try {
@@ -235,14 +327,14 @@ export const useUserInfo = (): UseUserInfoReturn => {
       }
 
       const data = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
 
       toast.success('Welcome to the Anki Clinic!');
     } catch (err) {
       toast.error('Failed to unlock the Anki Clinic');
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   const createNewUser = useCallback(async (data: { firstName: string; bio?: string }) => {
     try {
@@ -257,24 +349,18 @@ export const useUserInfo = (): UseUserInfoReturn => {
       }
 
       const newUserInfo = await response.json();
-      refreshUserInfo();
+      debouncedFetchUserInfo();
       return newUserInfo;
     } catch (err) {
       toast.error("Failed to create user profile");
       throw err;
     }
-  }, [refreshUserInfo]);
+  }, [debouncedFetchUserInfo]);
 
   return {
-    userInfo: userInfo as UserInfo | null,
+    userInfo,
     isLoading,
-    isSubscribed: 
-      userInfo?.subscriptionType?.startsWith('Gold') || 
-      userInfo?.subscriptionType === 'gold' || 
-      userInfo?.subscriptionType === 'premium' ||
-      userInfo?.subscriptionType?.includes('_Trial') || 
-      isNewUserTrial || 
-      false,
+    error: null,
     updateScore,
     updateNotificationPreference,
     updateUserProfile,
@@ -288,7 +374,9 @@ export const useUserInfo = (): UseUserInfoReturn => {
     checkHasReferrals,
     unlockGame,
     createNewUser,
-    error: null
+    isSubscribed: !!userInfo?.hasPaid || isNewUserTrial,
+    hasSeenIntroVideo,
+    setHasSeenIntroVideo
   };
 };
 
diff --git a/lib/ai-completion.ts b/lib/ai-completion.ts
index 0654c3c938f3994e075e21ce51ec27e888967b17..fb55bd8fcc9bda3007e2e9b735309b522e87c1f8 100644
--- a/lib/ai-completion.ts
+++ b/lib/ai-completion.ts
@@ -4,7 +4,7 @@ const openai = new OpenAI({
   apiKey: process.env.OPENAI_API_KEY,
 });
 
-const DEFAULT_SYSTEM_PROMPT = `You are Kalypso, a friendly AI cat tutor. Be encouraging but direct, keep responses under 100 words.`;
+const DEFAULT_SYSTEM_PROMPT = "You are Kalypso, a friendly AI cat tutor. Be encouraging but direct, keep responses under 100 words.";
 
 export async function generateCompletion(prompt: string, systemMessage: string = DEFAULT_SYSTEM_PROMPT) {
   try {
@@ -34,27 +34,62 @@ export async function generateCompletion(prompt: string, systemMessage: string =
 }
 
 export async function generateCompletionMini(prompt: string, systemMessage: string = DEFAULT_SYSTEM_PROMPT) {
-  try {
-    const messages = [
-      {
-        role: "system" as const,
-        content: systemMessage
-      },
-      {
-        role: "user" as const,
-        content: prompt
-      }
-    ];
+  const MAX_RETRIES = 2;
+  let retryCount = 0;
+  let lastError = null;
 
-    const completion = await openai.chat.completions.create({
-      model: "gpt-4o-mini",
-      messages,
-      temperature: 0.7,
-    });
+  while (retryCount <= MAX_RETRIES) {
+    try {
+      const messages = [
+        {
+          role: "system" as const,
+          content: systemMessage
+        },
+        {
+          role: "user" as const,
+          content: prompt
+        }
+      ];
 
-    return completion.choices[0]?.message?.content || null;
-  } catch (error) {
-    console.error('Error generating AI completion:', error);
-    throw error;
+      console.log(`[AI-COMPLETION] Attempt ${retryCount + 1}/${MAX_RETRIES + 1} to generate completion`);
+      
+      const completion = await openai.chat.completions.create({
+        model: "gpt-4o-mini",
+        messages,
+        temperature: 0.7,
+      });
+
+      return completion.choices[0]?.message?.content || null;
+    } catch (error) {
+      lastError = error;
+      retryCount++;
+      
+      // Check if this is a rate limit error
+      const isRateLimit = error instanceof Error && 
+        (error.message.includes('Rate limit') || 
+         error.message.includes('429') ||
+         error.message.includes('Too Many Requests'));
+      
+      if (isRateLimit && retryCount <= MAX_RETRIES) {
+        // Exponential backoff with jitter
+        const delay = Math.min(1000 * (2 ** retryCount) + Math.random() * 1000, 10000);
+        console.log(`[AI-COMPLETION] Rate limit hit, retrying in ${Math.round(delay/1000)}s (attempt ${retryCount}/${MAX_RETRIES})`);
+        await new Promise(resolve => setTimeout(resolve, delay));
+        continue;
+      }
+      
+      console.error('Error generating AI completion:', error);
+      
+      if (retryCount <= MAX_RETRIES) {
+        console.log(`[AI-COMPLETION] Retrying after error (attempt ${retryCount}/${MAX_RETRIES})`);
+        // Simple delay before retry for non-rate-limit errors
+        await new Promise(resolve => setTimeout(resolve, 1000));
+        continue;
+      }
+      
+      throw error;
+    }
   }
+  
+  throw lastError;
 }
\ No newline at end of file
diff --git a/public/audio/cat-meow.mp3 b/public/audio/cat-meow.mp3
new file mode 100644
index 0000000000000000000000000000000000000000..d3da91ad2b08aef9a76a73a869573742782fb600
Binary files /dev/null and b/public/audio/cat-meow.mp3 differ
diff --git a/public/KalypsoPicture.png b/public/kalypso/KalypsoPicture.png
similarity index 100%
rename from public/KalypsoPicture.png
rename to public/kalypso/KalypsoPicture.png
diff --git a/public/Kalypsoapproval.gif b/public/kalypso/Kalypsoapproval.gif
similarity index 100%
rename from public/Kalypsoapproval.gif
rename to public/kalypso/Kalypsoapproval.gif
diff --git a/public/Kalypsodistressed.gif b/public/kalypso/Kalypsodistressed.gif
similarity index 100%
rename from public/Kalypsodistressed.gif
rename to public/kalypso/Kalypsodistressed.gif
diff --git a/public/Kalypsotumble.gif b/public/kalypso/Kalypsotumble.gif
similarity index 100%
rename from public/Kalypsotumble.gif
rename to public/kalypso/Kalypsotumble.gif
diff --git a/public/kalypotesting.png b/public/kalypso/kalypotesting.png
similarity index 100%
rename from public/kalypotesting.png
rename to public/kalypso/kalypotesting.png
diff --git a/public/kalypsocalendar.png b/public/kalypso/kalypsocalendar.png
similarity index 100%
rename from public/kalypsocalendar.png
rename to public/kalypso/kalypsocalendar.png
diff --git a/public/kalypsodancing.gif b/public/kalypso/kalypsodancing.gif
similarity index 100%
rename from public/kalypsodancing.gif
rename to public/kalypso/kalypsodancing.gif
diff --git a/public/kalypsodiagnostic.png b/public/kalypso/kalypsodiagnostic.png
similarity index 100%
rename from public/kalypsodiagnostic.png
rename to public/kalypso/kalypsodiagnostic.png
diff --git a/public/kalypsoend.gif b/public/kalypso/kalypsoend.gif
similarity index 100%
rename from public/kalypsoend.gif
rename to public/kalypso/kalypsoend.gif
diff --git a/public/kalypsofloating.gif b/public/kalypso/kalypsofloating.gif
similarity index 100%
rename from public/kalypsofloating.gif
rename to public/kalypso/kalypsofloating.gif
diff --git a/public/kalypsofloatinghappy.gif b/public/kalypso/kalypsofloatinghappy.gif
similarity index 100%
rename from public/kalypsofloatinghappy.gif
rename to public/kalypso/kalypsofloatinghappy.gif
diff --git a/public/kalypsohi.gif b/public/kalypso/kalypsohi.gif
similarity index 100%
rename from public/kalypsohi.gif
rename to public/kalypso/kalypsohi.gif
diff --git a/public/kalypsostart.gif b/public/kalypso/kalypsostart.gif
similarity index 100%
rename from public/kalypsostart.gif
rename to public/kalypso/kalypsostart.gif
diff --git a/public/kalypsotalk.gif b/public/kalypso/kalypsotalk.gif
similarity index 100%
rename from public/kalypsotalk.gif
rename to public/kalypso/kalypsotalk.gif
diff --git a/public/kalypsoteaching.png b/public/kalypso/kalypsoteaching.png
similarity index 100%
rename from public/kalypsoteaching.png
rename to public/kalypso/kalypsoteaching.png
diff --git a/public/kalypsothumbs.gif b/public/kalypso/kalypsothumbs.gif
similarity index 100%
rename from public/kalypsothumbs.gif
rename to public/kalypso/kalypsothumbs.gif
diff --git a/public/kalypsotyping.gif b/public/kalypso/kalypsotyping.gif
similarity index 100%
rename from public/kalypsotyping.gif
rename to public/kalypso/kalypsotyping.gif
diff --git a/public/kalypsowait.gif b/public/kalypso/kalypsowait.gif
similarity index 100%
rename from public/kalypsowait.gif
rename to public/kalypso/kalypsowait.gif
diff --git a/public/kalypsoyouate.gif b/public/kalypso/kalypsoyouate.gif
similarity index 100%
rename from public/kalypsoyouate.gif
rename to public/kalypso/kalypsoyouate.gif
diff --git a/store/selectors.ts b/store/selectors.ts
index cc599cbee4507950afc476dfaa08c86930d04aec..ab17c2ab06f1cd92ffe9b210c9d63b30edb7afe2 100644
--- a/store/selectors.ts
+++ b/store/selectors.ts
@@ -10,17 +10,29 @@ export const useUI = () => {
   const theme = useUIStore((state) => state.theme)
   const window = useUIStore((state) => state.window)
   const currentRoute = useUIStore((state) => state.currentRoute)
+  const navigation = useUIStore((state) => state.navigation)
+  const context = useUIStore((state) => state.context)
   const setTheme = useUIStore((state) => state.setTheme)
   const setWindowSize = useUIStore((state) => state.setWindowSize)
   const setCurrentRoute = useUIStore((state) => state.setCurrentRoute)
+  const setPage = useUIStore((state) => state.setPage)
+  const setSubSection = useUIStore((state) => state.setSubSection)
+  const setContext = useUIStore((state) => state.setContext)
+  const clearContext = useUIStore((state) => state.clearContext)
   
   return {
     theme,
     window,
     currentRoute,
+    navigation,
+    context,
     setTheme,
     setWindowSize,
     setCurrentRoute,
+    setPage,
+    setSubSection,
+    setContext,
+    clearContext,
   }
 }
 
@@ -28,6 +40,83 @@ export const useTheme = () => useUIStore(state => state.theme)
 export const useWindowSize = () => useUIStore(state => state.window)
 export const useCurrentRoute = () => useUIStore(state => state.currentRoute)
 
+/* --- Navigation Selector ---- */
+export const useNavigation = () => {
+  const navigation = useUIStore((state) => state.navigation)
+  const context = useUIStore((state) => state.context)
+  const setPage = useUIStore((state) => state.setPage)
+  const setSubSection = useUIStore((state) => state.setSubSection)
+  const setContext = useUIStore((state) => state.setContext)
+  const clearContext = useUIStore((state) => state.clearContext)
+  
+  // Navigate to a section within the app
+  const navigateToPage = (page: string) => {
+    console.log(`[useNavigation] navigateToPage called with: ${page}, current page: ${navigation.page}`);
+    setPage(page);
+    console.log(`[useNavigation] navigateToPage completed, page should now be: ${page}`);
+  };
+  
+  // Update sub-section without changing page
+  const updateSubSection = (updates: Record<string, any>) => {
+    console.log(`[useNavigation] updateSubSection called with:`, updates);
+    setSubSection(updates);
+  };
+  
+  // Combined navigation with context update
+  const navigateWithContext = (page: string, contextData: Record<string, any>) => {
+    console.log(`[useNavigation] navigateWithContext called with page: ${page}`);
+    setPage(page);
+    setContext(contextData);
+  };
+  
+  // Home page specific navigation
+  const navigateHomeTab = (tab: string, additionalContext?: Record<string, any>) => {
+    console.log(`[useNavigation] navigateHomeTab called with: ${tab}, current page: ${navigation.page}`);
+    setPage(tab);
+    if (additionalContext) {
+      setContext(additionalContext);
+    }
+    console.log(`[useNavigation] navigateHomeTab completed, page should now be: ${tab}`);
+  };
+  
+  // Navigate to ATS content
+  const navigateToATS = (subject: string, contentType: string, additionalContext?: Record<string, any>) => {
+    setPage('ats');
+    setSubSection({
+      concept: subject,
+      contentType,
+      ...additionalContext
+    });
+  };
+  
+  // Reset navigation state
+  const resetNavigation = () => {
+    setPage('KalypsoAI');
+    clearContext();
+  };
+  
+  return {
+    // Current state
+    activePage: navigation.page,
+    subSection: navigation.subSection,
+    context,
+    
+    // Navigation actions
+    navigateToPage,
+    updateSubSection,
+    navigateWithContext,
+    navigateHomeTab,
+    navigateToATS,
+    resetNavigation,
+    
+    // Direct state setters (for advanced usage)
+    setPage,
+    setSubSection,
+    setContext,
+    clearContext
+  };
+}
+
 /* --- User Selector ---- */
 // Consolidated user selector that provides all user-related state and actions
 export const useUser = () => {
@@ -57,6 +146,10 @@ export const useUser = () => {
   const isSubscribed = useUserStore((state) => state.isSubscribed)
   const setIsSubscribed = useUserStore((state) => state.setIsSubscribed)
   
+  // Explicitly access hasSeenIntroVideo from onboardingInfo
+  const hasSeenIntroVideo = userInfo?.onboardingInfo?.hasSeenIntroVideo || false
+  const setHasSeenIntroVideo = useUserStore((state) => state.setHasSeenIntroVideo)
+  
   // User stats state and actions
   const coins = useUserStore((state) => state.coins)
   const statsLoading = useUserStore((state) => state.statsLoading)
@@ -90,6 +183,8 @@ export const useUser = () => {
     userInfo,
     isSubscribed,
     setIsSubscribed,
+    hasSeenIntroVideo,
+    setHasSeenIntroVideo,
     
     // Stats
     coins,
@@ -100,6 +195,15 @@ export const useUser = () => {
   }
 }
 
+// Dedicated selector for hasSeenIntroVideo
+export const useHasSeenIntroVideo = () => {
+  const userInfo = useUserStore((state) => state.userInfo)
+  const hasSeenIntroVideo = userInfo?.onboardingInfo?.hasSeenIntroVideo || false
+  const setHasSeenIntroVideo = useUserStore((state) => state.setHasSeenIntroVideo)
+  
+  return { hasSeenIntroVideo, setHasSeenIntroVideo }
+}
+
 /* --- Game Selector ---- */
 // Consolidated game selector that provides all game-related state and actions
 export const useGame = () => {
diff --git a/store/slices/uiSlice.ts b/store/slices/uiSlice.ts
index f694bb6d293941c4112adfc1694743b66292190b..dc3945e56ee0906ee96c5dbe25db7fddcdc5ef8b 100644
--- a/store/slices/uiSlice.ts
+++ b/store/slices/uiSlice.ts
@@ -1,5 +1,5 @@
 import { create } from 'zustand'
-import { devtools } from 'zustand/middleware'
+import { devtools, persist } from 'zustand/middleware'
 
 
 /* --- Types ---- */
@@ -16,42 +16,113 @@ interface UIState {
   window: WindowSize
   currentRoute: string
   theme: ThemeType
+  
+  // New navigation state
+  navigation: {
+    page: string
+    subSection: Record<string, any>
+  }
+  
+  // Content context
+  context: Record<string, any>
 }
 
 interface UIActions {
   setWindowSize: (size: WindowSize) => void
   setCurrentRoute: (route: string) => void
   setTheme: (theme: ThemeType) => void
+  
+  // New navigation actions
+  setPage: (page: string) => void
+  setSubSection: (updates: Record<string, any>) => void
+  setContext: (updates: Record<string, any>) => void
+  clearContext: () => void
 }
 
 export type UISlice = UIState & UIActions
 
 export const useUIStore = create<UISlice>()(
-  devtools(
-    (set) => ({
-      //***********************************************************************************************//
-      //************************************** UI State ***********************************************//
-      //***********************************************************************************************//
-      window: {
-        width: typeof window !== 'undefined' ? window.innerWidth : 1920,
-        height: typeof window !== 'undefined' ? window.innerHeight : 1080,
-        isDesktop: true
-      },
-      currentRoute: '/',
-      theme: 'cyberSpace',
-
-      // UI Actions
-      setWindowSize: (size) => set({ window: size }),
-      setCurrentRoute: (route) => set({ currentRoute: route }),
-      setTheme: (theme) => {
-        set({ theme })
-        if (typeof window !== 'undefined') {
-          localStorage.setItem('theme', theme)
-        }
-      },
-    }),
+  persist(
+    devtools(
+      (set) => ({
+        //***********************************************************************************************//
+        //************************************** UI State ***********************************************//
+        //***********************************************************************************************//
+        window: {
+          width: typeof window !== 'undefined' ? window.innerWidth : 1920,
+          height: typeof window !== 'undefined' ? window.innerHeight : 1080,
+          isDesktop: true
+        },
+        currentRoute: '/',
+        theme: 'cyberSpace',
+        
+        // Initialize navigation state
+        navigation: {
+          page: 'KalypsoAI',
+          subSection: {}
+        },
+        
+        // Initialize content context
+        context: {},
+
+        // UI Actions
+        setWindowSize: (size) => set({ window: size }),
+        setCurrentRoute: (route) => set({ currentRoute: route }),
+        setTheme: (theme) => {
+          set({ theme })
+          if (typeof window !== 'undefined') {
+            localStorage.setItem('theme', theme)
+          }
+        },
+        
+        // Navigation actions
+        setPage: (page) => {
+          console.log(`[uiSlice] setPage called with: ${page}`);
+          // Only update if the page is actually changing
+          set((state) => {
+            if (state.navigation.page === page) {
+              console.log(`[uiSlice] setPage - no change needed, page already: ${page}`);
+              return {}; // Return empty object = no state change
+            }
+            console.log(`[uiSlice] setPage - updating from ${state.navigation.page} to ${page}`);
+            return {
+              navigation: {
+                ...state.navigation,
+                page
+              }
+            };
+          });
+        },
+        
+        setSubSection: (updates) => set((state) => ({
+          navigation: {
+            ...state.navigation,
+            subSection: {
+              ...state.navigation.subSection,
+              ...updates
+            }
+          }
+        })),
+        
+        setContext: (updates) => set((state) => ({
+          context: {
+            ...state.context,
+            ...updates
+          }
+        })),
+        
+        clearContext: () => set({ context: {} })
+      }),
+      {
+        name: 'ui-store'
+      }
+    ),
     {
-      name: 'ui-store'
+      name: 'ui-navigation-storage',
+      partialize: (state) => ({
+        navigation: state.navigation,
+        context: state.context
+      })
     }
   )
 )
diff --git a/store/slices/userSlice.ts b/store/slices/userSlice.ts
index a316d7316d62ff7230cbaadd29ac9c285a42d806..3730d9fabfee836971bb8ece67d2576a7b76655d 100644
--- a/store/slices/userSlice.ts
+++ b/store/slices/userSlice.ts
@@ -1,7 +1,16 @@
 import { create } from 'zustand';
 import { devtools } from 'zustand/middleware';
-import { UserInfo } from '@/types/user';
-import { OnboardingInfo } from '@/types';
+import type { UserInfo } from '@/types/user';
+import type { OnboardingInfo } from '../types';
+import { 
+  ONBOARDING_STEPS,
+  DEFAULT_ONBOARDING_INFO,
+  REQUIRED_STEPS 
+} from '../types';
+import type { 
+  OnboardingStep,
+  ValidationResult
+} from '../types';
 
 //========================= Helpers ===============================
 // Helper function to check if a date is within 14 days of now
@@ -79,7 +88,7 @@ interface UserState {
 
 interface UserActions {
   // Profile actions
-  updateProfile: (updates: any) => Promise<void>;
+  updateProfile: (updates: Partial<UserProfile & { onboardingInfo?: Partial<OnboardingInfo> }>) => Promise<void>;
   setCompletedSteps: (steps: string[]) => void;
   addCompletedStep: (step: string) => void;
   
@@ -95,6 +104,7 @@ interface UserActions {
   // User info actions
   refreshUserInfo: () => Promise<void>;
   setIsSubscribed: (status: boolean) => void;
+  setHasSeenIntroVideo: (hasSeenVideo: boolean) => Promise<void>;
   
   // Stats actions
   updateCoins: (amount: number) => Promise<void>;
@@ -129,7 +139,7 @@ export const useUserStore = create<UserState & UserActions>()(
     },
     lastVisitedRoute: '/',
     
-    // User info state
+    // User info state - this is the single source of truth
     userInfo: null,
     isSubscribed: false,
     
@@ -285,22 +295,8 @@ export const useUserStore = create<UserState & UserActions>()(
         return;
       }
       
-      // Create a typed version of onboardingInfo to ensure all required fields are present
-      const currentOnboardingInfo = userInfo.onboardingInfo || {
-        currentStep: 0,
-        onboardingComplete: false,
-        firstName: null,
-        college: null,
-        isNonTraditional: null,
-        isCanadian: null,
-        gpa: null,
-        currentMcatScore: null,
-        hasNotTakenMCAT: null,
-        mcatAttemptNumber: null,
-        targetMedSchool: null,
-        targetScore: null,
-        referralEmail: null
-      };
+      // Use DEFAULT_ONBOARDING_INFO instead of inline object
+      const currentOnboardingInfo = userInfo.onboardingInfo || { ...DEFAULT_ONBOARDING_INFO };
       
       // Create updated userInfo with the new onboardingComplete value
       const updatedUserInfo = {
@@ -366,46 +362,52 @@ export const useUserStore = create<UserState & UserActions>()(
     
     refreshUserInfo: async () => {
       try {
-        // Set detailed loading states
+        console.log('[UserStore DEBUG] Starting refreshUserInfo');
         set({ 
           profileLoading: true, 
           statsLoading: true, 
           error: null 
         });
         
-        // Track fetch start time for performance monitoring
-        const fetchStartTime = performance.now();
-        
-        // Batch all fetch requests together
+        console.log('[UserStore DEBUG] Making API requests for user info');
         const [userInfoResponse, profileResponse] = await Promise.all([
           fetch('/api/user-info'),
           fetch('/api/user-info/profile')
         ]);
 
-        // Handle failed user info response
+        console.log('[UserStore DEBUG] API responses received:', {
+          userInfoStatus: userInfoResponse.status,
+          profileStatus: profileResponse.status
+        });
+
         if (!userInfoResponse.ok) {
+          console.error('[UserStore DEBUG] User info fetch failed:', userInfoResponse.status, userInfoResponse.statusText);
           throw new Error(`Failed to fetch user info: ${userInfoResponse.status} ${userInfoResponse.statusText}`);
         }
 
         const userInfo = await userInfoResponse.json();
+        console.log('[UserStore DEBUG] Received userInfo:', {
+          hasOnboardingInfo: !!userInfo.onboardingInfo,
+          hasSeenIntroVideo: userInfo.onboardingInfo?.hasSeenIntroVideo,
+          userId: userInfo.userId,
+          subscriptionType: userInfo.subscriptionType
+        });
         
-        // Check if user is in 14-day free trial period
         const isNewUserTrial = userInfo.createdAt ? isWithin14Days(new Date(userInfo.createdAt)) : false;
 
-        // Prepare atomic state update with only changed values
-        const updates: Partial<UserState> = {
-          userInfo,
+        // Create clean updates object with proper typing
+        const baseUpdates: Partial<UserState> = {
           error: null,
-          version: CURRENT_VERSION
+          version: CURRENT_VERSION,
+          userInfo: userInfo // Always include userInfo as it's our source of truth
         };
 
-        // Only update coins if changed
+        // Add coins if changed
         if (userInfo.score !== get().coins) {
-          updates.coins = userInfo.score || 0;
+          baseUpdates.coins = userInfo.score || 0;
         }
 
-        // Match main branch behavior by including trial subscriptions
-        // Also include users in their 14-day trial period
+        // Add subscription status if changed
         const newSubStatus = 
           userInfo.subscriptionType === 'gold' || 
           userInfo.subscriptionType === 'premium' ||
@@ -415,17 +417,24 @@ export const useUserStore = create<UserState & UserActions>()(
           false;
           
         if (newSubStatus !== get().isSubscribed) {
-          updates.isSubscribed = newSubStatus;
+          baseUpdates.isSubscribed = newSubStatus;
         }
 
-        // Handle profile data if available
+        // Handle profile updates if available
         if (profileResponse.ok) {
+          console.log('[UserStore DEBUG] Processing profile response');
           const profileData = await profileResponse.json();
+          console.log('[UserStore DEBUG] Profile data:', { 
+            hasProfilePhoto: !!profileData.profilePhoto,
+            firstName: profileData.firstName,
+            completedStepsLength: profileData.completedSteps?.length
+          });
+          
           const currentProfile = get().profile;
           
-          // Only update profile fields that have changed
           if (JSON.stringify(currentProfile) !== JSON.stringify(profileData)) {
-            Object.assign(updates, {
+            console.log('[UserStore DEBUG] Profile data changed, updating');
+            Object.assign(baseUpdates, {
               profile: profileData,
               completedSteps: profileData.completedSteps || [],
               studyPreferences: profileData.studyPreferences || {
@@ -443,36 +452,30 @@ export const useUserStore = create<UserState & UserActions>()(
               lastVisitedRoute: profileData.lastVisitedRoute || '/',
               isProfileComplete: (profileData.completedSteps || []).length >= 3
             });
+          } else {
+            console.log('[UserStore DEBUG] Profile data unchanged');
           }
         } else {
-          console.warn(`[UserStore] Profile fetch failed: ${profileResponse.status} ${profileResponse.statusText}`);
-        }
-        
-        // Check if we're about to set onboardingComplete at root level (bug prevention)
-        if ('onboardingComplete' in updates) {
-          // @ts-ignore - Intentionally modifying object to prevent a bug
-          delete updates.onboardingComplete;
+          console.warn(`[UserStore DEBUG] Profile fetch failed: ${profileResponse.status} ${profileResponse.statusText}`);
         }
         
-        // Complete the loading states
-        updates.statsLoading = false;
-        updates.profileLoading = false;
+        console.log('[UserStore DEBUG] Applying updates to store:', Object.keys(baseUpdates));
+
+        // IMPORTANT: Set profileLoading to false to ensure the spinner stops
+        baseUpdates.profileLoading = false;
+        baseUpdates.statsLoading = false;
         
-        // Finally, apply all updates in a single atomic state update
-        set(updates);
+        set(baseUpdates);
+        console.log('[UserStore DEBUG] Store updates applied');
         
         return userInfo;
       } catch (error) {
-        console.error('[UserStore] Error in refreshUserInfo:', error);
-        
-        // Set detailed error state
+        console.error('[UserStore DEBUG] Error in refreshUserInfo:', error);
         set({ 
           error: error instanceof Error ? error.message : 'Failed to refresh user info',
           statsLoading: false,
           profileLoading: false
         });
-        
-        // Re-throw to allow handling by callers
         throw error;
       }
     },
@@ -481,6 +484,69 @@ export const useUserStore = create<UserState & UserActions>()(
       set({ isSubscribed: status });
     },
     
+    setHasSeenIntroVideo: async (hasSeenVideo: boolean) => {
+      const previousState = get().userInfo;
+      
+      try {
+        if (!previousState) {
+          throw new Error('Cannot update hasSeenIntroVideo: No user info available');
+        }
+        
+        // Ensure we have valid onboarding info with hasSeenIntroVideo as boolean
+        const currentOnboardingInfo = {
+          ...DEFAULT_ONBOARDING_INFO,
+          ...(previousState.onboardingInfo || {}),
+          // Make hasSeenIntroVideo a boolean
+          hasSeenIntroVideo: !!(previousState.onboardingInfo?.hasSeenIntroVideo)
+        };
+        
+        // Create the update with type safety
+        const updatedUserInfo = {
+          ...previousState,
+          onboardingInfo: {
+            ...currentOnboardingInfo,
+            // hasSeenVideo is already a boolean because of the function parameter type
+            hasSeenIntroVideo: hasSeenVideo
+          }
+        };
+
+        // Single atomic update to prevent duplicate state
+        set((state) => ({
+          ...state,
+          userInfo: updatedUserInfo
+        }));
+
+        const response = await fetch('/api/user-info', {
+          method: 'PUT',
+          headers: { 'Content-Type': 'application/json' },
+          body: JSON.stringify({
+            onboardingInfo: updatedUserInfo.onboardingInfo
+          })
+        });
+
+        if (!response.ok) {
+          throw new Error(`Failed to update hasSeenIntroVideo: ${response.status} ${response.statusText}`);
+        }
+
+        const serverResponse = await response.json();
+        
+        // Update with server response, maintaining only the necessary state
+        set((state) => ({
+          ...state,
+          userInfo: serverResponse
+        }));
+
+      } catch (error) {
+        console.error('[UserStore] Failed to update hasSeenIntroVideo:', error);
+        // Rollback to previous state
+        set((state) => ({
+          ...state,
+          userInfo: previousState
+        }));
+        throw error;
+      }
+    },
+    
     updateCoins: async (amount) => {
       try {
         const response = await fetch('/api/user/score', {
@@ -604,27 +670,21 @@ export const useUserStore = create<UserState & UserActions>()(
         
         // Process onboardingInfo updates
         if (updates.onboardingInfo && currentState.userInfo) {
-          const existingOnboardingInfo = currentState.userInfo.onboardingInfo || {
-            currentStep: 0,
-            onboardingComplete: false,
-            firstName: null,
-            college: null,
-            isNonTraditional: null,
-            isCanadian: null,
-            gpa: null,
-            currentMcatScore: null,
-            hasNotTakenMCAT: null,
-            mcatAttemptNumber: null,
-            targetMedSchool: null,
-            targetScore: null,
-            referralEmail: null
+          const existingOnboardingInfo = {
+            ...DEFAULT_ONBOARDING_INFO,
+            ...(currentState.userInfo.onboardingInfo || {}),
+            // Make hasSeenIntroVideo a boolean
+            hasSeenIntroVideo: !!(currentState.userInfo.onboardingInfo?.hasSeenIntroVideo)
           };
           
           updatedState.userInfo = {
             ...currentState.userInfo,
             onboardingInfo: {
               ...existingOnboardingInfo,
-              ...updates.onboardingInfo
+              ...updates.onboardingInfo,
+              // Ensure boolean type if present
+              ...(updates.onboardingInfo.hasSeenIntroVideo !== undefined ? 
+                { hasSeenIntroVideo: Boolean(updates.onboardingInfo.hasSeenIntroVideo) } : {})
             }
           };
         }
@@ -666,34 +726,6 @@ export const useUserStore = create<UserState & UserActions>()(
   }))
 );
 
-interface ValidationResult {
-  isValid: boolean;
-  missingFields: string[];
-  invalidFields: string[];
-  errors: string[];
-}
-
-// Constants for validation
-const ONBOARDING_STEPS = {
-  NAME: 1,
-  COLLEGE: 2,
-  ACADEMICS: 3,
-  GOALS: 4,
-  KALYPSO_DIALOGUE: 5,
-  REFERRAL: 6,
-  UNLOCK: 7
-} as const;
-
-const REQUIRED_STEPS = 3; // Minimum number of steps required for profile completion
-
-type OnboardingStep = typeof ONBOARDING_STEPS[keyof typeof ONBOARDING_STEPS];
-
-interface StepDependency {
-  step: OnboardingStep;
-  requires: OnboardingStep[];
-  validates: (info: OnboardingInfo) => boolean;
-}
-
 // Update validation logic to match main branch fields
 const STEP_DEPENDENCIES = {
   [ONBOARDING_STEPS.NAME]: {
@@ -737,21 +769,12 @@ const validateOnboardingState = (userInfo: UserInfo, profile: UserProfile | null
   
   // Validate all step dependencies
   for (const stepNum of Object.values(ONBOARDING_STEPS)) {
-    const dependency = STEP_DEPENDENCIES[stepNum];
+    const dependency = STEP_DEPENDENCIES[stepNum as OnboardingStep];
     const defaultOnboardingInfo: OnboardingInfo = {
-      currentStep: userInfo.onboardingInfo.currentStep ?? 0,
-      onboardingComplete: userInfo.onboardingInfo.onboardingComplete ?? false,
-      firstName: userInfo.onboardingInfo.firstName ?? null,
-      college: userInfo.onboardingInfo.college ?? null,
-      isNonTraditional: userInfo.onboardingInfo.isNonTraditional ?? null,
-      isCanadian: userInfo.onboardingInfo.isCanadian ?? null,
-      gpa: userInfo.onboardingInfo.gpa ?? null,
-      currentMcatScore: userInfo.onboardingInfo.currentMcatScore ?? null,
-      hasNotTakenMCAT: userInfo.onboardingInfo.hasNotTakenMCAT ?? null,
-      mcatAttemptNumber: userInfo.onboardingInfo.mcatAttemptNumber ?? null,
-      targetMedSchool: userInfo.onboardingInfo.targetMedSchool ?? null,
-      targetScore: userInfo.onboardingInfo.targetScore ?? null,
-      referralEmail: userInfo.onboardingInfo.referralEmail ?? null
+      ...DEFAULT_ONBOARDING_INFO,
+      ...userInfo.onboardingInfo,
+      // Make hasSeenIntroVideo a boolean
+      hasSeenIntroVideo: !!(userInfo.onboardingInfo.hasSeenIntroVideo)
     };
     if (!dependency.validates(defaultOnboardingInfo)) {
       return false;
diff --git a/store/types.ts b/store/types.ts
index c9ec56a0cbd359d8a755c2beb46ee7b08eb30259..1ef61e298a1758f79dfebef7c6538443fb9c17d2 100644
--- a/store/types.ts
+++ b/store/types.ts
@@ -10,6 +10,62 @@ export interface WindowSize {
 // Theme type used in UI slice
 export type ThemeType = 'cyberSpace' | 'sakuraTrees' | 'sunsetCity' | 'mykonosBlue';
 
+// Onboarding-related types and constants
+export const ONBOARDING_STEPS = {
+  NAME: 1,
+  COLLEGE: 2,
+  ACADEMICS: 3,
+  GOALS: 4,
+  KALYPSO_DIALOGUE: 5,
+  REFERRAL: 6,
+  UNLOCK: 7
+} as const;
+
+export type OnboardingStep = typeof ONBOARDING_STEPS[keyof typeof ONBOARDING_STEPS];
+
+export interface ValidationResult {
+  isValid: boolean;
+  missingFields: string[];
+  invalidFields: string[];
+  errors: string[];
+}
+
+export interface OnboardingInfo {
+  currentStep: number;
+  onboardingComplete: boolean;
+  firstName: string | null;
+  college: string | null;
+  isNonTraditional: boolean | null;
+  isCanadian: boolean | null;
+  gpa: number | null;
+  currentMcatScore: number | null;
+  hasNotTakenMCAT: boolean | null;
+  mcatAttemptNumber: string | null;
+  targetMedSchool: string | null;
+  targetScore: number | null;
+  referralEmail: string | null;
+  hasSeenIntroVideo: boolean;
+}
+
+export const DEFAULT_ONBOARDING_INFO = {
+  currentStep: 0,
+  onboardingComplete: false,
+  firstName: null,
+  college: null,
+  isNonTraditional: null,
+  isCanadian: null,
+  gpa: null,
+  currentMcatScore: null,
+  hasNotTakenMCAT: null,
+  mcatAttemptNumber: null,
+  targetMedSchool: null,
+  targetScore: null,
+  referralEmail: null,
+  hasSeenIntroVideo: false
+} as const satisfies OnboardingInfo;
+
+export const REQUIRED_STEPS = 3; // Minimum number of steps required for profile completion
+
 // Audio-related types
 export interface AudioBufferSourceWithGain {
   source: AudioBufferSourceNode;
diff --git a/types/index.ts b/types/index.ts
index 7ec549085828000aa50b8da5b21872ba0a82a360..7c191f1e5281ad5f7cfb5383267f61c21e9e706f 100644
--- a/types/index.ts
+++ b/types/index.ts
@@ -231,6 +231,7 @@ export interface OnboardingInfo {
   targetMedSchool: string | null;
   targetScore: number | null;
   referralEmail: string | null;
+  hasSeenIntroVideo?: boolean | null;
 }
 
 export enum ProductType {
diff --git a/types/user.ts b/types/user.ts
index 46033394a33f4e324ad0620efd80517cbceba337..689c81172d63789f86c43ec4d8f8db5b3ae80edb 100644
--- a/types/user.ts
+++ b/types/user.ts
@@ -24,6 +24,7 @@ export interface UserInfo {
   };
   notificationPreference?: string;
   onboardingInfo?: OnboardingInfo;
+  hasSeenIntroVideo: boolean;
   referrals?: any[];
   createdAt: Date;
 }
