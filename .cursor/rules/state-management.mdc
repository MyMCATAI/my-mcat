---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
---
name: State Management Patterns
description: Guidelines for accessing store state and actions in components
globs: ["**/*.tsx", "**/*.ts"]
alwaysApply: true
---

### State Management Patterns

#### Store Access
Always use the consolidated selector pattern from `@/store/selectors.ts` instead of directly importing from slice files.

✅ Correct: Use consolidated selectors
```typescript
import { useUI, useUser, useAudio } from '@/store/selectors';

const MyComponent = () => {
  const { theme } = useUI();
  const { isSubscribed } = useUser();
  const { playSound, stopLoop } = useAudio();
  
  // Component implementation
};
```

❌ Incorrect: Direct imports from slice files
```typescript
import { useUIStore } from '@/store/slices/uiSlice';
import { useUserStore } from '@/store/slices/userSlice';
import { useAudioStore } from '@/store/slices/audioSlice';

const MyComponent = () => {
  const theme = useUIStore(state => state.theme);
  const isSubscribed = useUserStore(state => state.isSubscribed);
  const playSound = useAudioStore(state => state.playSound);
  
  // Component implementation
};
```

#### Exception: Store Initialization Components
The only exception to this pattern is in components specifically designed for store initialization (e.g., `StoreInitializer.tsx`), where direct access to store actions may be required.

---

### Slice Extension Checklist

When adding **new state** or **actions** to any Zustand slice (`/store/slices/*.ts`), you must:

1. ✅ **Export the corresponding selector** from `selectors.ts`
   - Group it within the correct `useAudio`, `useGame`, `useUI`, `useUser`, or `useVocab` function.
   - Maintain alphabetical order and logical grouping when possible.

2. ✅ **Ensure correct rendering in `DebugPanel.tsx`**
   - Add relevant state to the `displayAudioState`, `gameState`, etc. blocks
   - Avoid including functions; convert audio nodes and objects to string descriptions as needed

This ensures all state changes are easily debuggable and accessible via the consolidated pattern.