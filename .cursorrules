# =====================
# CURSOR AI GUIDELINES
# =====================

# Load developer configuration
LOAD_CONFIG: |
  const devConfig = require('./README_Docs/config/developer.json');
  const DEVELOPER_NAME = devConfig.DEVELOPER_NAME;
  const technical = require('./README_Docs/architecture/technical.md');
  const architecture = require('./README_Docs/architecture/architecture.md');

SYSTEM_CONTEXT: |
  You are a senior developer working on the MYMCAT TypeScript/Next.js project.
  
  # Documentation Hierarchy
  1. Primary Documentation:
     - technical.md: Source of truth for coding standards
     - architecture.md: System design and patterns
     - tasks/${DEVELOPER_NAME}/tasks.md: Current tasks
     - tasks/${DEVELOPER_NAME}/status.md: Progress tracking

  2. Implementation Requirements:
     - Follow section headers from technical.md
     - Use animation patterns from technical.md
     - Implement feature gates per architecture.md
     - Follow component organization rules

  3. Before ANY Code Changes:
     - PARSE technical.md for relevant patterns
     - VERIFY against architecture.md
     - CHECK current task context
     - VALIDATE component structure

# Enforce Technical Standards
ENFORCE_TECHNICAL: |
  On every query:
  1. Load technical.md section standards
  2. Apply animation patterns
  3. Follow component organization
  4. Use proper section headers
  5. Implement proper loading states
  6. Follow markdown code block standards

# Enforce Architectural Patterns
ENFORCE_ARCHITECTURE: |
  On every component:
  1. Verify premium feature gates
  2. Check component dependencies
  3. Follow data flow patterns
  4. Implement proper auth checks

# Error Prevention
VALIDATION_RULES: |
  Before responding to any query:
  1. Load and parse technical.md completely
  2. Check section dividers (100 dashes)
  3. Validate heading hierarchy
  4. Ensure code blocks follow documentation rules
  5. Verify file paths in examples

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after code changes:
  1. VERIFY premium feature gates implementation
  2. CHECK README_Docs/architecture/architecture.md compliance
  3. UPDATE personal status.md with:
     - Current progress
     - Any blockers
     - Completed items
  4. VALIDATE against technical.md specifications
  5. VERIFY task progress
  6. NEVER modify package-lock.json directly

# Package Management Rules
PACKAGE_GUIDELINES: |
  - Never manually edit package-lock.json
  - Use npm install for adding new packages
  - Commit both package.json and package-lock.json together
  - Report conflicts in package-lock.json to team lead
  - Run npm ci for clean installs
  - Contact Josh for dependency updates

# Code Style Reference
CODE_STYLE_RULES: |
  All code style, formatting, and organization rules are defined in technical.md:
  - Component Structure
  - Section Headers (100 characters)
  - Import Standards
  - Route-Component Relationships
  - Component Naming
  - File Organization
  - Animation Patterns
  - Error Handling
  
  Always parse technical.md before implementing any component or feature.

  Component Template Requirements:
  1. Import Order:
     - React/Next.js
     - External libraries
     - Internal utilities/types
     - Internal components
  
  2. Section Headers:
     - Must be 100 characters wide
     - Must follow standard order
     - Constants/Types outside component
  
  3. Component Structure:
     - Default export
     - CamelCase naming
     - Props interface with Types section

# Architecture Understanding
READ_ARCHITECTURE: |
  File: README_Docs/architecture/architecture.md
  Required parsing:
  1. Load and parse Mermaid diagram focusing on:
     - Auth -> Onboarding flow
     - Feature Gates system
     - Free vs Premium features
     - Game systems
     - Data collection flow
  2. Extract and understand:
     - Premium vs Free feature boundaries
     - Clerk Auth integration points
     - Data flow patterns
     - Component dependencies
  3. Validate changes against architectural constraints
  4. Ensure proper feature gating

# Task Management
TASK_WORKFLOW: |
  Required files:
  - README_Docs/tasks/user-${DEVELOPER_NAME}/tasks.md
  - README_Docs/tasks/user-${DEVELOPER_NAME}/status.md
  - README_Docs/architecture/technical.md
  
  Workflow steps:
  1. READ personal tasks.md:
     - Parse requirements
     - Check premium feature implications
     - Identify dependencies
  
  2. VALIDATE against architecture.md:
     - Verify feature gate compliance
     - Check component interactions
     - Confirm Clerk Auth integration
  
  3. UPDATE personal status.md:
     - Track progress
     - Document blockers
     - Note premium feature considerations

# Feature Gate Implementation
PREMIUM_FEATURES: |
  # AI Behavior for Premium Features
  1. Source of Truth:
     - Load feature definitions from "Feature Control" section in technical.md
     - Follow implementation patterns from "Feature Gates" section
     - Reference component examples from technical.md
  
  2. Validation Requirements:
     - Verify component against documented feature gate patterns
     - Ensure proper hook usage (useSubscriptionStatus) as shown in examples
     - Confirm implementation matches technical.md specifications
     
  3. Documentation Requirements:
     - Reference "Free Features" and "Premium Features" sections in technical.md
     - Link to relevant implementation examples
     - Keep implementation aligned with documentation

  4. Response Guidelines:
     - Always cite specific sections from technical.md
     - Point developers to relevant code examples
     - Ensure responses align with documented patterns

# Technical Documentation Parser
PARSE_TECHNICAL_MD: |
  1. Section Hierarchy:
     - Parse h1 (#) for main document title
     - Parse h2 (##) for major sections
     - Parse h3 (###) for subsections
     - Parse h4 (####) for detailed guidelines
  
  2. Special Sections:
     - Always validate Feature Control section for premium gates
     - Check Component Guidelines for structure requirements
     - Verify Documentation Guidelines for formatting rules

# Component Structure Enforcement
ENFORCE_COMPONENT_STRUCTURE: |
  For all .tsx files:
  1. Verify file header comment
  2. Check import order against technical.md standards
  3. Validate section headers match technical.md template
  4. Ensure premium feature gates are implemented
  5. Check component naming conventions

# Documentation Standards
DOCUMENTATION_RULES: |
  For all .md files:
  1. Verify proper markdown link syntax
  2. Check code block formatting
  3. Validate section dividers
  4. Ensure proper heading hierarchy
  5. Check for complete examples in guidelines