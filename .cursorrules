# =====================
# CURSOR AI GUIDELINES
# =====================

# Load developer configuration
LOAD_CONFIG: |
  const devConfig = require('./README_Docs/config/developer.json');
  const DEVELOPER_NAME = devConfig.DEVELOPER_NAME;
  const technical = require('./README_Docs/architecture/technical.md');
  const architecture = require('./README_Docs/architecture/architecture.md');

SYSTEM_CONTEXT: |
  You are a senior developer working on the MYMCAT TypeScript/Next.js project.
  
  # Documentation Hierarchy
  1. Primary Documentation:
     - technical.md: Source of truth for coding standards
     - architecture.md: System design and patterns
     - tasks/${DEVELOPER_NAME}/tasks.md: Current tasks
     - tasks/${DEVELOPER_NAME}/status.md: Progress tracking

  2. Implementation Requirements:
     - Follow section headers from technical.md
     - Use animation patterns from technical.md
     - Implement feature gates per architecture.md
     - Follow component organization rules

  3. Before ANY Code Changes:
     - PARSE technical.md for relevant patterns
     - VERIFY against architecture.md
     - CHECK current task context
     - VALIDATE component structure

# Enforce Technical Standards
ENFORCE_TECHNICAL: |
  On every query:
  1. Load technical.md section standards
  2. Apply animation patterns
  3. Follow component organization
  4. Use proper section headers
  5. Implement proper loading states

# Enforce Architectural Patterns
ENFORCE_ARCHITECTURE: |
  On every component:
  1. Verify premium feature gates
  2. Check component dependencies
  3. Follow data flow patterns
  4. Implement proper auth checks

# Error Prevention
VALIDATION_RULES: |
  Before responding to any query:
  1. Load and parse technical.md
  2. Verify against architecture.md
  3. Check component patterns
  4. Validate section headers

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after code changes:
  1. VERIFY premium feature gates implementation
  2. CHECK README_Docs/architecture/architecture.md compliance
  3. UPDATE personal status.md with:
     - Current progress
     - Any blockers
     - Completed items
  4. VALIDATE against technical.md specifications
  5. VERIFY task progress
  6. NEVER modify package-lock.json directly

# Package Management Rules
PACKAGE_GUIDELINES: |
  - Never manually edit package-lock.json
  - Use npm install for adding new packages
  - Commit both package.json and package-lock.json together
  - Report conflicts in package-lock.json to team lead
  - Run npm ci for clean installs
  - Contact Josh for dependency updates

# Code Style Reference
CODE_STYLE_RULES: |
  All code style, formatting, and organization rules are defined in technical.md:
  - Component Structure
  - Section Headers (100 characters)
  - Import Standards
  - Route-Component Relationships
  - Component Naming
  - File Organization
  - Animation Patterns
  - Error Handling
  
  Always parse technical.md before implementing any component or feature.

# Architecture Understanding
READ_ARCHITECTURE: |
  File: README_Docs/architecture/architecture.md
  Required parsing:
  1. Load and parse Mermaid diagram focusing on:
     - Auth -> Onboarding flow
     - Feature Gates system
     - Free vs Premium features
     - Game systems
     - Data collection flow
  2. Extract and understand:
     - Premium vs Free feature boundaries
     - Clerk Auth integration points
     - Data flow patterns
     - Component dependencies
  3. Validate changes against architectural constraints
  4. Ensure proper feature gating

# Task Management
TASK_WORKFLOW: |
  Required files:
  - README_Docs/tasks/user-${DEVELOPER_NAME}/tasks.md
  - README_Docs/tasks/user-${DEVELOPER_NAME}/status.md
  - README_Docs/architecture/technical.md
  
  Workflow steps:
  1. READ personal tasks.md:
     - Parse requirements
     - Check premium feature implications
     - Identify dependencies
  
  2. VALIDATE against architecture.md:
     - Verify feature gate compliance
     - Check component interactions
     - Confirm Clerk Auth integration
  
  3. UPDATE personal status.md:
     - Track progress
     - Document blockers
     - Note premium feature considerations

# Feature Gate Implementation
PREMIUM_FEATURES: |
  Free Features:
  - Doctor's Office Game
  - Daily CARS Practice
  - Basic Statistics
  
  Premium Features:
  - Calendar System
  - Testing Suite
  - Adaptive Tutoring

  Implementation Requirements:
  - Use useSubscriptionStatus hook
  - Implement graceful fallbacks
  - Add upgrade prompts
  - Track user preferences
  - Monitor feature access
