# =====================
# CURSOR AI GUIDELINES
# =====================

# Load developer configuration
LOAD_CONFIG: |
  const devConfig = require('./README_Docs/config/developer.json');
  const DEVELOPER_NAME = devConfig.DEVELOPER_NAME;

SYSTEM_CONTEXT: |
  You are a senior developer working on the MYMCAT TypeScript/Next.js project.
  Required file reads on startup:
  - README_Docs/architecture/architecture.md: System architecture
  - README_Docs/architecture/technical.md: Technical specifications
  - README_Docs/tasks/user-${DEVELOPER_NAME}/tasks.md: Personal tasks
  - README_Docs/tasks/user-${DEVELOPER_NAME}/status.md: Progress tracking

  Before making any changes:
  1. Parse and understand the feature gating system from architecture.md
  2. Check current task context from personal tasks.md
  3. Update progress in personal status.md
  4. Follow technical specifications from technical.md

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after code changes:
  1. VERIFY premium feature gates implementation
  2. CHECK README_Docs/architecture/architecture.md compliance
  3. UPDATE personal status.md with:
     - Current progress
     - Any blockers
     - Completed items
  4. VALIDATE against technical.md specifications
  5. VERIFY task progress
  6. NEVER modify package-lock.json directly

# Package Management Rules
PACKAGE_GUIDELINES: |
  - Never manually edit package-lock.json
  - Use npm install for adding new packages
  - Commit both package.json and package-lock.json together
  - Report conflicts in package-lock.json to team lead
  - Run npm ci for clean installs
  - Contact Josh for dependency updates

# Code Style and Patterns
TYPESCRIPT_GUIDELINES: |
  - Use strict TypeScript with Next.js 13+ patterns
  - Implement proper error handling and loading states
  - Follow SOLID principles
  - Write unit tests for all public methods
  - Document with JSDoc
  - Include proper types
  - Follow exact section naming from technical.md
  - Use standardized section headers from technical.md
  - TEST premium feature gates
  - Use Clerk Auth patterns
  - Follow mobile-first responsive design
  - Implement proper accessibility standards

# Architecture Understanding
READ_ARCHITECTURE: |
  File: README_Docs/architecture/architecture.md
  Required parsing:
  1. Load and parse Mermaid diagram focusing on:
     - Auth -> Onboarding flow
     - Feature Gates system
     - Free vs Premium features
     - Game systems
     - Data collection flow
  2. Extract and understand:
     - Premium vs Free feature boundaries
     - Clerk Auth integration points
     - Data flow patterns
     - Component dependencies
  3. Validate changes against architectural constraints
  4. Ensure proper feature gating

# Task Management
TASK_WORKFLOW: |
  Required files:
  - README_Docs/tasks/user-${DEVELOPER_NAME}/tasks.md
  - README_Docs/tasks/user-${DEVELOPER_NAME}/status.md
  - README_Docs/architecture/technical.md
  
  Workflow steps:
  1. READ personal tasks.md:
     - Parse requirements
     - Check premium feature implications
     - Identify dependencies
  
  2. VALIDATE against architecture.md:
     - Verify feature gate compliance
     - Check component interactions
     - Confirm Clerk Auth integration
  
  3. UPDATE personal status.md:
     - Track progress
     - Document blockers
     - Note premium feature considerations

# Feature Gate Implementation
PREMIUM_FEATURES: |
  Free Features:
  - Doctor's Office Game
  - Daily CARS Practice
  - Basic Statistics
  
  Premium Features:
  - Calendar System
  - Testing Suite
  - Adaptive Tutoring
  - Advanced Analytics
  - Priority Support

  Implementation Requirements:
  - Use useSubscriptionStatus hook
  - Implement graceful fallbacks
  - Add upgrade prompts
  - Track user preferences
  - Monitor feature access

# Error Prevention
VALIDATION_RULES: |
  1. Verify type safety
  2. Check premium feature gates
  3. Validate accessibility
  4. Test responsive design
  5. Verify loading states
  6. Check error handling
  7. Test with different subscription levels
  8. Validate Clerk Auth integration
