generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model UserInfo {
  id        String   @id @default(cuid())
  userId    String   @unique
  bio       String
  updatedAt DateTime @updatedAt
  apiCount  Int      @default(0)
  createdAt DateTime @default(now())
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String?   @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model Passage {
  id        String     @id @default(cuid())
  text      String     @db.Text
  citation  String     @db.Text
  title     String?    @db.Text
  difficulty Float      @default(1)
  questions Question[]
}

model Question {
  id                  String         @id @default(cuid())
  questionContent     String         @db.Text
  questionOptions     String         @db.Text
  questionAnswerNotes String?        @db.Text
  passageId           String?
  categoryId          String
  contentCategory     String
  questionID          String
  passage             Passage?       @relation(fields: [passageId], references: [id])
  category            Category       @relation(fields: [categoryId], references: [id])
  testQuestions       TestQuestion[]
  userResponses       UserResponse[]

  @@index([passageId])
  @@index([categoryId])
}

model Category {
  id                 String             @id @default(cuid())
  subjectCategory    String
  contentCategory    String
  conceptCategory    String
  generalWeight      Float
  section            String
  color              String             @default("")
  icon               String             @default("")
  questions          Question[]
  calendarActivities CalendarActivity[]
  contents           Content[]
  userResponses      UserResponse[]
  knowledgeProfiles  KnowledgeProfile[]
}

model Test {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  setName     String?
  questions   TestQuestion[]
  userTests   UserTest[]
}

model TestQuestion {
  id         String   @id @default(cuid())
  testId     String
  questionId String
  sequence   Int
  test       Test     @relation(fields: [testId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@index([testId])
  @@index([questionId])
}

model UserTest {
  id         String         @id @default(cuid())
  userId     String
  testId     String?
  startedAt  DateTime       @default(now())
  finishedAt DateTime?
  score      Float?
  test       Test?          @relation(fields: [testId], references: [id])
  responses  UserResponse[]

  @@index([userId])
  @@index([testId])
}

model UserResponse {
  id         String    @id @default(cuid())
  userId String?
  userTestId String?
  questionId String
  userAnswer String
  isCorrect  Boolean
  categoryId String?
  timeSpent  Float?
  weighting  Float @default(1)
  userNotes  String?   @db.Text
  answeredAt DateTime  @default(now())
  userTest   UserTest? @relation(fields: [userTestId], references: [id])
  question   Question  @relation(fields: [questionId], references: [id])
  Category   Category? @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([userTestId])
  @@index([questionId])
  @@index([categoryId])
}

model StudyPlan {
  id                 String             @id @default(cuid())
  userId             String
  creationDate       DateTime           @default(now())
  examDate           DateTime
  resources          Json
  hoursPerDay        Json
  fullLengthDays     Json
  updatedAt          DateTime           @updatedAt
  calendarActivities CalendarActivity[]

  @@index([userId])
}

model CalendarActivity {
  id            String    @id @default(cuid())
  userId        String
  studyPlanId   String
  categoryId    String?
  activityText  String    @db.Text
  activityTitle String
  hours         Float
  activityType  String
  link          String?
  scheduledDate DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        String    @default("Not Started")
  contentId     String?
  studyPlan     StudyPlan @relation(fields: [studyPlanId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  content       Content?  @relation(fields: [contentId], references: [id])

  @@index([userId])
  @@index([studyPlanId])
  @@index([categoryId])
  @@index([scheduledDate])
  @@index([contentId])
}
model Content {
  id                 String             @id @default(cuid())
  title              String             @default("")
  categoryId         String
  link               String             @default("")
  type               String             @default("")
  total_timing       Float              @default(0)
  minutes_estimate   Float              @default(0)
  transcript         String?            @db.Text
  summary            String?            @db.Text
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  category           Category           @relation(fields: [categoryId], references: [id])
  calendarActivities CalendarActivity[]

  @@index([categoryId])
}

model KnowledgeProfile {
  id             String   @id @default(cuid())
  userId         String
  categoryId     String
  correctAnswers Int      @default(0)
  totalAttempts  Int      @default(0)
  lastAttemptAt  DateTime @default(now())
  conceptMastery Float?
  contentMastery Float?
  category       Category @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}
