generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// model UserInfo {
//   id                     String   @id @default(cuid())
//   userId                 String   @unique
//   bio                    String
//   updatedAt              DateTime @updatedAt
//   apiCount               Int      @default(0)
//   createdAt              DateTime @default(now())
//   score                  Int      @default(0)
//   clinicRooms            String   @default("")
//   hasPaid                Boolean  @default(false)
//   subscriptionType       String   @default("")
//   diagnosticScores       Json?
//   firstName              String?  @default("")
//   streak                 Int      @default(0)
//   notificationPreference String   @default("all")
//   unlocks                Json?    @default("[]")
//   patientRecord         PatientRecord?
// }

model UserInfo {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  bio                    String
  updatedAt              DateTime @updatedAt
  apiCount               Int      @default(0)
  createdAt              DateTime @default(now())
  score                  Int      @default(0)
  clinicRooms            String   @default("")
  hasPaid                Boolean  @default(false)
  subscriptionType       String   @default("")
  diagnosticScores       Json?
  firstName              String?  @default("")
  streak                 Int      @default(0)
  notificationPreference String   @default("all")
  unlocks                Json?    @default("[]")
  patientRecord          PatientRecord?
  hasSeenExamVideo       Boolean  @default(false) // New column
}

model UserSubscription {
  id                     String    @id @default(cuid())
  userId                 String?   @unique
  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

model Passage {
  id          String     @id @default(cuid())
  text        String     @db.Text
  citation    String     @db.Text
  title       String?    @db.Text
  difficulty  Float      @default(1)
  description String?    @db.Text
  questions   Question[]
  tests       Test[]
  userTests   UserTest[]
}

model Question {
  id                  String         @id @default(cuid())
  questionContent     String         @db.Text
  questionOptions     String         @db.Text
  questionAnswerNotes String?        @db.Text
  passageId           String?
  categoryId          String
  contentCategory     String
  questionID          String
  difficulty          Float          @default(1)
  context             String?        @db.Text
  contentId           String?
  links               String?        @db.Text
  tags                String?        @db.Text
  types               String?        @db.Text
  states              String?        @db.Text
  passage             Passage?       @relation(fields: [passageId], references: [id])
  category            Category       @relation(fields: [categoryId], references: [id])
  content             Content?       @relation(fields: [contentId], references: [id])
  testQuestions       TestQuestion[]
  userResponses       UserResponse[]

  @@index([passageId])
  @@index([categoryId])
  @@index([contentId])
}

model Category {
  id                 String             @id @default(cuid())
  subjectCategory    String
  contentCategory    String
  conceptCategory    String
  generalWeight      Float
  section            String
  color              String             @default("")
  icon               String             @default("")
  podcastLinks       String             @default("")
  questions          Question[]
  calendarActivities CalendarActivity[]
  contents           Content[]
  userResponses      UserResponse[]
  knowledgeProfiles  KnowledgeProfile[]
}

model Test {
  id          String         @id @default(cuid())
  title       String
  description String?        @db.Text
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  setName     String?
  difficulty  Float?
  passageId   String?
  passage     Passage?       @relation(fields: [passageId], references: [id])
  questions   TestQuestion[]
  userTests   UserTest[]

  @@index([passageId])
}

model TestQuestion {
  id         String   @id @default(cuid())
  testId     String
  questionId String
  sequence   Int
  test       Test     @relation(fields: [testId], references: [id])
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([testId])
  @@index([questionId])
}

model UserTest {
  id         String         @id @default(cuid())
  userId     String
  testId     String?
  startedAt  DateTime       @default(now())
  finishedAt DateTime?
  score      Float?
  passageId  String?
  reviewedAt DateTime?
  earnedCoin Boolean?       @default(false)
  test       Test?          @relation(fields: [testId], references: [id])
  passage    Passage?       @relation(fields: [passageId], references: [id])
  responses  UserResponse[]

  @@index([userId])
  @@index([testId])
  @@index([passageId])
}

model UserResponse {
  id          String    @id @default(cuid())
  userTestId  String?
  questionId  String
  userAnswer  String
  isCorrect   Boolean
  timeSpent   Float?
  userNotes   String?   @db.Text
  answeredAt  DateTime  @default(now())
  categoryId  String?
  userId      String?
  weighting   Float     @default(1)
  isReviewed  Boolean?  @default(false)
  reviewNotes String?   @db.Text
  flagged     Boolean?  @default(false)
  userTest    UserTest? @relation(fields: [userTestId], references: [id])
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  Category    Category? @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([userTestId])
  @@index([questionId])
  @@index([categoryId])
}

model StudyPlan {
  id                 String             @id @default(cuid())
  userId             String
  creationDate       DateTime           @default(now())
  examDate           DateTime
  resources          Json
  hoursPerDay        Json
  fullLengthDays     Json
  updatedAt          DateTime           @updatedAt
  calendarActivities CalendarActivity[]

  @@index([userId])
}

model CalendarActivity {
  id            String         @id @default(cuid())
  userId        String
  studyPlanId   String
  categoryId    String?
  activityText  String        @db.Text
  activityTitle String
  hours         Float
  activityType  String
  link          String?
  scheduledDate DateTime
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  status        String        @default("Not Started")
  contentId     String?
  tasks         Json?
  source        String        @default("")
  studyPlan     StudyPlan     @relation(fields: [studyPlanId], references: [id])
  category      Category?     @relation(fields: [categoryId], references: [id])
  content       Content?      @relation(fields: [contentId], references: [id])
  fullLengthExam FullLengthExam?

  @@index([userId])
  @@index([studyPlanId])
  @@index([categoryId])
  @@index([scheduledDate])
  @@index([contentId])
}

model Content {
  id                 String             @id @default(cuid())
  title              String             @default("")
  categoryId         String
  link               String             @default("")
  type               String             @default("")
  total_timing       Float              @default(0)
  minutes_estimate   Float              @default(0)
  transcript         String?            @db.LongText
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  summary            String?            @db.Text
  audioLink          String             @default("")
  category           Category           @relation(fields: [categoryId], references: [id])
  calendarActivities CalendarActivity[]
  questions          Question[]

  @@index([categoryId])
}

model KnowledgeProfile {
  id                   String    @id @default(cuid())
  userId               String
  categoryId           String
  correctAnswers       Int       @default(0)
  totalAttempts        Int       @default(0)
  lastAttemptAt        DateTime  @default(now())
  conceptMastery       Float?
  contentMastery       Float?
  completionPercentage Float     @default(0)
  completedAt          DateTime?
  category             Category  @relation(fields: [categoryId], references: [id])

  @@unique([userId, categoryId])
  @@index([userId])
  @@index([categoryId])
}

model Review {
  id             String @id @default(cuid())
  tier           Int
  rating         Int
  review         String @db.Text
  profilePicture String
}

model PatientRecord {
  id              String    @id @default(cuid())
  userId          String    @unique
  patientsTreated Int      @default(0)
  lastUpdated     DateTime  @updatedAt
  userInfo        UserInfo? @relation(fields: [userId], references: [userId])

  @@index([userId])
}

model Referral {
  id            String    @id @default(cuid())
  userId        String
  referrerName  String    @default("")
  referrerEmail String    @default("")
  friendEmail   String
  createdAt     DateTime  @default(now())
  friendUserId  String    @default("")
  joinedAt      DateTime?

  @@index([userId])
  @@index([friendEmail])
}

model DataPulse {
  id                    String          @id @default(cuid())
  name                  String
  level                 String          @default("conceptCategory")
  weight                Float           @default(1)
  source                String          @default("")
  notes                 String?         @db.Text
  createdAt             DateTime        @default(now())
  updatedAt             DateTime        @updatedAt
  negative              Int             @default(0)
  positive              Int             @default(0)
  userId                String
  questionText          String?         @db.Text
  answerText            String?         @db.Text
  answerExplanation     String?         @db.Text
  originalThoughtProcess String?        @db.Text
  correctedThoughtProcess String?       @db.Text
  errorType             String?
  section               String?
  aiResponse            String?            @db.Text
  reviewed              Boolean         @default(false)
  fullLengthExamId      String?
  fullLengthExam        FullLengthExam? @relation(fields: [fullLengthExamId], references: [id])

  @@index([fullLengthExamId])
}

model FullLengthExam {
  id                 String           @id @default(cuid())
  userId             String
  title              String
  aiResponse         String?         @db.Text
  calendarActivityId String?         @unique
  completed          Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  dataPulses         DataPulse[]
  calendarActivity   CalendarActivity? @relation(fields: [calendarActivityId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([calendarActivityId])
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String   // e.g., 'page_view', 'quiz_attempt', 'study_session'
  location  String   // URL or section identifier
  startTime DateTime @default(now())
  endTime   DateTime?
  duration  Int?     // Duration in seconds
  metadata  Json?    // Additional context data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([startTime])
}
